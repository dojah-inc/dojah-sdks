# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudGetEmailReputationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        email = schemas.StrSchema
                        reputation = schemas.StrSchema
                        suspicious = schemas.BoolSchema
                        references = schemas.NumberSchema
                        
                        
                        class details(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    blacklisted = schemas.BoolSchema
                                    malicious_activity = schemas.BoolSchema
                                    malicious_activity_recent = schemas.BoolSchema
                                    credentials_leaked = schemas.BoolSchema
                                    credentials_leaked_recent = schemas.BoolSchema
                                    data_breach = schemas.BoolSchema
                                    first_seen = schemas.StrSchema
                                    last_seen = schemas.StrSchema
                                    domain_exists = schemas.BoolSchema
                                    domain_reputation = schemas.StrSchema
                                    new_domain = schemas.BoolSchema
                                    days_since_domain_creation = schemas.NumberSchema
                                    suspicious_tld = schemas.BoolSchema
                                    spam = schemas.BoolSchema
                                    free_provider = schemas.BoolSchema
                                    disposable = schemas.BoolSchema
                                    deliverable = schemas.BoolSchema
                                    accept_all = schemas.BoolSchema
                                    valid_mx = schemas.BoolSchema
                                    primary_mx = schemas.StrSchema
                                    spoofable = schemas.BoolSchema
                                    spf_strict = schemas.BoolSchema
                                    dmarc_enforced = schemas.BoolSchema
                                    
                                    
                                    class profiles(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'profiles':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    __annotations__ = {
                                        "blacklisted": blacklisted,
                                        "malicious_activity": malicious_activity,
                                        "malicious_activity_recent": malicious_activity_recent,
                                        "credentials_leaked": credentials_leaked,
                                        "credentials_leaked_recent": credentials_leaked_recent,
                                        "data_breach": data_breach,
                                        "first_seen": first_seen,
                                        "last_seen": last_seen,
                                        "domain_exists": domain_exists,
                                        "domain_reputation": domain_reputation,
                                        "new_domain": new_domain,
                                        "days_since_domain_creation": days_since_domain_creation,
                                        "suspicious_tld": suspicious_tld,
                                        "spam": spam,
                                        "free_provider": free_provider,
                                        "disposable": disposable,
                                        "deliverable": deliverable,
                                        "accept_all": accept_all,
                                        "valid_mx": valid_mx,
                                        "primary_mx": primary_mx,
                                        "spoofable": spoofable,
                                        "spf_strict": spf_strict,
                                        "dmarc_enforced": dmarc_enforced,
                                        "profiles": profiles,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["blacklisted"]) -> MetaOapg.properties.blacklisted: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["malicious_activity"]) -> MetaOapg.properties.malicious_activity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["malicious_activity_recent"]) -> MetaOapg.properties.malicious_activity_recent: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["credentials_leaked"]) -> MetaOapg.properties.credentials_leaked: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["credentials_leaked_recent"]) -> MetaOapg.properties.credentials_leaked_recent: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["data_breach"]) -> MetaOapg.properties.data_breach: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["first_seen"]) -> MetaOapg.properties.first_seen: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["last_seen"]) -> MetaOapg.properties.last_seen: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["domain_exists"]) -> MetaOapg.properties.domain_exists: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["domain_reputation"]) -> MetaOapg.properties.domain_reputation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["new_domain"]) -> MetaOapg.properties.new_domain: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["days_since_domain_creation"]) -> MetaOapg.properties.days_since_domain_creation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["suspicious_tld"]) -> MetaOapg.properties.suspicious_tld: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["spam"]) -> MetaOapg.properties.spam: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["free_provider"]) -> MetaOapg.properties.free_provider: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["deliverable"]) -> MetaOapg.properties.deliverable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accept_all"]) -> MetaOapg.properties.accept_all: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["valid_mx"]) -> MetaOapg.properties.valid_mx: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["primary_mx"]) -> MetaOapg.properties.primary_mx: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["spoofable"]) -> MetaOapg.properties.spoofable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["spf_strict"]) -> MetaOapg.properties.spf_strict: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dmarc_enforced"]) -> MetaOapg.properties.dmarc_enforced: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["profiles"]) -> MetaOapg.properties.profiles: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["blacklisted", "malicious_activity", "malicious_activity_recent", "credentials_leaked", "credentials_leaked_recent", "data_breach", "first_seen", "last_seen", "domain_exists", "domain_reputation", "new_domain", "days_since_domain_creation", "suspicious_tld", "spam", "free_provider", "disposable", "deliverable", "accept_all", "valid_mx", "primary_mx", "spoofable", "spf_strict", "dmarc_enforced", "profiles", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["blacklisted"]) -> typing.Union[MetaOapg.properties.blacklisted, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["malicious_activity"]) -> typing.Union[MetaOapg.properties.malicious_activity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["malicious_activity_recent"]) -> typing.Union[MetaOapg.properties.malicious_activity_recent, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["credentials_leaked"]) -> typing.Union[MetaOapg.properties.credentials_leaked, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["credentials_leaked_recent"]) -> typing.Union[MetaOapg.properties.credentials_leaked_recent, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["data_breach"]) -> typing.Union[MetaOapg.properties.data_breach, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["first_seen"]) -> typing.Union[MetaOapg.properties.first_seen, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["last_seen"]) -> typing.Union[MetaOapg.properties.last_seen, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["domain_exists"]) -> typing.Union[MetaOapg.properties.domain_exists, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["domain_reputation"]) -> typing.Union[MetaOapg.properties.domain_reputation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["new_domain"]) -> typing.Union[MetaOapg.properties.new_domain, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["days_since_domain_creation"]) -> typing.Union[MetaOapg.properties.days_since_domain_creation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["suspicious_tld"]) -> typing.Union[MetaOapg.properties.suspicious_tld, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["spam"]) -> typing.Union[MetaOapg.properties.spam, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["free_provider"]) -> typing.Union[MetaOapg.properties.free_provider, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["deliverable"]) -> typing.Union[MetaOapg.properties.deliverable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accept_all"]) -> typing.Union[MetaOapg.properties.accept_all, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["valid_mx"]) -> typing.Union[MetaOapg.properties.valid_mx, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["primary_mx"]) -> typing.Union[MetaOapg.properties.primary_mx, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["spoofable"]) -> typing.Union[MetaOapg.properties.spoofable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["spf_strict"]) -> typing.Union[MetaOapg.properties.spf_strict, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dmarc_enforced"]) -> typing.Union[MetaOapg.properties.dmarc_enforced, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["profiles"]) -> typing.Union[MetaOapg.properties.profiles, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blacklisted", "malicious_activity", "malicious_activity_recent", "credentials_leaked", "credentials_leaked_recent", "data_breach", "first_seen", "last_seen", "domain_exists", "domain_reputation", "new_domain", "days_since_domain_creation", "suspicious_tld", "spam", "free_provider", "disposable", "deliverable", "accept_all", "valid_mx", "primary_mx", "spoofable", "spf_strict", "dmarc_enforced", "profiles", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                blacklisted: typing.Union[MetaOapg.properties.blacklisted, bool, schemas.Unset] = schemas.unset,
                                malicious_activity: typing.Union[MetaOapg.properties.malicious_activity, bool, schemas.Unset] = schemas.unset,
                                malicious_activity_recent: typing.Union[MetaOapg.properties.malicious_activity_recent, bool, schemas.Unset] = schemas.unset,
                                credentials_leaked: typing.Union[MetaOapg.properties.credentials_leaked, bool, schemas.Unset] = schemas.unset,
                                credentials_leaked_recent: typing.Union[MetaOapg.properties.credentials_leaked_recent, bool, schemas.Unset] = schemas.unset,
                                data_breach: typing.Union[MetaOapg.properties.data_breach, bool, schemas.Unset] = schemas.unset,
                                first_seen: typing.Union[MetaOapg.properties.first_seen, str, schemas.Unset] = schemas.unset,
                                last_seen: typing.Union[MetaOapg.properties.last_seen, str, schemas.Unset] = schemas.unset,
                                domain_exists: typing.Union[MetaOapg.properties.domain_exists, bool, schemas.Unset] = schemas.unset,
                                domain_reputation: typing.Union[MetaOapg.properties.domain_reputation, str, schemas.Unset] = schemas.unset,
                                new_domain: typing.Union[MetaOapg.properties.new_domain, bool, schemas.Unset] = schemas.unset,
                                days_since_domain_creation: typing.Union[MetaOapg.properties.days_since_domain_creation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                suspicious_tld: typing.Union[MetaOapg.properties.suspicious_tld, bool, schemas.Unset] = schemas.unset,
                                spam: typing.Union[MetaOapg.properties.spam, bool, schemas.Unset] = schemas.unset,
                                free_provider: typing.Union[MetaOapg.properties.free_provider, bool, schemas.Unset] = schemas.unset,
                                disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
                                deliverable: typing.Union[MetaOapg.properties.deliverable, bool, schemas.Unset] = schemas.unset,
                                accept_all: typing.Union[MetaOapg.properties.accept_all, bool, schemas.Unset] = schemas.unset,
                                valid_mx: typing.Union[MetaOapg.properties.valid_mx, bool, schemas.Unset] = schemas.unset,
                                primary_mx: typing.Union[MetaOapg.properties.primary_mx, str, schemas.Unset] = schemas.unset,
                                spoofable: typing.Union[MetaOapg.properties.spoofable, bool, schemas.Unset] = schemas.unset,
                                spf_strict: typing.Union[MetaOapg.properties.spf_strict, bool, schemas.Unset] = schemas.unset,
                                dmarc_enforced: typing.Union[MetaOapg.properties.dmarc_enforced, bool, schemas.Unset] = schemas.unset,
                                profiles: typing.Union[MetaOapg.properties.profiles, list, tuple, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'details':
                                return super().__new__(
                                    cls,
                                    *args,
                                    blacklisted=blacklisted,
                                    malicious_activity=malicious_activity,
                                    malicious_activity_recent=malicious_activity_recent,
                                    credentials_leaked=credentials_leaked,
                                    credentials_leaked_recent=credentials_leaked_recent,
                                    data_breach=data_breach,
                                    first_seen=first_seen,
                                    last_seen=last_seen,
                                    domain_exists=domain_exists,
                                    domain_reputation=domain_reputation,
                                    new_domain=new_domain,
                                    days_since_domain_creation=days_since_domain_creation,
                                    suspicious_tld=suspicious_tld,
                                    spam=spam,
                                    free_provider=free_provider,
                                    disposable=disposable,
                                    deliverable=deliverable,
                                    accept_all=accept_all,
                                    valid_mx=valid_mx,
                                    primary_mx=primary_mx,
                                    spoofable=spoofable,
                                    spf_strict=spf_strict,
                                    dmarc_enforced=dmarc_enforced,
                                    profiles=profiles,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        score = schemas.NumberSchema
                        deliverable = schemas.BoolSchema
                        
                        
                        class domain_details(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    domain = schemas.StrSchema
                                    tld = schemas.StrSchema
                                    registered = schemas.BoolSchema
                                    created = schemas.StrSchema
                                    updated = schemas.StrSchema
                                    expires = schemas.StrSchema
                                    registrar_name = schemas.StrSchema
                                    
                                    
                                    class registered_to(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'registered_to':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    disposable = schemas.BoolSchema
                                    free = schemas.BoolSchema
                                    custom = schemas.BoolSchema
                                    dmarc_enforced = schemas.BoolSchema
                                    spf_strict = schemas.BoolSchema
                                    valid_mx = schemas.BoolSchema
                                    accept_all = schemas.BoolSchema
                                    suspicious_tld = schemas.BoolSchema
                                    website_exists = schemas.BoolSchema
                                    __annotations__ = {
                                        "domain": domain,
                                        "tld": tld,
                                        "registered": registered,
                                        "created": created,
                                        "updated": updated,
                                        "expires": expires,
                                        "registrar_name": registrar_name,
                                        "registered_to": registered_to,
                                        "disposable": disposable,
                                        "free": free,
                                        "custom": custom,
                                        "dmarc_enforced": dmarc_enforced,
                                        "spf_strict": spf_strict,
                                        "valid_mx": valid_mx,
                                        "accept_all": accept_all,
                                        "suspicious_tld": suspicious_tld,
                                        "website_exists": website_exists,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["tld"]) -> MetaOapg.properties.tld: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["registered"]) -> MetaOapg.properties.registered: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["registrar_name"]) -> MetaOapg.properties.registrar_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["registered_to"]) -> MetaOapg.properties.registered_to: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["free"]) -> MetaOapg.properties.free: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dmarc_enforced"]) -> MetaOapg.properties.dmarc_enforced: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["spf_strict"]) -> MetaOapg.properties.spf_strict: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["valid_mx"]) -> MetaOapg.properties.valid_mx: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accept_all"]) -> MetaOapg.properties.accept_all: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["suspicious_tld"]) -> MetaOapg.properties.suspicious_tld: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["website_exists"]) -> MetaOapg.properties.website_exists: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["tld"]) -> typing.Union[MetaOapg.properties.tld, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["registered"]) -> typing.Union[MetaOapg.properties.registered, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["registrar_name"]) -> typing.Union[MetaOapg.properties.registrar_name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["registered_to"]) -> typing.Union[MetaOapg.properties.registered_to, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["free"]) -> typing.Union[MetaOapg.properties.free, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dmarc_enforced"]) -> typing.Union[MetaOapg.properties.dmarc_enforced, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["spf_strict"]) -> typing.Union[MetaOapg.properties.spf_strict, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["valid_mx"]) -> typing.Union[MetaOapg.properties.valid_mx, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accept_all"]) -> typing.Union[MetaOapg.properties.accept_all, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["suspicious_tld"]) -> typing.Union[MetaOapg.properties.suspicious_tld, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["website_exists"]) -> typing.Union[MetaOapg.properties.website_exists, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
                                tld: typing.Union[MetaOapg.properties.tld, str, schemas.Unset] = schemas.unset,
                                registered: typing.Union[MetaOapg.properties.registered, bool, schemas.Unset] = schemas.unset,
                                created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
                                updated: typing.Union[MetaOapg.properties.updated, str, schemas.Unset] = schemas.unset,
                                expires: typing.Union[MetaOapg.properties.expires, str, schemas.Unset] = schemas.unset,
                                registrar_name: typing.Union[MetaOapg.properties.registrar_name, str, schemas.Unset] = schemas.unset,
                                registered_to: typing.Union[MetaOapg.properties.registered_to, None, str, schemas.Unset] = schemas.unset,
                                disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
                                free: typing.Union[MetaOapg.properties.free, bool, schemas.Unset] = schemas.unset,
                                custom: typing.Union[MetaOapg.properties.custom, bool, schemas.Unset] = schemas.unset,
                                dmarc_enforced: typing.Union[MetaOapg.properties.dmarc_enforced, bool, schemas.Unset] = schemas.unset,
                                spf_strict: typing.Union[MetaOapg.properties.spf_strict, bool, schemas.Unset] = schemas.unset,
                                valid_mx: typing.Union[MetaOapg.properties.valid_mx, bool, schemas.Unset] = schemas.unset,
                                accept_all: typing.Union[MetaOapg.properties.accept_all, bool, schemas.Unset] = schemas.unset,
                                suspicious_tld: typing.Union[MetaOapg.properties.suspicious_tld, bool, schemas.Unset] = schemas.unset,
                                website_exists: typing.Union[MetaOapg.properties.website_exists, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'domain_details':
                                return super().__new__(
                                    cls,
                                    *args,
                                    domain=domain,
                                    tld=tld,
                                    registered=registered,
                                    created=created,
                                    updated=updated,
                                    expires=expires,
                                    registrar_name=registrar_name,
                                    registered_to=registered_to,
                                    disposable=disposable,
                                    free=free,
                                    custom=custom,
                                    dmarc_enforced=dmarc_enforced,
                                    spf_strict=spf_strict,
                                    valid_mx=valid_mx,
                                    accept_all=accept_all,
                                    suspicious_tld=suspicious_tld,
                                    website_exists=website_exists,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class breach_details(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    haveibeenpwned_listed = schemas.BoolSchema
                                    number_of_breaches = schemas.NumberSchema
                                    
                                    
                                    class first_breach(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'first_breach':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class breaches(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'breaches':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    __annotations__ = {
                                        "haveibeenpwned_listed": haveibeenpwned_listed,
                                        "number_of_breaches": number_of_breaches,
                                        "first_breach": first_breach,
                                        "breaches": breaches,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["haveibeenpwned_listed"]) -> MetaOapg.properties.haveibeenpwned_listed: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["number_of_breaches"]) -> MetaOapg.properties.number_of_breaches: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["first_breach"]) -> MetaOapg.properties.first_breach: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["breaches"]) -> MetaOapg.properties.breaches: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["haveibeenpwned_listed", "number_of_breaches", "first_breach", "breaches", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["haveibeenpwned_listed"]) -> typing.Union[MetaOapg.properties.haveibeenpwned_listed, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["number_of_breaches"]) -> typing.Union[MetaOapg.properties.number_of_breaches, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["first_breach"]) -> typing.Union[MetaOapg.properties.first_breach, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["breaches"]) -> typing.Union[MetaOapg.properties.breaches, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["haveibeenpwned_listed", "number_of_breaches", "first_breach", "breaches", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                haveibeenpwned_listed: typing.Union[MetaOapg.properties.haveibeenpwned_listed, bool, schemas.Unset] = schemas.unset,
                                number_of_breaches: typing.Union[MetaOapg.properties.number_of_breaches, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                first_breach: typing.Union[MetaOapg.properties.first_breach, None, str, schemas.Unset] = schemas.unset,
                                breaches: typing.Union[MetaOapg.properties.breaches, list, tuple, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'breach_details':
                                return super().__new__(
                                    cls,
                                    *args,
                                    haveibeenpwned_listed=haveibeenpwned_listed,
                                    number_of_breaches=number_of_breaches,
                                    first_breach=first_breach,
                                    breaches=breaches,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class account_details_registered(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'account_details_registered':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "email": email,
                            "reputation": reputation,
                            "suspicious": suspicious,
                            "references": references,
                            "details": details,
                            "score": score,
                            "deliverable": deliverable,
                            "domain_details": domain_details,
                            "breach_details": breach_details,
                            "account_details_registered": account_details_registered,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reputation"]) -> MetaOapg.properties.reputation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suspicious"]) -> MetaOapg.properties.suspicious: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deliverable"]) -> MetaOapg.properties.deliverable: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["domain_details"]) -> MetaOapg.properties.domain_details: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["breach_details"]) -> MetaOapg.properties.breach_details: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["account_details_registered"]) -> MetaOapg.properties.account_details_registered: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "reputation", "suspicious", "references", "details", "score", "deliverable", "domain_details", "breach_details", "account_details_registered", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reputation"]) -> typing.Union[MetaOapg.properties.reputation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suspicious"]) -> typing.Union[MetaOapg.properties.suspicious, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> typing.Union[MetaOapg.properties.references, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deliverable"]) -> typing.Union[MetaOapg.properties.deliverable, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["domain_details"]) -> typing.Union[MetaOapg.properties.domain_details, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["breach_details"]) -> typing.Union[MetaOapg.properties.breach_details, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["account_details_registered"]) -> typing.Union[MetaOapg.properties.account_details_registered, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "reputation", "suspicious", "references", "details", "score", "deliverable", "domain_details", "breach_details", "account_details_registered", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                    reputation: typing.Union[MetaOapg.properties.reputation, str, schemas.Unset] = schemas.unset,
                    suspicious: typing.Union[MetaOapg.properties.suspicious, bool, schemas.Unset] = schemas.unset,
                    references: typing.Union[MetaOapg.properties.references, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    details: typing.Union[MetaOapg.properties.details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    deliverable: typing.Union[MetaOapg.properties.deliverable, bool, schemas.Unset] = schemas.unset,
                    domain_details: typing.Union[MetaOapg.properties.domain_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    breach_details: typing.Union[MetaOapg.properties.breach_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    account_details_registered: typing.Union[MetaOapg.properties.account_details_registered, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        email=email,
                        reputation=reputation,
                        suspicious=suspicious,
                        references=references,
                        details=details,
                        score=score,
                        deliverable=deliverable,
                        domain_details=domain_details,
                        breach_details=breach_details,
                        account_details_registered=account_details_registered,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudGetEmailReputationResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
