# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudGetIpReputationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class report(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    ip = schemas.StrSchema
                                    
                                    
                                    class blacklists(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                detections = schemas.NumberSchema
                                                engines_count = schemas.NumberSchema
                                                detection_rate = schemas.StrSchema
                                                scantime = schemas.StrSchema
                                                __annotations__ = {
                                                    "detections": detections,
                                                    "engines_count": engines_count,
                                                    "detection_rate": detection_rate,
                                                    "scantime": scantime,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["detections"]) -> MetaOapg.properties.detections: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["engines_count"]) -> MetaOapg.properties.engines_count: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["detection_rate"]) -> MetaOapg.properties.detection_rate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["scantime"]) -> MetaOapg.properties.scantime: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["detections", "engines_count", "detection_rate", "scantime", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["detections"]) -> typing.Union[MetaOapg.properties.detections, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["engines_count"]) -> typing.Union[MetaOapg.properties.engines_count, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["detection_rate"]) -> typing.Union[MetaOapg.properties.detection_rate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["scantime"]) -> typing.Union[MetaOapg.properties.scantime, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["detections", "engines_count", "detection_rate", "scantime", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            detections: typing.Union[MetaOapg.properties.detections, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            engines_count: typing.Union[MetaOapg.properties.engines_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            detection_rate: typing.Union[MetaOapg.properties.detection_rate, str, schemas.Unset] = schemas.unset,
                                            scantime: typing.Union[MetaOapg.properties.scantime, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'blacklists':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                detections=detections,
                                                engines_count=engines_count,
                                                detection_rate=detection_rate,
                                                scantime=scantime,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class information(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                reverse_dns = schemas.StrSchema
                                                continent_code = schemas.StrSchema
                                                continent_name = schemas.StrSchema
                                                country_code = schemas.StrSchema
                                                country_name = schemas.StrSchema
                                                country_currency = schemas.StrSchema
                                                country_calling_code = schemas.StrSchema
                                                region_name = schemas.StrSchema
                                                city_name = schemas.StrSchema
                                                latitude = schemas.NumberSchema
                                                longitude = schemas.NumberSchema
                                                isp = schemas.StrSchema
                                                asn = schemas.StrSchema
                                                __annotations__ = {
                                                    "reverse_dns": reverse_dns,
                                                    "continent_code": continent_code,
                                                    "continent_name": continent_name,
                                                    "country_code": country_code,
                                                    "country_name": country_name,
                                                    "country_currency": country_currency,
                                                    "country_calling_code": country_calling_code,
                                                    "region_name": region_name,
                                                    "city_name": city_name,
                                                    "latitude": latitude,
                                                    "longitude": longitude,
                                                    "isp": isp,
                                                    "asn": asn,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reverse_dns"]) -> MetaOapg.properties.reverse_dns: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["continent_code"]) -> MetaOapg.properties.continent_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["continent_name"]) -> MetaOapg.properties.continent_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_currency"]) -> MetaOapg.properties.country_currency: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_calling_code"]) -> MetaOapg.properties.country_calling_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["region_name"]) -> MetaOapg.properties.region_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["city_name"]) -> MetaOapg.properties.city_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["isp"]) -> MetaOapg.properties.isp: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["asn"]) -> MetaOapg.properties.asn: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reverse_dns"]) -> typing.Union[MetaOapg.properties.reverse_dns, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["continent_code"]) -> typing.Union[MetaOapg.properties.continent_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["continent_name"]) -> typing.Union[MetaOapg.properties.continent_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_currency"]) -> typing.Union[MetaOapg.properties.country_currency, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_calling_code"]) -> typing.Union[MetaOapg.properties.country_calling_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["region_name"]) -> typing.Union[MetaOapg.properties.region_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["city_name"]) -> typing.Union[MetaOapg.properties.city_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["isp"]) -> typing.Union[MetaOapg.properties.isp, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["asn"]) -> typing.Union[MetaOapg.properties.asn, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            reverse_dns: typing.Union[MetaOapg.properties.reverse_dns, str, schemas.Unset] = schemas.unset,
                                            continent_code: typing.Union[MetaOapg.properties.continent_code, str, schemas.Unset] = schemas.unset,
                                            continent_name: typing.Union[MetaOapg.properties.continent_name, str, schemas.Unset] = schemas.unset,
                                            country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
                                            country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
                                            country_currency: typing.Union[MetaOapg.properties.country_currency, str, schemas.Unset] = schemas.unset,
                                            country_calling_code: typing.Union[MetaOapg.properties.country_calling_code, str, schemas.Unset] = schemas.unset,
                                            region_name: typing.Union[MetaOapg.properties.region_name, str, schemas.Unset] = schemas.unset,
                                            city_name: typing.Union[MetaOapg.properties.city_name, str, schemas.Unset] = schemas.unset,
                                            latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            isp: typing.Union[MetaOapg.properties.isp, str, schemas.Unset] = schemas.unset,
                                            asn: typing.Union[MetaOapg.properties.asn, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'information':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                reverse_dns=reverse_dns,
                                                continent_code=continent_code,
                                                continent_name=continent_name,
                                                country_code=country_code,
                                                country_name=country_name,
                                                country_currency=country_currency,
                                                country_calling_code=country_calling_code,
                                                region_name=region_name,
                                                city_name=city_name,
                                                latitude=latitude,
                                                longitude=longitude,
                                                isp=isp,
                                                asn=asn,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class anonymity(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                is_proxy = schemas.BoolSchema
                                                is_webproxy = schemas.BoolSchema
                                                is_vpn = schemas.BoolSchema
                                                is_hosting = schemas.BoolSchema
                                                is_tor = schemas.BoolSchema
                                                __annotations__ = {
                                                    "is_proxy": is_proxy,
                                                    "is_webproxy": is_webproxy,
                                                    "is_vpn": is_vpn,
                                                    "is_hosting": is_hosting,
                                                    "is_tor": is_tor,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_proxy"]) -> MetaOapg.properties.is_proxy: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_webproxy"]) -> MetaOapg.properties.is_webproxy: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_vpn"]) -> MetaOapg.properties.is_vpn: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_hosting"]) -> MetaOapg.properties.is_hosting: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_tor"]) -> MetaOapg.properties.is_tor: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_proxy"]) -> typing.Union[MetaOapg.properties.is_proxy, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_webproxy"]) -> typing.Union[MetaOapg.properties.is_webproxy, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_vpn"]) -> typing.Union[MetaOapg.properties.is_vpn, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_hosting"]) -> typing.Union[MetaOapg.properties.is_hosting, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_tor"]) -> typing.Union[MetaOapg.properties.is_tor, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            is_proxy: typing.Union[MetaOapg.properties.is_proxy, bool, schemas.Unset] = schemas.unset,
                                            is_webproxy: typing.Union[MetaOapg.properties.is_webproxy, bool, schemas.Unset] = schemas.unset,
                                            is_vpn: typing.Union[MetaOapg.properties.is_vpn, bool, schemas.Unset] = schemas.unset,
                                            is_hosting: typing.Union[MetaOapg.properties.is_hosting, bool, schemas.Unset] = schemas.unset,
                                            is_tor: typing.Union[MetaOapg.properties.is_tor, bool, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'anonymity':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                is_proxy=is_proxy,
                                                is_webproxy=is_webproxy,
                                                is_vpn=is_vpn,
                                                is_hosting=is_hosting,
                                                is_tor=is_tor,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class risk_score(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                result = schemas.NumberSchema
                                                __annotations__ = {
                                                    "result": result,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["result", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["result", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            result: typing.Union[MetaOapg.properties.result, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'risk_score':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                result=result,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "ip": ip,
                                        "blacklists": blacklists,
                                        "information": information,
                                        "anonymity": anonymity,
                                        "risk_score": risk_score,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["blacklists"]) -> MetaOapg.properties.blacklists: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["information"]) -> MetaOapg.properties.information: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["anonymity"]) -> MetaOapg.properties.anonymity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["risk_score"]) -> MetaOapg.properties.risk_score: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ip", "blacklists", "information", "anonymity", "risk_score", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["blacklists"]) -> typing.Union[MetaOapg.properties.blacklists, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["information"]) -> typing.Union[MetaOapg.properties.information, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["anonymity"]) -> typing.Union[MetaOapg.properties.anonymity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["risk_score"]) -> typing.Union[MetaOapg.properties.risk_score, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ip", "blacklists", "information", "anonymity", "risk_score", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
                                blacklists: typing.Union[MetaOapg.properties.blacklists, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                information: typing.Union[MetaOapg.properties.information, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                anonymity: typing.Union[MetaOapg.properties.anonymity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                risk_score: typing.Union[MetaOapg.properties.risk_score, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'report':
                                return super().__new__(
                                    cls,
                                    *args,
                                    ip=ip,
                                    blacklists=blacklists,
                                    information=information,
                                    anonymity=anonymity,
                                    risk_score=risk_score,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        success = schemas.BoolSchema
                        __annotations__ = {
                            "report": report,
                            "success": success,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["report"]) -> MetaOapg.properties.report: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["report", "success", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["report"]) -> typing.Union[MetaOapg.properties.report, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["success"]) -> typing.Union[MetaOapg.properties.success, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["report", "success", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    report: typing.Union[MetaOapg.properties.report, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    success: typing.Union[MetaOapg.properties.success, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        report=report,
                        success=success,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudGetIpReputationResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
