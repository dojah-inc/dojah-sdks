# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudScreenUserResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class aml_screening_result(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'aml_screening_result':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class ip_check_result(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    ip = schemas.StrSchema
                                    
                                    
                                    class blacklists(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                detections = schemas.NumberSchema
                                                engines_count = schemas.NumberSchema
                                                detection_rate = schemas.StrSchema
                                                scantime = schemas.StrSchema
                                                __annotations__ = {
                                                    "detections": detections,
                                                    "engines_count": engines_count,
                                                    "detection_rate": detection_rate,
                                                    "scantime": scantime,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["detections"]) -> MetaOapg.properties.detections: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["engines_count"]) -> MetaOapg.properties.engines_count: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["detection_rate"]) -> MetaOapg.properties.detection_rate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["scantime"]) -> MetaOapg.properties.scantime: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["detections", "engines_count", "detection_rate", "scantime", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["detections"]) -> typing.Union[MetaOapg.properties.detections, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["engines_count"]) -> typing.Union[MetaOapg.properties.engines_count, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["detection_rate"]) -> typing.Union[MetaOapg.properties.detection_rate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["scantime"]) -> typing.Union[MetaOapg.properties.scantime, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["detections", "engines_count", "detection_rate", "scantime", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            detections: typing.Union[MetaOapg.properties.detections, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            engines_count: typing.Union[MetaOapg.properties.engines_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            detection_rate: typing.Union[MetaOapg.properties.detection_rate, str, schemas.Unset] = schemas.unset,
                                            scantime: typing.Union[MetaOapg.properties.scantime, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'blacklists':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                detections=detections,
                                                engines_count=engines_count,
                                                detection_rate=detection_rate,
                                                scantime=scantime,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class anonymity(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                is_proxy = schemas.BoolSchema
                                                is_webproxy = schemas.BoolSchema
                                                is_vpn = schemas.BoolSchema
                                                is_hosting = schemas.BoolSchema
                                                is_tor = schemas.BoolSchema
                                                __annotations__ = {
                                                    "is_proxy": is_proxy,
                                                    "is_webproxy": is_webproxy,
                                                    "is_vpn": is_vpn,
                                                    "is_hosting": is_hosting,
                                                    "is_tor": is_tor,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_proxy"]) -> MetaOapg.properties.is_proxy: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_webproxy"]) -> MetaOapg.properties.is_webproxy: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_vpn"]) -> MetaOapg.properties.is_vpn: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_hosting"]) -> MetaOapg.properties.is_hosting: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_tor"]) -> MetaOapg.properties.is_tor: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_proxy"]) -> typing.Union[MetaOapg.properties.is_proxy, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_webproxy"]) -> typing.Union[MetaOapg.properties.is_webproxy, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_vpn"]) -> typing.Union[MetaOapg.properties.is_vpn, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_hosting"]) -> typing.Union[MetaOapg.properties.is_hosting, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_tor"]) -> typing.Union[MetaOapg.properties.is_tor, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            is_proxy: typing.Union[MetaOapg.properties.is_proxy, bool, schemas.Unset] = schemas.unset,
                                            is_webproxy: typing.Union[MetaOapg.properties.is_webproxy, bool, schemas.Unset] = schemas.unset,
                                            is_vpn: typing.Union[MetaOapg.properties.is_vpn, bool, schemas.Unset] = schemas.unset,
                                            is_hosting: typing.Union[MetaOapg.properties.is_hosting, bool, schemas.Unset] = schemas.unset,
                                            is_tor: typing.Union[MetaOapg.properties.is_tor, bool, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'anonymity':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                is_proxy=is_proxy,
                                                is_webproxy=is_webproxy,
                                                is_vpn=is_vpn,
                                                is_hosting=is_hosting,
                                                is_tor=is_tor,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class risk_score(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                result = schemas.NumberSchema
                                                __annotations__ = {
                                                    "result": result,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["result", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["result", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            result: typing.Union[MetaOapg.properties.result, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'risk_score':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                result=result,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class ip_details(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                reverse_dns = schemas.StrSchema
                                                continent_code = schemas.StrSchema
                                                continent_name = schemas.StrSchema
                                                country_code = schemas.StrSchema
                                                country_name = schemas.StrSchema
                                                country_currency = schemas.StrSchema
                                                country_calling_code = schemas.StrSchema
                                                region_name = schemas.StrSchema
                                                city_name = schemas.StrSchema
                                                latitude = schemas.NumberSchema
                                                longitude = schemas.NumberSchema
                                                isp = schemas.StrSchema
                                                asn = schemas.StrSchema
                                                __annotations__ = {
                                                    "reverse_dns": reverse_dns,
                                                    "continent_code": continent_code,
                                                    "continent_name": continent_name,
                                                    "country_code": country_code,
                                                    "country_name": country_name,
                                                    "country_currency": country_currency,
                                                    "country_calling_code": country_calling_code,
                                                    "region_name": region_name,
                                                    "city_name": city_name,
                                                    "latitude": latitude,
                                                    "longitude": longitude,
                                                    "isp": isp,
                                                    "asn": asn,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reverse_dns"]) -> MetaOapg.properties.reverse_dns: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["continent_code"]) -> MetaOapg.properties.continent_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["continent_name"]) -> MetaOapg.properties.continent_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_currency"]) -> MetaOapg.properties.country_currency: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["country_calling_code"]) -> MetaOapg.properties.country_calling_code: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["region_name"]) -> MetaOapg.properties.region_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["city_name"]) -> MetaOapg.properties.city_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["isp"]) -> MetaOapg.properties.isp: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["asn"]) -> MetaOapg.properties.asn: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reverse_dns"]) -> typing.Union[MetaOapg.properties.reverse_dns, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["continent_code"]) -> typing.Union[MetaOapg.properties.continent_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["continent_name"]) -> typing.Union[MetaOapg.properties.continent_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_currency"]) -> typing.Union[MetaOapg.properties.country_currency, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["country_calling_code"]) -> typing.Union[MetaOapg.properties.country_calling_code, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["region_name"]) -> typing.Union[MetaOapg.properties.region_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["city_name"]) -> typing.Union[MetaOapg.properties.city_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["isp"]) -> typing.Union[MetaOapg.properties.isp, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["asn"]) -> typing.Union[MetaOapg.properties.asn, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            reverse_dns: typing.Union[MetaOapg.properties.reverse_dns, str, schemas.Unset] = schemas.unset,
                                            continent_code: typing.Union[MetaOapg.properties.continent_code, str, schemas.Unset] = schemas.unset,
                                            continent_name: typing.Union[MetaOapg.properties.continent_name, str, schemas.Unset] = schemas.unset,
                                            country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
                                            country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
                                            country_currency: typing.Union[MetaOapg.properties.country_currency, str, schemas.Unset] = schemas.unset,
                                            country_calling_code: typing.Union[MetaOapg.properties.country_calling_code, str, schemas.Unset] = schemas.unset,
                                            region_name: typing.Union[MetaOapg.properties.region_name, str, schemas.Unset] = schemas.unset,
                                            city_name: typing.Union[MetaOapg.properties.city_name, str, schemas.Unset] = schemas.unset,
                                            latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            isp: typing.Union[MetaOapg.properties.isp, str, schemas.Unset] = schemas.unset,
                                            asn: typing.Union[MetaOapg.properties.asn, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'ip_details':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                reverse_dns=reverse_dns,
                                                continent_code=continent_code,
                                                continent_name=continent_name,
                                                country_code=country_code,
                                                country_name=country_name,
                                                country_currency=country_currency,
                                                country_calling_code=country_calling_code,
                                                region_name=region_name,
                                                city_name=city_name,
                                                latitude=latitude,
                                                longitude=longitude,
                                                isp=isp,
                                                asn=asn,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    __annotations__ = {
                                        "ip": ip,
                                        "blacklists": blacklists,
                                        "anonymity": anonymity,
                                        "risk_score": risk_score,
                                        "ip_details": ip_details,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["blacklists"]) -> MetaOapg.properties.blacklists: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["anonymity"]) -> MetaOapg.properties.anonymity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["risk_score"]) -> MetaOapg.properties.risk_score: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ip_details"]) -> MetaOapg.properties.ip_details: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ip", "blacklists", "anonymity", "risk_score", "ip_details", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["blacklists"]) -> typing.Union[MetaOapg.properties.blacklists, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["anonymity"]) -> typing.Union[MetaOapg.properties.anonymity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["risk_score"]) -> typing.Union[MetaOapg.properties.risk_score, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ip_details"]) -> typing.Union[MetaOapg.properties.ip_details, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ip", "blacklists", "anonymity", "risk_score", "ip_details", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
                                blacklists: typing.Union[MetaOapg.properties.blacklists, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                anonymity: typing.Union[MetaOapg.properties.anonymity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                risk_score: typing.Union[MetaOapg.properties.risk_score, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                ip_details: typing.Union[MetaOapg.properties.ip_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'ip_check_result':
                                return super().__new__(
                                    cls,
                                    *args,
                                    ip=ip,
                                    blacklists=blacklists,
                                    anonymity=anonymity,
                                    risk_score=risk_score,
                                    ip_details=ip_details,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class email_check_result(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    email = schemas.StrSchema
                                    score = schemas.NumberSchema
                                    deliverable = schemas.BoolSchema
                                    
                                    
                                    class domain_details(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                domain = schemas.StrSchema
                                                tld = schemas.StrSchema
                                                registered = schemas.BoolSchema
                                                created = schemas.StrSchema
                                                updated = schemas.StrSchema
                                                expires = schemas.StrSchema
                                                registrar_name = schemas.StrSchema
                                                registered_to = schemas.StrSchema
                                                disposable = schemas.BoolSchema
                                                free = schemas.BoolSchema
                                                custom = schemas.BoolSchema
                                                dmarc_enforced = schemas.BoolSchema
                                                spf_strict = schemas.BoolSchema
                                                valid_mx = schemas.BoolSchema
                                                accept_all = schemas.BoolSchema
                                                suspicious_tld = schemas.BoolSchema
                                                website_exists = schemas.BoolSchema
                                                __annotations__ = {
                                                    "domain": domain,
                                                    "tld": tld,
                                                    "registered": registered,
                                                    "created": created,
                                                    "updated": updated,
                                                    "expires": expires,
                                                    "registrar_name": registrar_name,
                                                    "registered_to": registered_to,
                                                    "disposable": disposable,
                                                    "free": free,
                                                    "custom": custom,
                                                    "dmarc_enforced": dmarc_enforced,
                                                    "spf_strict": spf_strict,
                                                    "valid_mx": valid_mx,
                                                    "accept_all": accept_all,
                                                    "suspicious_tld": suspicious_tld,
                                                    "website_exists": website_exists,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["tld"]) -> MetaOapg.properties.tld: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["registered"]) -> MetaOapg.properties.registered: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["registrar_name"]) -> MetaOapg.properties.registrar_name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["registered_to"]) -> MetaOapg.properties.registered_to: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["free"]) -> MetaOapg.properties.free: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["dmarc_enforced"]) -> MetaOapg.properties.dmarc_enforced: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["spf_strict"]) -> MetaOapg.properties.spf_strict: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["valid_mx"]) -> MetaOapg.properties.valid_mx: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["accept_all"]) -> MetaOapg.properties.accept_all: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["suspicious_tld"]) -> MetaOapg.properties.suspicious_tld: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["website_exists"]) -> MetaOapg.properties.website_exists: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["tld"]) -> typing.Union[MetaOapg.properties.tld, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["registered"]) -> typing.Union[MetaOapg.properties.registered, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["registrar_name"]) -> typing.Union[MetaOapg.properties.registrar_name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["registered_to"]) -> typing.Union[MetaOapg.properties.registered_to, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["free"]) -> typing.Union[MetaOapg.properties.free, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["dmarc_enforced"]) -> typing.Union[MetaOapg.properties.dmarc_enforced, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["spf_strict"]) -> typing.Union[MetaOapg.properties.spf_strict, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["valid_mx"]) -> typing.Union[MetaOapg.properties.valid_mx, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["accept_all"]) -> typing.Union[MetaOapg.properties.accept_all, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["suspicious_tld"]) -> typing.Union[MetaOapg.properties.suspicious_tld, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["website_exists"]) -> typing.Union[MetaOapg.properties.website_exists, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
                                            tld: typing.Union[MetaOapg.properties.tld, str, schemas.Unset] = schemas.unset,
                                            registered: typing.Union[MetaOapg.properties.registered, bool, schemas.Unset] = schemas.unset,
                                            created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
                                            updated: typing.Union[MetaOapg.properties.updated, str, schemas.Unset] = schemas.unset,
                                            expires: typing.Union[MetaOapg.properties.expires, str, schemas.Unset] = schemas.unset,
                                            registrar_name: typing.Union[MetaOapg.properties.registrar_name, str, schemas.Unset] = schemas.unset,
                                            registered_to: typing.Union[MetaOapg.properties.registered_to, str, schemas.Unset] = schemas.unset,
                                            disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
                                            free: typing.Union[MetaOapg.properties.free, bool, schemas.Unset] = schemas.unset,
                                            custom: typing.Union[MetaOapg.properties.custom, bool, schemas.Unset] = schemas.unset,
                                            dmarc_enforced: typing.Union[MetaOapg.properties.dmarc_enforced, bool, schemas.Unset] = schemas.unset,
                                            spf_strict: typing.Union[MetaOapg.properties.spf_strict, bool, schemas.Unset] = schemas.unset,
                                            valid_mx: typing.Union[MetaOapg.properties.valid_mx, bool, schemas.Unset] = schemas.unset,
                                            accept_all: typing.Union[MetaOapg.properties.accept_all, bool, schemas.Unset] = schemas.unset,
                                            suspicious_tld: typing.Union[MetaOapg.properties.suspicious_tld, bool, schemas.Unset] = schemas.unset,
                                            website_exists: typing.Union[MetaOapg.properties.website_exists, bool, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'domain_details':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                domain=domain,
                                                tld=tld,
                                                registered=registered,
                                                created=created,
                                                updated=updated,
                                                expires=expires,
                                                registrar_name=registrar_name,
                                                registered_to=registered_to,
                                                disposable=disposable,
                                                free=free,
                                                custom=custom,
                                                dmarc_enforced=dmarc_enforced,
                                                spf_strict=spf_strict,
                                                valid_mx=valid_mx,
                                                accept_all=accept_all,
                                                suspicious_tld=suspicious_tld,
                                                website_exists=website_exists,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class breach_details(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                haveibeenpwned_listed = schemas.BoolSchema
                                                number_of_breaches = schemas.NumberSchema
                                                first_breach = schemas.StrSchema
                                                
                                                
                                                class breaches(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        
                                                        class items(
                                                            schemas.DictSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                class properties:
                                                                    name = schemas.StrSchema
                                                                    
                                                                    
                                                                    class domain(
                                                                        schemas.StrBase,
                                                                        schemas.NoneBase,
                                                                        schemas.Schema,
                                                                        schemas.NoneStrMixin
                                                                    ):
                                                                    
                                                                    
                                                                        def __new__(
                                                                            cls,
                                                                            *args: typing.Union[None, str, ],
                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        ) -> 'domain':
                                                                            return super().__new__(
                                                                                cls,
                                                                                *args,
                                                                                _configuration=_configuration,
                                                                            )
                                                                    date = schemas.StrSchema
                                                                    __annotations__ = {
                                                                        "name": name,
                                                                        "domain": domain,
                                                                        "date": date,
                                                                    }
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                                                            
                                                            @typing.overload
                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                            
                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "domain", "date", ], str]):
                                                                # dict_instance[name] accessor
                                                                return super().__getitem__(name)
                                                            
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                                                            
                                                            @typing.overload
                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                            
                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "domain", "date", ], str]):
                                                                return super().get_item_oapg(name)
                                                            
                                                        
                                                            def __new__(
                                                                cls,
                                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                                domain: typing.Union[MetaOapg.properties.domain, None, str, schemas.Unset] = schemas.unset,
                                                                date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'items':
                                                                return super().__new__(
                                                                    cls,
                                                                    *args,
                                                                    name=name,
                                                                    domain=domain,
                                                                    date=date,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'breaches':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                __annotations__ = {
                                                    "haveibeenpwned_listed": haveibeenpwned_listed,
                                                    "number_of_breaches": number_of_breaches,
                                                    "first_breach": first_breach,
                                                    "breaches": breaches,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["haveibeenpwned_listed"]) -> MetaOapg.properties.haveibeenpwned_listed: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["number_of_breaches"]) -> MetaOapg.properties.number_of_breaches: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["first_breach"]) -> MetaOapg.properties.first_breach: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["breaches"]) -> MetaOapg.properties.breaches: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["haveibeenpwned_listed", "number_of_breaches", "first_breach", "breaches", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["haveibeenpwned_listed"]) -> typing.Union[MetaOapg.properties.haveibeenpwned_listed, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["number_of_breaches"]) -> typing.Union[MetaOapg.properties.number_of_breaches, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["first_breach"]) -> typing.Union[MetaOapg.properties.first_breach, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["breaches"]) -> typing.Union[MetaOapg.properties.breaches, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["haveibeenpwned_listed", "number_of_breaches", "first_breach", "breaches", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            haveibeenpwned_listed: typing.Union[MetaOapg.properties.haveibeenpwned_listed, bool, schemas.Unset] = schemas.unset,
                                            number_of_breaches: typing.Union[MetaOapg.properties.number_of_breaches, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                            first_breach: typing.Union[MetaOapg.properties.first_breach, str, schemas.Unset] = schemas.unset,
                                            breaches: typing.Union[MetaOapg.properties.breaches, list, tuple, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'breach_details':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                haveibeenpwned_listed=haveibeenpwned_listed,
                                                number_of_breaches=number_of_breaches,
                                                first_breach=first_breach,
                                                breaches=breaches,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class account_details_registered(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'account_details_registered':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    __annotations__ = {
                                        "email": email,
                                        "score": score,
                                        "deliverable": deliverable,
                                        "domain_details": domain_details,
                                        "breach_details": breach_details,
                                        "account_details_registered": account_details_registered,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["deliverable"]) -> MetaOapg.properties.deliverable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["domain_details"]) -> MetaOapg.properties.domain_details: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["breach_details"]) -> MetaOapg.properties.breach_details: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["account_details_registered"]) -> MetaOapg.properties.account_details_registered: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "score", "deliverable", "domain_details", "breach_details", "account_details_registered", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["deliverable"]) -> typing.Union[MetaOapg.properties.deliverable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["domain_details"]) -> typing.Union[MetaOapg.properties.domain_details, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["breach_details"]) -> typing.Union[MetaOapg.properties.breach_details, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["account_details_registered"]) -> typing.Union[MetaOapg.properties.account_details_registered, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "score", "deliverable", "domain_details", "breach_details", "account_details_registered", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                deliverable: typing.Union[MetaOapg.properties.deliverable, bool, schemas.Unset] = schemas.unset,
                                domain_details: typing.Union[MetaOapg.properties.domain_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                breach_details: typing.Union[MetaOapg.properties.breach_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                account_details_registered: typing.Union[MetaOapg.properties.account_details_registered, list, tuple, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'email_check_result':
                                return super().__new__(
                                    cls,
                                    *args,
                                    email=email,
                                    score=score,
                                    deliverable=deliverable,
                                    domain_details=domain_details,
                                    breach_details=breach_details,
                                    account_details_registered=account_details_registered,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class phone_check_result(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    number = schemas.NumberSchema
                                    valid = schemas.BoolSchema
                                    disposable = schemas.BoolSchema
                                    type = schemas.StrSchema
                                    country = schemas.StrSchema
                                    carrier = schemas.StrSchema
                                    score = schemas.NumberSchema
                                    
                                    
                                    class account_details_registered(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'account_details_registered':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    __annotations__ = {
                                        "number": number,
                                        "valid": valid,
                                        "disposable": disposable,
                                        "type": type,
                                        "country": country,
                                        "carrier": carrier,
                                        "score": score,
                                        "account_details_registered": account_details_registered,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["account_details_registered"]) -> MetaOapg.properties.account_details_registered: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["number", "valid", "disposable", "type", "country", "carrier", "score", "account_details_registered", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> typing.Union[MetaOapg.properties.valid, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union[MetaOapg.properties.carrier, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["account_details_registered"]) -> typing.Union[MetaOapg.properties.account_details_registered, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["number", "valid", "disposable", "type", "country", "carrier", "score", "account_details_registered", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                valid: typing.Union[MetaOapg.properties.valid, bool, schemas.Unset] = schemas.unset,
                                disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
                                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                                carrier: typing.Union[MetaOapg.properties.carrier, str, schemas.Unset] = schemas.unset,
                                score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                account_details_registered: typing.Union[MetaOapg.properties.account_details_registered, list, tuple, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'phone_check_result':
                                return super().__new__(
                                    cls,
                                    *args,
                                    number=number,
                                    valid=valid,
                                    disposable=disposable,
                                    type=type,
                                    country=country,
                                    carrier=carrier,
                                    score=score,
                                    account_details_registered=account_details_registered,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        overall_risk_score = schemas.NumberSchema
                        __annotations__ = {
                            "aml_screening_result": aml_screening_result,
                            "ip_check_result": ip_check_result,
                            "email_check_result": email_check_result,
                            "phone_check_result": phone_check_result,
                            "overall_risk_score": overall_risk_score,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["aml_screening_result"]) -> MetaOapg.properties.aml_screening_result: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ip_check_result"]) -> MetaOapg.properties.ip_check_result: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_check_result"]) -> MetaOapg.properties.email_check_result: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["phone_check_result"]) -> MetaOapg.properties.phone_check_result: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["overall_risk_score"]) -> MetaOapg.properties.overall_risk_score: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["aml_screening_result", "ip_check_result", "email_check_result", "phone_check_result", "overall_risk_score", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["aml_screening_result"]) -> typing.Union[MetaOapg.properties.aml_screening_result, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ip_check_result"]) -> typing.Union[MetaOapg.properties.ip_check_result, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_check_result"]) -> typing.Union[MetaOapg.properties.email_check_result, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["phone_check_result"]) -> typing.Union[MetaOapg.properties.phone_check_result, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["overall_risk_score"]) -> typing.Union[MetaOapg.properties.overall_risk_score, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aml_screening_result", "ip_check_result", "email_check_result", "phone_check_result", "overall_risk_score", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    aml_screening_result: typing.Union[MetaOapg.properties.aml_screening_result, None, str, schemas.Unset] = schemas.unset,
                    ip_check_result: typing.Union[MetaOapg.properties.ip_check_result, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    email_check_result: typing.Union[MetaOapg.properties.email_check_result, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    phone_check_result: typing.Union[MetaOapg.properties.phone_check_result, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    overall_risk_score: typing.Union[MetaOapg.properties.overall_risk_score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        aml_screening_result=aml_screening_result,
                        ip_check_result=ip_check_result,
                        email_check_result=email_check_result,
                        phone_check_result=phone_check_result,
                        overall_risk_score=overall_risk_score,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudScreenUserResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
