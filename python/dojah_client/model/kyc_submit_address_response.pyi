# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class KycSubmitAddressResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        status = schemas.NumberSchema
                        reference_id = schemas.StrSchema
                        
                        
                        class data(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class applicant(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                firstname = schemas.StrSchema
                                                lastname = schemas.StrSchema
                                                phone = schemas.StrSchema
                                                middlename = schemas.StrSchema
                                                photo = schemas.StrSchema
                                                gender = schemas.StrSchema
                                                birthdate = schemas.StrSchema
                                                __annotations__ = {
                                                    "firstname": firstname,
                                                    "lastname": lastname,
                                                    "phone": phone,
                                                    "middlename": middlename,
                                                    "photo": photo,
                                                    "gender": gender,
                                                    "birthdate": birthdate,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["firstname"]) -> MetaOapg.properties.firstname: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["lastname"]) -> MetaOapg.properties.lastname: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["middlename"]) -> MetaOapg.properties.middlename: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["birthdate"]) -> MetaOapg.properties.birthdate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstname", "lastname", "phone", "middlename", "photo", "gender", "birthdate", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["firstname"]) -> typing.Union[MetaOapg.properties.firstname, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["lastname"]) -> typing.Union[MetaOapg.properties.lastname, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["middlename"]) -> typing.Union[MetaOapg.properties.middlename, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["photo"]) -> typing.Union[MetaOapg.properties.photo, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["birthdate"]) -> typing.Union[MetaOapg.properties.birthdate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstname", "lastname", "phone", "middlename", "photo", "gender", "birthdate", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            firstname: typing.Union[MetaOapg.properties.firstname, str, schemas.Unset] = schemas.unset,
                                            lastname: typing.Union[MetaOapg.properties.lastname, str, schemas.Unset] = schemas.unset,
                                            phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                                            middlename: typing.Union[MetaOapg.properties.middlename, str, schemas.Unset] = schemas.unset,
                                            photo: typing.Union[MetaOapg.properties.photo, str, schemas.Unset] = schemas.unset,
                                            gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
                                            birthdate: typing.Union[MetaOapg.properties.birthdate, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'applicant':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                firstname=firstname,
                                                lastname=lastname,
                                                phone=phone,
                                                middlename=middlename,
                                                photo=photo,
                                                gender=gender,
                                                birthdate=birthdate,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    lattitude = schemas.StrSchema
                                    longitude = schemas.StrSchema
                                    
                                    
                                    class photos(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'photos':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    
                                    
                                    class neighbor(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                name = schemas.StrSchema
                                                comment = schemas.StrSchema
                                                phone = schemas.StrSchema
                                                __annotations__ = {
                                                    "name": name,
                                                    "comment": comment,
                                                    "phone": phone,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "comment", "phone", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "comment", "phone", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                            comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                                            phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'neighbor':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                name=name,
                                                comment=comment,
                                                phone=phone,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    status = schemas.StrSchema
                                    city = schemas.StrSchema
                                    street = schemas.StrSchema
                                    lga = schemas.StrSchema
                                    state = schemas.StrSchema
                                    country = schemas.StrSchema
                                    __annotations__ = {
                                        "applicant": applicant,
                                        "lattitude": lattitude,
                                        "longitude": longitude,
                                        "photos": photos,
                                        "neighbor": neighbor,
                                        "status": status,
                                        "city": city,
                                        "street": street,
                                        "lga": lga,
                                        "state": state,
                                        "country": country,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["applicant"]) -> MetaOapg.properties.applicant: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lattitude"]) -> MetaOapg.properties.lattitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["photos"]) -> MetaOapg.properties.photos: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["neighbor"]) -> MetaOapg.properties.neighbor: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lga"]) -> MetaOapg.properties.lga: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["applicant", "lattitude", "longitude", "photos", "neighbor", "status", "city", "street", "lga", "state", "country", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["applicant"]) -> typing.Union[MetaOapg.properties.applicant, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lattitude"]) -> typing.Union[MetaOapg.properties.lattitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["photos"]) -> typing.Union[MetaOapg.properties.photos, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["neighbor"]) -> typing.Union[MetaOapg.properties.neighbor, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["street"]) -> typing.Union[MetaOapg.properties.street, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lga"]) -> typing.Union[MetaOapg.properties.lga, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applicant", "lattitude", "longitude", "photos", "neighbor", "status", "city", "street", "lga", "state", "country", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                applicant: typing.Union[MetaOapg.properties.applicant, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                lattitude: typing.Union[MetaOapg.properties.lattitude, str, schemas.Unset] = schemas.unset,
                                longitude: typing.Union[MetaOapg.properties.longitude, str, schemas.Unset] = schemas.unset,
                                photos: typing.Union[MetaOapg.properties.photos, list, tuple, schemas.Unset] = schemas.unset,
                                neighbor: typing.Union[MetaOapg.properties.neighbor, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                                street: typing.Union[MetaOapg.properties.street, str, schemas.Unset] = schemas.unset,
                                lga: typing.Union[MetaOapg.properties.lga, str, schemas.Unset] = schemas.unset,
                                state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                                country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'data':
                                return super().__new__(
                                    cls,
                                    *args,
                                    applicant=applicant,
                                    lattitude=lattitude,
                                    longitude=longitude,
                                    photos=photos,
                                    neighbor=neighbor,
                                    status=status,
                                    city=city,
                                    street=street,
                                    lga=lga,
                                    state=state,
                                    country=country,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "status": status,
                            "reference_id": reference_id,
                            "data": data,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reference_id"]) -> MetaOapg.properties.reference_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "reference_id", "data", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reference_id"]) -> typing.Union[MetaOapg.properties.reference_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "reference_id", "data", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    reference_id: typing.Union[MetaOapg.properties.reference_id, str, schemas.Unset] = schemas.unset,
                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        status=status,
                        reference_id=reference_id,
                        data=data,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'KycSubmitAddressResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
