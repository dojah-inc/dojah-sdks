/*
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.GetScreeningInfoResponse;
import com.konfigthis.dojah.client.model.ScreenAmlRequest;
import com.konfigthis.dojah.client.model.ScreenAmlResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AmlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AmlApi() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AmlApi(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApikeyAuth() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApikeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getScreeningInfoCall(String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/aml/screening/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScreeningInfoValidateBeforeCall(String referenceId, final ApiCallback _callback) throws ApiException {
        return getScreeningInfoCall(referenceId, _callback);

    }


    private ApiResponse<GetScreeningInfoResponse> getScreeningInfoWithHttpInfo(String referenceId) throws ApiException {
        okhttp3.Call localVarCall = getScreeningInfoValidateBeforeCall(referenceId, null);
        Type localVarReturnType = new TypeToken<GetScreeningInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScreeningInfoAsync(String referenceId, final ApiCallback<GetScreeningInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScreeningInfoValidateBeforeCall(referenceId, _callback);
        Type localVarReturnType = new TypeToken<GetScreeningInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScreeningInfoRequestBuilder {
        private String referenceId;

        private GetScreeningInfoRequestBuilder() {
        }

        /**
         * Set referenceId
         * @param referenceId  (optional)
         * @return GetScreeningInfoRequestBuilder
         */
        public GetScreeningInfoRequestBuilder referenceId(String referenceId) {
            this.referenceId = referenceId;
            return this;
        }
        
        /**
         * Build call for getScreeningInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScreeningInfoCall(referenceId, _callback);
        }


        /**
         * Execute getScreeningInfo request
         * @return GetScreeningInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public GetScreeningInfoResponse execute() throws ApiException {
            ApiResponse<GetScreeningInfoResponse> localVarResp = getScreeningInfoWithHttpInfo(referenceId);
            return localVarResp.getData();
        }

        /**
         * Execute getScreeningInfo request with HTTP info returned
         * @return ApiResponse&lt;GetScreeningInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetScreeningInfoResponse> executeWithHttpInfo() throws ApiException {
            return getScreeningInfoWithHttpInfo(referenceId);
        }

        /**
         * Execute getScreeningInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetScreeningInfoResponse> _callback) throws ApiException {
            return getScreeningInfoAsync(referenceId, _callback);
        }
    }

    /**
     * Get AML Info
     * 
     * @return GetScreeningInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetScreeningInfoRequestBuilder getScreeningInfo() throws IllegalArgumentException {
        return new GetScreeningInfoRequestBuilder();
    }
    private okhttp3.Call screenAmlCall(ScreenAmlRequest screenAmlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = screenAmlRequest;

        // create path and map variables
        String localVarPath = "/api/v1/aml/screening";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call screenAmlValidateBeforeCall(ScreenAmlRequest screenAmlRequest, final ApiCallback _callback) throws ApiException {
        return screenAmlCall(screenAmlRequest, _callback);

    }


    private ApiResponse<ScreenAmlResponse> screenAmlWithHttpInfo(ScreenAmlRequest screenAmlRequest) throws ApiException {
        okhttp3.Call localVarCall = screenAmlValidateBeforeCall(screenAmlRequest, null);
        Type localVarReturnType = new TypeToken<ScreenAmlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call screenAmlAsync(ScreenAmlRequest screenAmlRequest, final ApiCallback<ScreenAmlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = screenAmlValidateBeforeCall(screenAmlRequest, _callback);
        Type localVarReturnType = new TypeToken<ScreenAmlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ScreenAmlRequestBuilder {
        private String firstName;
        private String lastName;
        private String dateOfBirth;

        private ScreenAmlRequestBuilder() {
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return ScreenAmlRequestBuilder
         */
        public ScreenAmlRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return ScreenAmlRequestBuilder
         */
        public ScreenAmlRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return ScreenAmlRequestBuilder
         */
        public ScreenAmlRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Build call for screenAml
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScreenAmlRequest screenAmlRequest = buildBodyParams();
            return screenAmlCall(screenAmlRequest, _callback);
        }

        private ScreenAmlRequest buildBodyParams() {
            ScreenAmlRequest screenAmlRequest = new ScreenAmlRequest();
            screenAmlRequest.firstName(this.firstName);
            screenAmlRequest.lastName(this.lastName);
            screenAmlRequest.dateOfBirth(this.dateOfBirth);
            return screenAmlRequest;
        }

        /**
         * Execute screenAml request
         * @return ScreenAmlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public ScreenAmlResponse execute() throws ApiException {
            ScreenAmlRequest screenAmlRequest = buildBodyParams();
            ApiResponse<ScreenAmlResponse> localVarResp = screenAmlWithHttpInfo(screenAmlRequest);
            return localVarResp.getData();
        }

        /**
         * Execute screenAml request with HTTP info returned
         * @return ApiResponse&lt;ScreenAmlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ScreenAmlResponse> executeWithHttpInfo() throws ApiException {
            ScreenAmlRequest screenAmlRequest = buildBodyParams();
            return screenAmlWithHttpInfo(screenAmlRequest);
        }

        /**
         * Execute screenAml request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScreenAmlResponse> _callback) throws ApiException {
            ScreenAmlRequest screenAmlRequest = buildBodyParams();
            return screenAmlAsync(screenAmlRequest, _callback);
        }
    }

    /**
     * AML Screening
     * 
     * @return ScreenAmlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
     </table>
     */
    public ScreenAmlRequestBuilder screenAml() throws IllegalArgumentException {
        return new ScreenAmlRequestBuilder();
    }
}
