/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.ZwKycCheckCreditResponse;
import com.konfigthis.dojah.client.model.ZwKycVerifyIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ZwKycApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZwKycApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ZwKycApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApikeyAuth() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApikeyAuth(String).");
        }
        if (apiClient.getAppIdAuth() == null) {
            throw new IllegalArgumentException("\"AppId\" is required but no API key was provided. Please set \"AppId\" with ApiClient#setAppIdAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkCreditCall(String idNumber, String name, String surname, String gender, String dob, String maritalStatus, Integer mobileNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zw/kyc/fcb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id_number", idNumber));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gender", gender));
        }

        if (dob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dob", dob));
        }

        if (maritalStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marital_status", maritalStatus));
        }

        if (mobileNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile_number", mobileNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCreditValidateBeforeCall(String idNumber, String name, String surname, String gender, String dob, String maritalStatus, Integer mobileNumber, final ApiCallback _callback) throws ApiException {
        return checkCreditCall(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber, _callback);

    }


    private ApiResponse<ZwKycCheckCreditResponse> checkCreditWithHttpInfo(String idNumber, String name, String surname, String gender, String dob, String maritalStatus, Integer mobileNumber) throws ApiException {
        okhttp3.Call localVarCall = checkCreditValidateBeforeCall(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber, null);
        Type localVarReturnType = new TypeToken<ZwKycCheckCreditResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkCreditAsync(String idNumber, String name, String surname, String gender, String dob, String maritalStatus, Integer mobileNumber, final ApiCallback<ZwKycCheckCreditResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCreditValidateBeforeCall(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber, _callback);
        Type localVarReturnType = new TypeToken<ZwKycCheckCreditResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckCreditRequestBuilder {
        private String idNumber;
        private String name;
        private String surname;
        private String gender;
        private String dob;
        private String maritalStatus;
        private Integer mobileNumber;

        private CheckCreditRequestBuilder() {
        }

        /**
         * Set idNumber
         * @param idNumber  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder idNumber(String idNumber) {
            this.idNumber = idNumber;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set surname
         * @param surname  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder surname(String surname) {
            this.surname = surname;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set dob
         * @param dob  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set mobileNumber
         * @param mobileNumber  (optional)
         * @return CheckCreditRequestBuilder
         */
        public CheckCreditRequestBuilder mobileNumber(Integer mobileNumber) {
            this.mobileNumber = mobileNumber;
            return this;
        }
        
        /**
         * Build call for checkCredit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Strict-Transport-Security -  <br>  * X-Content-Type-Options -  <br>  * Server -  <br>  * CF-RAY -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkCreditCall(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber, _callback);
        }


        /**
         * Execute checkCredit request
         * @return ZwKycCheckCreditResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Strict-Transport-Security -  <br>  * X-Content-Type-Options -  <br>  * Server -  <br>  * CF-RAY -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public ZwKycCheckCreditResponse execute() throws ApiException {
            ApiResponse<ZwKycCheckCreditResponse> localVarResp = checkCreditWithHttpInfo(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkCredit request with HTTP info returned
         * @return ApiResponse&lt;ZwKycCheckCreditResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Strict-Transport-Security -  <br>  * X-Content-Type-Options -  <br>  * Server -  <br>  * CF-RAY -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ZwKycCheckCreditResponse> executeWithHttpInfo() throws ApiException {
            return checkCreditWithHttpInfo(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber);
        }

        /**
         * Execute checkCredit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Strict-Transport-Security -  <br>  * X-Content-Type-Options -  <br>  * Server -  <br>  * CF-RAY -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZwKycCheckCreditResponse> _callback) throws ApiException {
            return checkCreditAsync(idNumber, name, surname, gender, dob, maritalStatus, mobileNumber, _callback);
        }
    }

    /**
     * Credit Check
     * 
     * @return CheckCreditRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Strict-Transport-Security -  <br>  * X-Content-Type-Options -  <br>  * Server -  <br>  * CF-RAY -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public CheckCreditRequestBuilder checkCredit() throws IllegalArgumentException {
        return new CheckCreditRequestBuilder();
    }
    private okhttp3.Call verifyIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/zw/kyc/nin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return verifyIdCall(id, _callback);

    }


    private ApiResponse<ZwKycVerifyIdResponse> verifyIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = verifyIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ZwKycVerifyIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyIdAsync(String id, final ApiCallback<ZwKycVerifyIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ZwKycVerifyIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyIdRequestBuilder {
        private String id;

        private VerifyIdRequestBuilder() {
        }

        /**
         * Set id
         * @param id  (optional)
         * @return VerifyIdRequestBuilder
         */
        public VerifyIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for verifyId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyIdCall(id, _callback);
        }


        /**
         * Execute verifyId request
         * @return ZwKycVerifyIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public ZwKycVerifyIdResponse execute() throws ApiException {
            ApiResponse<ZwKycVerifyIdResponse> localVarResp = verifyIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyId request with HTTP info returned
         * @return ApiResponse&lt;ZwKycVerifyIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ZwKycVerifyIdResponse> executeWithHttpInfo() throws ApiException {
            return verifyIdWithHttpInfo(id);
        }

        /**
         * Execute verifyId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZwKycVerifyIdResponse> _callback) throws ApiException {
            return verifyIdAsync(id, _callback);
        }
    }

    /**
     * National ID Verification
     * 
     * @return VerifyIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * price -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Vary -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  </td></tr>
     </table>
     */
    public VerifyIdRequestBuilder verifyId() throws IllegalArgumentException {
        return new VerifyIdRequestBuilder();
    }
}
