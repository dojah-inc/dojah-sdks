/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.MlVerifyPhotoIdWithSelfieRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MlApi() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MlApi(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call verifyPhotoIdWithSelfieCall(MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mlVerifyPhotoIdWithSelfieRequest;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/photoid/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPhotoIdWithSelfieValidateBeforeCall(MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mlVerifyPhotoIdWithSelfieRequest' is set
        if (mlVerifyPhotoIdWithSelfieRequest == null) {
            throw new ApiException("Missing the required parameter 'mlVerifyPhotoIdWithSelfieRequest' when calling verifyPhotoIdWithSelfie(Async)");
        }

        return verifyPhotoIdWithSelfieCall(mlVerifyPhotoIdWithSelfieRequest, appId, _callback);

    }


    private ApiResponse<Object> verifyPhotoIdWithSelfieWithHttpInfo(MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest, String appId) throws ApiException {
        okhttp3.Call localVarCall = verifyPhotoIdWithSelfieValidateBeforeCall(mlVerifyPhotoIdWithSelfieRequest, appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyPhotoIdWithSelfieAsync(MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest, String appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPhotoIdWithSelfieValidateBeforeCall(mlVerifyPhotoIdWithSelfieRequest, appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyPhotoIdWithSelfieRequestBuilder {
        private String selfieImage;
        private String photoidImage;
        private String appId;

        private VerifyPhotoIdWithSelfieRequestBuilder() {
        }

        /**
         * Set selfieImage
         * @param selfieImage  (optional)
         * @return VerifyPhotoIdWithSelfieRequestBuilder
         */
        public VerifyPhotoIdWithSelfieRequestBuilder selfieImage(String selfieImage) {
            this.selfieImage = selfieImage;
            return this;
        }
        
        /**
         * Set photoidImage
         * @param photoidImage  (optional)
         * @return VerifyPhotoIdWithSelfieRequestBuilder
         */
        public VerifyPhotoIdWithSelfieRequestBuilder photoidImage(String photoidImage) {
            this.photoidImage = photoidImage;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return VerifyPhotoIdWithSelfieRequestBuilder
         */
        public VerifyPhotoIdWithSelfieRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for verifyPhotoIdWithSelfie
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest = buildBodyParams();
            return verifyPhotoIdWithSelfieCall(mlVerifyPhotoIdWithSelfieRequest, appId, _callback);
        }

        private MlVerifyPhotoIdWithSelfieRequest buildBodyParams() {
            MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest = new MlVerifyPhotoIdWithSelfieRequest();
            mlVerifyPhotoIdWithSelfieRequest.selfieImage(this.selfieImage);
            mlVerifyPhotoIdWithSelfieRequest.photoidImage(this.photoidImage);
            return mlVerifyPhotoIdWithSelfieRequest;
        }

        /**
         * Execute verifyPhotoIdWithSelfie request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = verifyPhotoIdWithSelfieWithHttpInfo(mlVerifyPhotoIdWithSelfieRequest, appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyPhotoIdWithSelfie request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest = buildBodyParams();
            return verifyPhotoIdWithSelfieWithHttpInfo(mlVerifyPhotoIdWithSelfieRequest, appId);
        }

        /**
         * Execute verifyPhotoIdWithSelfie request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            MlVerifyPhotoIdWithSelfieRequest mlVerifyPhotoIdWithSelfieRequest = buildBodyParams();
            return verifyPhotoIdWithSelfieAsync(mlVerifyPhotoIdWithSelfieRequest, appId, _callback);
        }
    }

    /**
     * KYC - Selfie Photo ID Verification
     * 
     * @param mlVerifyPhotoIdWithSelfieRequest  (required)
     * @return VerifyPhotoIdWithSelfieRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VerifyPhotoIdWithSelfieRequestBuilder verifyPhotoIdWithSelfie() throws IllegalArgumentException {
        return new VerifyPhotoIdWithSelfieRequestBuilder();
    }
}
