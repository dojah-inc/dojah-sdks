/*
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.GetDriversLicenseResponse;
import com.konfigthis.dojah.client.model.GetPassportResponse;
import com.konfigthis.dojah.client.model.GetSsnitResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GhKycApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GhKycApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GhKycApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDriversLicense
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDriversLicenseCall(String id, String fullName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/gh/kyc/dl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (fullName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full_name", fullName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDriversLicenseValidateBeforeCall(String id, String fullName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        return getDriversLicenseCall(id, fullName, dateOfBirth, _callback);

    }

    /**
     * Driver&#39;s License
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @return GetDriversLicenseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public GetDriversLicenseResponse getDriversLicense(String id, String fullName, String dateOfBirth) throws ApiException {
        ApiResponse<GetDriversLicenseResponse> localVarResp = getDriversLicenseWithHttpInfo(id, fullName, dateOfBirth);
        return localVarResp.getData();
    }

    /**
     * Driver&#39;s License
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @return ApiResponse&lt;GetDriversLicenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetDriversLicenseResponse> getDriversLicenseWithHttpInfo(String id, String fullName, String dateOfBirth) throws ApiException {
        okhttp3.Call localVarCall = getDriversLicenseValidateBeforeCall(id, fullName, dateOfBirth, null);
        Type localVarReturnType = new TypeToken<GetDriversLicenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Driver&#39;s License (asynchronously)
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDriversLicenseAsync(String id, String fullName, String dateOfBirth, final ApiCallback<GetDriversLicenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDriversLicenseValidateBeforeCall(id, fullName, dateOfBirth, _callback);
        Type localVarReturnType = new TypeToken<GetDriversLicenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPassport
     * @param id  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param middleName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPassportCall(String id, String firstName, String lastName, String middleName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/gh/kyc/passport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middle_name", middleName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPassportValidateBeforeCall(String id, String firstName, String lastName, String middleName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        return getPassportCall(id, firstName, lastName, middleName, dateOfBirth, _callback);

    }

    /**
     * Passport
     * 
     * @param id  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param middleName  (optional)
     * @param dateOfBirth  (optional)
     * @return GetPassportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public GetPassportResponse getPassport(String id, String firstName, String lastName, String middleName, String dateOfBirth) throws ApiException {
        ApiResponse<GetPassportResponse> localVarResp = getPassportWithHttpInfo(id, firstName, lastName, middleName, dateOfBirth);
        return localVarResp.getData();
    }

    /**
     * Passport
     * 
     * @param id  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param middleName  (optional)
     * @param dateOfBirth  (optional)
     * @return ApiResponse&lt;GetPassportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetPassportResponse> getPassportWithHttpInfo(String id, String firstName, String lastName, String middleName, String dateOfBirth) throws ApiException {
        okhttp3.Call localVarCall = getPassportValidateBeforeCall(id, firstName, lastName, middleName, dateOfBirth, null);
        Type localVarReturnType = new TypeToken<GetPassportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Passport (asynchronously)
     * 
     * @param id  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param middleName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Origin -  <br>  * x-moesif-transaction-id -  <br>  * service -  <br>  * product -  <br>  * Content-Type -  <br>  * ETag -  <br>  * Vary -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Connection -  <br>  * Keep-Alive -  <br>  * Transfer-Encoding -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPassportAsync(String id, String firstName, String lastName, String middleName, String dateOfBirth, final ApiCallback<GetPassportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPassportValidateBeforeCall(id, firstName, lastName, middleName, dateOfBirth, _callback);
        Type localVarReturnType = new TypeToken<GetPassportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSsnit
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSsnitCall(String id, String fullName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/gh/kyc/ssnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (fullName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full_name", fullName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth", "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSsnitValidateBeforeCall(String id, String fullName, String dateOfBirth, final ApiCallback _callback) throws ApiException {
        return getSsnitCall(id, fullName, dateOfBirth, _callback);

    }

    /**
     * SSNIT
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @return GetSsnitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSsnitResponse getSsnit(String id, String fullName, String dateOfBirth) throws ApiException {
        ApiResponse<GetSsnitResponse> localVarResp = getSsnitWithHttpInfo(id, fullName, dateOfBirth);
        return localVarResp.getData();
    }

    /**
     * SSNIT
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @return ApiResponse&lt;GetSsnitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSsnitResponse> getSsnitWithHttpInfo(String id, String fullName, String dateOfBirth) throws ApiException {
        okhttp3.Call localVarCall = getSsnitValidateBeforeCall(id, fullName, dateOfBirth, null);
        Type localVarReturnType = new TypeToken<GetSsnitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SSNIT (asynchronously)
     * 
     * @param id  (optional)
     * @param fullName  (optional)
     * @param dateOfBirth  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSsnitAsync(String id, String fullName, String dateOfBirth, final ApiCallback<GetSsnitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSsnitValidateBeforeCall(id, fullName, dateOfBirth, _callback);
        Type localVarReturnType = new TypeToken<GetSsnitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
