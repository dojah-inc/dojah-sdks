/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.KybGetCacResponse;
import com.konfigthis.dojah.client.model.KybGetTinResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KybApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KybApi() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KybApi(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call businessDetailCall(String appId, String internationalNumber, String countryCode, Boolean full, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyb/business/detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (internationalNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("international_number", internationalNumber));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDetailValidateBeforeCall(String appId, String internationalNumber, String countryCode, Boolean full, final ApiCallback _callback) throws ApiException {
        return businessDetailCall(appId, internationalNumber, countryCode, full, _callback);

    }


    private ApiResponse<Object> businessDetailWithHttpInfo(String appId, String internationalNumber, String countryCode, Boolean full) throws ApiException {
        okhttp3.Call localVarCall = businessDetailValidateBeforeCall(appId, internationalNumber, countryCode, full, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call businessDetailAsync(String appId, String internationalNumber, String countryCode, Boolean full, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDetailValidateBeforeCall(appId, internationalNumber, countryCode, full, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BusinessDetailRequestBuilder {
        private String appId;
        private String internationalNumber;
        private String countryCode;
        private Boolean full;

        private BusinessDetailRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return BusinessDetailRequestBuilder
         */
        public BusinessDetailRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set internationalNumber
         * @param internationalNumber  (optional)
         * @return BusinessDetailRequestBuilder
         */
        public BusinessDetailRequestBuilder internationalNumber(String internationalNumber) {
            this.internationalNumber = internationalNumber;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return BusinessDetailRequestBuilder
         */
        public BusinessDetailRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set full
         * @param full  (optional)
         * @return BusinessDetailRequestBuilder
         */
        public BusinessDetailRequestBuilder full(Boolean full) {
            this.full = full;
            return this;
        }
        
        /**
         * Build call for businessDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return businessDetailCall(appId, internationalNumber, countryCode, full, _callback);
        }


        /**
         * Execute businessDetail request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = businessDetailWithHttpInfo(appId, internationalNumber, countryCode, full);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute businessDetail request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return businessDetailWithHttpInfo(appId, internationalNumber, countryCode, full);
        }

        /**
         * Execute businessDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return businessDetailAsync(appId, internationalNumber, countryCode, full, _callback);
        }
    }

    /**
     * Business Detail
     * 
     * @return BusinessDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDetailRequestBuilder businessDetail() throws IllegalArgumentException {
        return new BusinessDetailRequestBuilder();
    }
    private okhttp3.Call businessSearchCall(String appId, String countryCode, Integer company, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyb/business/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (company != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company", company));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessSearchValidateBeforeCall(String appId, String countryCode, Integer company, final ApiCallback _callback) throws ApiException {
        return businessSearchCall(appId, countryCode, company, _callback);

    }


    private ApiResponse<Object> businessSearchWithHttpInfo(String appId, String countryCode, Integer company) throws ApiException {
        okhttp3.Call localVarCall = businessSearchValidateBeforeCall(appId, countryCode, company, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call businessSearchAsync(String appId, String countryCode, Integer company, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessSearchValidateBeforeCall(appId, countryCode, company, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BusinessSearchRequestBuilder {
        private String appId;
        private String countryCode;
        private Integer company;

        private BusinessSearchRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return BusinessSearchRequestBuilder
         */
        public BusinessSearchRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return BusinessSearchRequestBuilder
         */
        public BusinessSearchRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set company
         * @param company  (optional)
         * @return BusinessSearchRequestBuilder
         */
        public BusinessSearchRequestBuilder company(Integer company) {
            this.company = company;
            return this;
        }
        
        /**
         * Build call for businessSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return businessSearchCall(appId, countryCode, company, _callback);
        }


        /**
         * Execute businessSearch request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = businessSearchWithHttpInfo(appId, countryCode, company);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute businessSearch request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return businessSearchWithHttpInfo(appId, countryCode, company);
        }

        /**
         * Execute businessSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return businessSearchAsync(appId, countryCode, company, _callback);
        }
    }

    /**
     * Business Search
     * 
     * @return BusinessSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public BusinessSearchRequestBuilder businessSearch() throws IllegalArgumentException {
        return new BusinessSearchRequestBuilder();
    }
    private okhttp3.Call getCacCall(String appId, Integer rcNumber, String companyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/cac";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rcNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc_number", rcNumber));
        }

        if (companyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_name", companyName));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCacValidateBeforeCall(String appId, Integer rcNumber, String companyName, final ApiCallback _callback) throws ApiException {
        return getCacCall(appId, rcNumber, companyName, _callback);

    }


    private ApiResponse<KybGetCacResponse> getCacWithHttpInfo(String appId, Integer rcNumber, String companyName) throws ApiException {
        okhttp3.Call localVarCall = getCacValidateBeforeCall(appId, rcNumber, companyName, null);
        Type localVarReturnType = new TypeToken<KybGetCacResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCacAsync(String appId, Integer rcNumber, String companyName, final ApiCallback<KybGetCacResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCacValidateBeforeCall(appId, rcNumber, companyName, _callback);
        Type localVarReturnType = new TypeToken<KybGetCacResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCacRequestBuilder {
        private String appId;
        private Integer rcNumber;
        private String companyName;

        private GetCacRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetCacRequestBuilder
         */
        public GetCacRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set rcNumber
         * @param rcNumber  (optional)
         * @return GetCacRequestBuilder
         */
        public GetCacRequestBuilder rcNumber(Integer rcNumber) {
            this.rcNumber = rcNumber;
            return this;
        }
        
        /**
         * Set companyName
         * @param companyName  (optional)
         * @return GetCacRequestBuilder
         */
        public GetCacRequestBuilder companyName(String companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Build call for getCac
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCacCall(appId, rcNumber, companyName, _callback);
        }


        /**
         * Execute getCac request
         * @return KybGetCacResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public KybGetCacResponse execute() throws ApiException {
            ApiResponse<KybGetCacResponse> localVarResp = getCacWithHttpInfo(appId, rcNumber, companyName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCac request with HTTP info returned
         * @return ApiResponse&lt;KybGetCacResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<KybGetCacResponse> executeWithHttpInfo() throws ApiException {
            return getCacWithHttpInfo(appId, rcNumber, companyName);
        }

        /**
         * Execute getCac request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KybGetCacResponse> _callback) throws ApiException {
            return getCacAsync(appId, rcNumber, companyName, _callback);
        }
    }

    /**
     * KYC - Get CAC 
     * 
     * @return GetCacRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
     </table>
     */
    public GetCacRequestBuilder getCac() throws IllegalArgumentException {
        return new GetCacRequestBuilder();
    }
    private okhttp3.Call getTinCall(String appId, String tin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/tin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tin", tin));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTinValidateBeforeCall(String appId, String tin, final ApiCallback _callback) throws ApiException {
        return getTinCall(appId, tin, _callback);

    }


    private ApiResponse<KybGetTinResponse> getTinWithHttpInfo(String appId, String tin) throws ApiException {
        okhttp3.Call localVarCall = getTinValidateBeforeCall(appId, tin, null);
        Type localVarReturnType = new TypeToken<KybGetTinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTinAsync(String appId, String tin, final ApiCallback<KybGetTinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTinValidateBeforeCall(appId, tin, _callback);
        Type localVarReturnType = new TypeToken<KybGetTinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTinRequestBuilder {
        private String appId;
        private String tin;

        private GetTinRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetTinRequestBuilder
         */
        public GetTinRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set tin
         * @param tin  (optional)
         * @return GetTinRequestBuilder
         */
        public GetTinRequestBuilder tin(String tin) {
            this.tin = tin;
            return this;
        }
        
        /**
         * Build call for getTin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTinCall(appId, tin, _callback);
        }


        /**
         * Execute getTin request
         * @return KybGetTinResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public KybGetTinResponse execute() throws ApiException {
            ApiResponse<KybGetTinResponse> localVarResp = getTinWithHttpInfo(appId, tin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTin request with HTTP info returned
         * @return ApiResponse&lt;KybGetTinResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<KybGetTinResponse> executeWithHttpInfo() throws ApiException {
            return getTinWithHttpInfo(appId, tin);
        }

        /**
         * Execute getTin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KybGetTinResponse> _callback) throws ApiException {
            return getTinAsync(appId, tin, _callback);
        }
    }

    /**
     * KYC - Fetch Tin
     * 
     * @return GetTinRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
     </table>
     */
    public GetTinRequestBuilder getTin() throws IllegalArgumentException {
        return new GetTinRequestBuilder();
    }
}
