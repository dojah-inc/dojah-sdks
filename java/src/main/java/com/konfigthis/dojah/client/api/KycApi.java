/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.GetVinResponse;
import com.konfigthis.dojah.client.model.KycCheckLivenessRequest;
import com.konfigthis.dojah.client.model.KycSubmitAddressRequest;
import com.konfigthis.dojah.client.model.KycSubmitAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KycApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KycApi() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KycApi(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkLivenessCall(KycCheckLivenessRequest kycCheckLivenessRequest, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kycCheckLivenessRequest;

        // create path and map variables
        String localVarPath = "/api/v1/ml/liveness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkLivenessValidateBeforeCall(KycCheckLivenessRequest kycCheckLivenessRequest, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kycCheckLivenessRequest' is set
        if (kycCheckLivenessRequest == null) {
            throw new ApiException("Missing the required parameter 'kycCheckLivenessRequest' when calling checkLiveness(Async)");
        }

        return checkLivenessCall(kycCheckLivenessRequest, appId, _callback);

    }


    private ApiResponse<Object> checkLivenessWithHttpInfo(KycCheckLivenessRequest kycCheckLivenessRequest, String appId) throws ApiException {
        okhttp3.Call localVarCall = checkLivenessValidateBeforeCall(kycCheckLivenessRequest, appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkLivenessAsync(KycCheckLivenessRequest kycCheckLivenessRequest, String appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkLivenessValidateBeforeCall(kycCheckLivenessRequest, appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckLivenessRequestBuilder {
        private String image;
        private String appId;

        private CheckLivenessRequestBuilder() {
        }

        /**
         * Set image
         * @param image  (optional)
         * @return CheckLivenessRequestBuilder
         */
        public CheckLivenessRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return CheckLivenessRequestBuilder
         */
        public CheckLivenessRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for checkLiveness
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KycCheckLivenessRequest kycCheckLivenessRequest = buildBodyParams();
            return checkLivenessCall(kycCheckLivenessRequest, appId, _callback);
        }

        private KycCheckLivenessRequest buildBodyParams() {
            KycCheckLivenessRequest kycCheckLivenessRequest = new KycCheckLivenessRequest();
            kycCheckLivenessRequest.image(this.image);
            return kycCheckLivenessRequest;
        }

        /**
         * Execute checkLiveness request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KycCheckLivenessRequest kycCheckLivenessRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = checkLivenessWithHttpInfo(kycCheckLivenessRequest, appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkLiveness request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KycCheckLivenessRequest kycCheckLivenessRequest = buildBodyParams();
            return checkLivenessWithHttpInfo(kycCheckLivenessRequest, appId);
        }

        /**
         * Execute checkLiveness request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KycCheckLivenessRequest kycCheckLivenessRequest = buildBodyParams();
            return checkLivenessAsync(kycCheckLivenessRequest, appId, _callback);
        }
    }

    /**
     * Liveness Check
     * 
     * @param kycCheckLivenessRequest  (required)
     * @return CheckLivenessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CheckLivenessRequestBuilder checkLiveness() throws IllegalArgumentException {
        return new CheckLivenessRequestBuilder();
    }
    private okhttp3.Call getAccountsCall(String appId, String bvn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bvn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bvn", bvn));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(String appId, String bvn, final ApiCallback _callback) throws ApiException {
        return getAccountsCall(appId, bvn, _callback);

    }


    private ApiResponse<Object> getAccountsWithHttpInfo(String appId, String bvn) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(appId, bvn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountsAsync(String appId, String bvn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(appId, bvn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountsRequestBuilder {
        private String appId;
        private String bvn;

        private GetAccountsRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set bvn
         * @param bvn  (optional)
         * @return GetAccountsRequestBuilder
         */
        public GetAccountsRequestBuilder bvn(String bvn) {
            this.bvn = bvn;
            return this;
        }
        
        /**
         * Build call for getAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountsCall(appId, bvn, _callback);
        }


        /**
         * Execute getAccounts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAccountsWithHttpInfo(appId, bvn);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccounts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAccountsWithHttpInfo(appId, bvn);
        }

        /**
         * Execute getAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAccountsAsync(appId, bvn, _callback);
        }
    }

    /**
     * KYC - Fetch Accounts 
     * 
     * @return GetAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountsRequestBuilder getAccounts() throws IllegalArgumentException {
        return new GetAccountsRequestBuilder();
    }
    private okhttp3.Call getAddressVerificationCall(String appId, String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressVerificationValidateBeforeCall(String appId, String referenceId, final ApiCallback _callback) throws ApiException {
        return getAddressVerificationCall(appId, referenceId, _callback);

    }


    private ApiResponse<Object> getAddressVerificationWithHttpInfo(String appId, String referenceId) throws ApiException {
        okhttp3.Call localVarCall = getAddressVerificationValidateBeforeCall(appId, referenceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressVerificationAsync(String appId, String referenceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressVerificationValidateBeforeCall(appId, referenceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAddressVerificationRequestBuilder {
        private String appId;
        private String referenceId;

        private GetAddressVerificationRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetAddressVerificationRequestBuilder
         */
        public GetAddressVerificationRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set referenceId
         * @param referenceId  (optional)
         * @return GetAddressVerificationRequestBuilder
         */
        public GetAddressVerificationRequestBuilder referenceId(String referenceId) {
            this.referenceId = referenceId;
            return this;
        }
        
        /**
         * Build call for getAddressVerification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressVerificationCall(appId, referenceId, _callback);
        }


        /**
         * Execute getAddressVerification request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAddressVerificationWithHttpInfo(appId, referenceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAddressVerification request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAddressVerificationWithHttpInfo(appId, referenceId);
        }

        /**
         * Execute getAddressVerification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAddressVerificationAsync(appId, referenceId, _callback);
        }
    }

    /**
     * Fetch Address Verification Data
     * 
     * @return GetAddressVerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressVerificationRequestBuilder getAddressVerification() throws IllegalArgumentException {
        return new GetAddressVerificationRequestBuilder();
    }
    private okhttp3.Call getBvnFromNubanCall(String appId, Integer bankCode, Integer accountNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/nuban/bvn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bankCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bank_code", bankCode));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_number", accountNumber));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBvnFromNubanValidateBeforeCall(String appId, Integer bankCode, Integer accountNumber, final ApiCallback _callback) throws ApiException {
        return getBvnFromNubanCall(appId, bankCode, accountNumber, _callback);

    }


    private ApiResponse<Object> getBvnFromNubanWithHttpInfo(String appId, Integer bankCode, Integer accountNumber) throws ApiException {
        okhttp3.Call localVarCall = getBvnFromNubanValidateBeforeCall(appId, bankCode, accountNumber, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBvnFromNubanAsync(String appId, Integer bankCode, Integer accountNumber, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBvnFromNubanValidateBeforeCall(appId, bankCode, accountNumber, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBvnFromNubanRequestBuilder {
        private String appId;
        private Integer bankCode;
        private Integer accountNumber;

        private GetBvnFromNubanRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetBvnFromNubanRequestBuilder
         */
        public GetBvnFromNubanRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set bankCode
         * @param bankCode  (optional)
         * @return GetBvnFromNubanRequestBuilder
         */
        public GetBvnFromNubanRequestBuilder bankCode(Integer bankCode) {
            this.bankCode = bankCode;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber  (optional)
         * @return GetBvnFromNubanRequestBuilder
         */
        public GetBvnFromNubanRequestBuilder accountNumber(Integer accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Build call for getBvnFromNuban
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBvnFromNubanCall(appId, bankCode, accountNumber, _callback);
        }


        /**
         * Execute getBvnFromNuban request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getBvnFromNubanWithHttpInfo(appId, bankCode, accountNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBvnFromNuban request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getBvnFromNubanWithHttpInfo(appId, bankCode, accountNumber);
        }

        /**
         * Execute getBvnFromNuban request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getBvnFromNubanAsync(appId, bankCode, accountNumber, _callback);
        }
    }

    /**
     * Lookup BVN from NUBAN
     * 
     * @return GetBvnFromNubanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetBvnFromNubanRequestBuilder getBvnFromNuban() throws IllegalArgumentException {
        return new GetBvnFromNubanRequestBuilder();
    }
    private okhttp3.Call getVinCall(String appId, String vin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/vin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "noauthAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVinValidateBeforeCall(String appId, String vin, final ApiCallback _callback) throws ApiException {
        return getVinCall(appId, vin, _callback);

    }


    private ApiResponse<GetVinResponse> getVinWithHttpInfo(String appId, String vin) throws ApiException {
        okhttp3.Call localVarCall = getVinValidateBeforeCall(appId, vin, null);
        Type localVarReturnType = new TypeToken<GetVinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVinAsync(String appId, String vin, final ApiCallback<GetVinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVinValidateBeforeCall(appId, vin, _callback);
        Type localVarReturnType = new TypeToken<GetVinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVinRequestBuilder {
        private String appId;
        private String vin;

        private GetVinRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return GetVinRequestBuilder
         */
        public GetVinRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set vin
         * @param vin  (optional)
         * @return GetVinRequestBuilder
         */
        public GetVinRequestBuilder vin(String vin) {
            this.vin = vin;
            return this;
        }
        
        /**
         * Build call for getVin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * ETag -  <br>  * CF-Cache-Status -  <br>  * cf-request-id -  <br>  * Expect-CT -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVinCall(appId, vin, _callback);
        }


        /**
         * Execute getVin request
         * @return GetVinResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * ETag -  <br>  * CF-Cache-Status -  <br>  * cf-request-id -  <br>  * Expect-CT -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public GetVinResponse execute() throws ApiException {
            ApiResponse<GetVinResponse> localVarResp = getVinWithHttpInfo(appId, vin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVin request with HTTP info returned
         * @return ApiResponse&lt;GetVinResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * ETag -  <br>  * CF-Cache-Status -  <br>  * cf-request-id -  <br>  * Expect-CT -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<GetVinResponse> executeWithHttpInfo() throws ApiException {
            return getVinWithHttpInfo(appId, vin);
        }

        /**
         * Execute getVin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * ETag -  <br>  * CF-Cache-Status -  <br>  * cf-request-id -  <br>  * Expect-CT -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetVinResponse> _callback) throws ApiException {
            return getVinAsync(appId, vin, _callback);
        }
    }

    /**
     * KYC - Get VIN
     * 
     * @return GetVinRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * ETag -  <br>  * CF-Cache-Status -  <br>  * cf-request-id -  <br>  * Expect-CT -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public GetVinRequestBuilder getVin() throws IllegalArgumentException {
        return new GetVinRequestBuilder();
    }
    private okhttp3.Call submitAddressCall(String appId, KycSubmitAddressRequest kycSubmitAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kycSubmitAddressRequest;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitAddressValidateBeforeCall(String appId, KycSubmitAddressRequest kycSubmitAddressRequest, final ApiCallback _callback) throws ApiException {
        return submitAddressCall(appId, kycSubmitAddressRequest, _callback);

    }


    private ApiResponse<KycSubmitAddressResponse> submitAddressWithHttpInfo(String appId, KycSubmitAddressRequest kycSubmitAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = submitAddressValidateBeforeCall(appId, kycSubmitAddressRequest, null);
        Type localVarReturnType = new TypeToken<KycSubmitAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitAddressAsync(String appId, KycSubmitAddressRequest kycSubmitAddressRequest, final ApiCallback<KycSubmitAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitAddressValidateBeforeCall(appId, kycSubmitAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<KycSubmitAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitAddressRequestBuilder {
        private String street;
        private String lga;
        private String state;
        private String landmark;
        private String firstName;
        private String lastName;
        private String middleName;
        private String dob;
        private String gender;
        private String mobile;
        private String appId;

        private SubmitAddressRequestBuilder() {
        }

        /**
         * Set street
         * @param street  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder street(String street) {
            this.street = street;
            return this;
        }
        
        /**
         * Set lga
         * @param lga  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder lga(String lga) {
            this.lga = lga;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set landmark
         * @param landmark  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder landmark(String landmark) {
            this.landmark = landmark;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set dob
         * @param dob  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set mobile
         * @param mobile  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder mobile(String mobile) {
            this.mobile = mobile;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return SubmitAddressRequestBuilder
         */
        public SubmitAddressRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for submitAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * ETag -  <br>  * Vary -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KycSubmitAddressRequest kycSubmitAddressRequest = buildBodyParams();
            return submitAddressCall(appId, kycSubmitAddressRequest, _callback);
        }

        private KycSubmitAddressRequest buildBodyParams() {
            KycSubmitAddressRequest kycSubmitAddressRequest = new KycSubmitAddressRequest();
            kycSubmitAddressRequest.street(this.street);
            kycSubmitAddressRequest.lga(this.lga);
            kycSubmitAddressRequest.state(this.state);
            kycSubmitAddressRequest.landmark(this.landmark);
            kycSubmitAddressRequest.firstName(this.firstName);
            kycSubmitAddressRequest.lastName(this.lastName);
            kycSubmitAddressRequest.middleName(this.middleName);
            kycSubmitAddressRequest.dob(this.dob);
            kycSubmitAddressRequest.gender(this.gender);
            kycSubmitAddressRequest.mobile(this.mobile);
            return kycSubmitAddressRequest;
        }

        /**
         * Execute submitAddress request
         * @return KycSubmitAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * ETag -  <br>  * Vary -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public KycSubmitAddressResponse execute() throws ApiException {
            KycSubmitAddressRequest kycSubmitAddressRequest = buildBodyParams();
            ApiResponse<KycSubmitAddressResponse> localVarResp = submitAddressWithHttpInfo(appId, kycSubmitAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitAddress request with HTTP info returned
         * @return ApiResponse&lt;KycSubmitAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * ETag -  <br>  * Vary -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<KycSubmitAddressResponse> executeWithHttpInfo() throws ApiException {
            KycSubmitAddressRequest kycSubmitAddressRequest = buildBodyParams();
            return submitAddressWithHttpInfo(appId, kycSubmitAddressRequest);
        }

        /**
         * Execute submitAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * ETag -  <br>  * Vary -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KycSubmitAddressResponse> _callback) throws ApiException {
            KycSubmitAddressRequest kycSubmitAddressRequest = buildBodyParams();
            return submitAddressAsync(appId, kycSubmitAddressRequest, _callback);
        }
    }

    /**
     * Submit Address
     * 
     * @return SubmitAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Date -  <br>  * Transfer-Encoding -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  * uuid -  <br>  * x-moesif-transaction-id -  <br>  * RateLimit-Limit -  <br>  * RateLimit-Remaining -  <br>  * RateLimit-Reset -  <br>  * service -  <br>  * product -  <br>  * ETag -  <br>  * Vary -  <br>  * CF-Cache-Status -  <br>  * Report-To -  <br>  * NEL -  <br>  * Server -  <br>  * CF-RAY -  <br>  * Content-Encoding -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public SubmitAddressRequestBuilder submitAddress() throws IllegalArgumentException {
        return new SubmitAddressRequestBuilder();
    }
}
