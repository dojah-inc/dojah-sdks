/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GlobalKycApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalKycApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalKycApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAppIdAuth() == null) {
            throw new IllegalArgumentException("\"Appid\" is required but no API key was provided. Please set \"Appid\" with ApiClient#setAppIdAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call caEkycCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ca/kyc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (streetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street_name", streetName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        if (houseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house_number", houseNumber));
        }

        if (postCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_code", postCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call caEkycValidateBeforeCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        return caEkycCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);

    }


    private ApiResponse<Object> caEkycWithHttpInfo(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode) throws ApiException {
        okhttp3.Call localVarCall = caEkycValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call caEkycAsync(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = caEkycValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CaEkycRequestBuilder {
        private String country;
        private String firstName;
        private String lastName;
        private String streetName;
        private String dateOfBirth;
        private Integer houseNumber;
        private Integer postCode;

        private CaEkycRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set streetName
         * @param streetName  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder streetName(String streetName) {
            this.streetName = streetName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set houseNumber
         * @param houseNumber  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder houseNumber(Integer houseNumber) {
            this.houseNumber = houseNumber;
            return this;
        }
        
        /**
         * Set postCode
         * @param postCode  (optional)
         * @return CaEkycRequestBuilder
         */
        public CaEkycRequestBuilder postCode(Integer postCode) {
            this.postCode = postCode;
            return this;
        }
        
        /**
         * Build call for caEkyc
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return caEkycCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }


        /**
         * Execute caEkyc request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = caEkycWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute caEkyc request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return caEkycWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
        }

        /**
         * Execute caEkyc request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return caEkycAsync(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }
    }

    /**
     * Canada Ekyc
     * 
     * @return CaEkycRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CaEkycRequestBuilder caEkyc() throws IllegalArgumentException {
        return new CaEkycRequestBuilder();
    }
    private okhttp3.Call getUsSsnCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/us/kyc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (streetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street_name", streetName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        if (houseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house_number", houseNumber));
        }

        if (postCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_code", postCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsSsnValidateBeforeCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        return getUsSsnCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);

    }


    private ApiResponse<Object> getUsSsnWithHttpInfo(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode) throws ApiException {
        okhttp3.Call localVarCall = getUsSsnValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUsSsnAsync(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsSsnValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUsSsnRequestBuilder {
        private String country;
        private String firstName;
        private String lastName;
        private String streetName;
        private String dateOfBirth;
        private Integer houseNumber;
        private Integer postCode;

        private GetUsSsnRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set streetName
         * @param streetName  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder streetName(String streetName) {
            this.streetName = streetName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set houseNumber
         * @param houseNumber  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder houseNumber(Integer houseNumber) {
            this.houseNumber = houseNumber;
            return this;
        }
        
        /**
         * Set postCode
         * @param postCode  (optional)
         * @return GetUsSsnRequestBuilder
         */
        public GetUsSsnRequestBuilder postCode(Integer postCode) {
            this.postCode = postCode;
            return this;
        }
        
        /**
         * Build call for getUsSsn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUsSsnCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }


        /**
         * Execute getUsSsn request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUsSsnWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUsSsn request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUsSsnWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
        }

        /**
         * Execute getUsSsn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUsSsnAsync(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }
    }

    /**
     * US SSN
     * 
     * @return GetUsSsnRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetUsSsnRequestBuilder getUsSsn() throws IllegalArgumentException {
        return new GetUsSsnRequestBuilder();
    }
    private okhttp3.Call ukTwoPlusTwoCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/uk/kyc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (streetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street_name", streetName));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_of_birth", dateOfBirth));
        }

        if (houseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("house_number", houseNumber));
        }

        if (postCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_code", postCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appIdAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ukTwoPlusTwoValidateBeforeCall(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback _callback) throws ApiException {
        return ukTwoPlusTwoCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);

    }


    private ApiResponse<Object> ukTwoPlusTwoWithHttpInfo(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode) throws ApiException {
        okhttp3.Call localVarCall = ukTwoPlusTwoValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ukTwoPlusTwoAsync(String country, String firstName, String lastName, String streetName, String dateOfBirth, Integer houseNumber, Integer postCode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ukTwoPlusTwoValidateBeforeCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UkTwoPlusTwoRequestBuilder {
        private String country;
        private String firstName;
        private String lastName;
        private String streetName;
        private String dateOfBirth;
        private Integer houseNumber;
        private Integer postCode;

        private UkTwoPlusTwoRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set streetName
         * @param streetName  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder streetName(String streetName) {
            this.streetName = streetName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set houseNumber
         * @param houseNumber  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder houseNumber(Integer houseNumber) {
            this.houseNumber = houseNumber;
            return this;
        }
        
        /**
         * Set postCode
         * @param postCode  (optional)
         * @return UkTwoPlusTwoRequestBuilder
         */
        public UkTwoPlusTwoRequestBuilder postCode(Integer postCode) {
            this.postCode = postCode;
            return this;
        }
        
        /**
         * Build call for ukTwoPlusTwo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return ukTwoPlusTwoCall(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }


        /**
         * Execute ukTwoPlusTwo request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = ukTwoPlusTwoWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute ukTwoPlusTwo request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return ukTwoPlusTwoWithHttpInfo(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode);
        }

        /**
         * Execute ukTwoPlusTwo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return ukTwoPlusTwoAsync(country, firstName, lastName, streetName, dateOfBirth, houseNumber, postCode, _callback);
        }
    }

    /**
     * UK 2+2
     * 
     * @return UkTwoPlusTwoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UkTwoPlusTwoRequestBuilder ukTwoPlusTwo() throws IllegalArgumentException {
        return new UkTwoPlusTwoRequestBuilder();
    }
}
