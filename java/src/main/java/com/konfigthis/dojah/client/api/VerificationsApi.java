/*
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.dojah.client.api;

import com.konfigthis.dojah.client.ApiCallback;
import com.konfigthis.dojah.client.ApiClient;
import com.konfigthis.dojah.client.ApiException;
import com.konfigthis.dojah.client.ApiResponse;
import com.konfigthis.dojah.client.Configuration;
import com.konfigthis.dojah.client.Pair;
import com.konfigthis.dojah.client.ProgressRequestBody;
import com.konfigthis.dojah.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.dojah.client.model.VerificationsVerifySelfieNinRequest;
import com.konfigthis.dojah.client.model.VerificationsVerifySelfieVninRequest;
import com.konfigthis.dojah.client.model.VerifyAgeResponse;
import com.konfigthis.dojah.client.model.VerifySelfieBvnRequest;
import com.konfigthis.dojah.client.model.VerifySelfieBvnResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VerificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerificationsApi() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VerificationsApi(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call validateBvnCall(String appId, Integer bvn, String firstName, String dob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/kyc/bvn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bvn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bvn", bvn));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (dob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dob", dob));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateBvnValidateBeforeCall(String appId, Integer bvn, String firstName, String dob, final ApiCallback _callback) throws ApiException {
        return validateBvnCall(appId, bvn, firstName, dob, _callback);

    }


    private ApiResponse<Object> validateBvnWithHttpInfo(String appId, Integer bvn, String firstName, String dob) throws ApiException {
        okhttp3.Call localVarCall = validateBvnValidateBeforeCall(appId, bvn, firstName, dob, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateBvnAsync(String appId, Integer bvn, String firstName, String dob, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateBvnValidateBeforeCall(appId, bvn, firstName, dob, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateBvnRequestBuilder {
        private String appId;
        private Integer bvn;
        private String firstName;
        private String dob;

        private ValidateBvnRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return ValidateBvnRequestBuilder
         */
        public ValidateBvnRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set bvn
         * @param bvn  (optional)
         * @return ValidateBvnRequestBuilder
         */
        public ValidateBvnRequestBuilder bvn(Integer bvn) {
            this.bvn = bvn;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return ValidateBvnRequestBuilder
         */
        public ValidateBvnRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set dob
         * @param dob  (optional)
         * @return ValidateBvnRequestBuilder
         */
        public ValidateBvnRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Build call for validateBvn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateBvnCall(appId, bvn, firstName, dob, _callback);
        }


        /**
         * Execute validateBvn request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = validateBvnWithHttpInfo(appId, bvn, firstName, dob);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateBvn request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return validateBvnWithHttpInfo(appId, bvn, firstName, dob);
        }

        /**
         * Execute validateBvn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return validateBvnAsync(appId, bvn, firstName, dob, _callback);
        }
    }

    /**
     * KYC - Validate BVN
     * 
     * @return ValidateBvnRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ValidateBvnRequestBuilder validateBvn() throws IllegalArgumentException {
        return new ValidateBvnRequestBuilder();
    }
    private okhttp3.Call verifyAgeCall(String appId, String mode, Integer accountNumber, Integer bankCode, String dob, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/kyc/age_verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_number", accountNumber));
        }

        if (bankCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bank_code", bankCode));
        }

        if (dob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dob", dob));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAgeValidateBeforeCall(String appId, String mode, Integer accountNumber, Integer bankCode, String dob, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        return verifyAgeCall(appId, mode, accountNumber, bankCode, dob, firstName, lastName, _callback);

    }


    private ApiResponse<VerifyAgeResponse> verifyAgeWithHttpInfo(String appId, String mode, Integer accountNumber, Integer bankCode, String dob, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = verifyAgeValidateBeforeCall(appId, mode, accountNumber, bankCode, dob, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<VerifyAgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyAgeAsync(String appId, String mode, Integer accountNumber, Integer bankCode, String dob, String firstName, String lastName, final ApiCallback<VerifyAgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAgeValidateBeforeCall(appId, mode, accountNumber, bankCode, dob, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<VerifyAgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyAgeRequestBuilder {
        private String appId;
        private String mode;
        private Integer accountNumber;
        private Integer bankCode;
        private String dob;
        private String firstName;
        private String lastName;

        private VerifyAgeRequestBuilder() {
        }

        /**
         * Set appId
         * @param appId  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set mode
         * @param mode  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder accountNumber(Integer accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set bankCode
         * @param bankCode  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder bankCode(Integer bankCode) {
            this.bankCode = bankCode;
            return this;
        }
        
        /**
         * Set dob
         * @param dob  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder dob(String dob) {
            this.dob = dob;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return VerifyAgeRequestBuilder
         */
        public VerifyAgeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Build call for verifyAge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyAgeCall(appId, mode, accountNumber, bankCode, dob, firstName, lastName, _callback);
        }


        /**
         * Execute verifyAge request
         * @return VerifyAgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public VerifyAgeResponse execute() throws ApiException {
            ApiResponse<VerifyAgeResponse> localVarResp = verifyAgeWithHttpInfo(appId, mode, accountNumber, bankCode, dob, firstName, lastName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyAge request with HTTP info returned
         * @return ApiResponse&lt;VerifyAgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<VerifyAgeResponse> executeWithHttpInfo() throws ApiException {
            return verifyAgeWithHttpInfo(appId, mode, accountNumber, bankCode, dob, firstName, lastName);
        }

        /**
         * Execute verifyAge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifyAgeResponse> _callback) throws ApiException {
            return verifyAgeAsync(appId, mode, accountNumber, bankCode, dob, firstName, lastName, _callback);
        }
    }

    /**
     * KYC - Age Verification
     * 
     * @return VerifyAgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Powered-By -  <br>  * Access-Control-Allow-Origin -  <br>  * Content-Length -  <br>  * ETag -  <br>  * Date -  <br>  * Connection -  <br>  </td></tr>
     </table>
     */
    public VerifyAgeRequestBuilder verifyAge() throws IllegalArgumentException {
        return new VerifyAgeRequestBuilder();
    }
    private okhttp3.Call verifySelfieBvnCall(VerifySelfieBvnRequest verifySelfieBvnRequest, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifySelfieBvnRequest;

        // create path and map variables
        String localVarPath = "/v1/kyc/bvn/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySelfieBvnValidateBeforeCall(VerifySelfieBvnRequest verifySelfieBvnRequest, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifySelfieBvnRequest' is set
        if (verifySelfieBvnRequest == null) {
            throw new ApiException("Missing the required parameter 'verifySelfieBvnRequest' when calling verifySelfieBvn(Async)");
        }

        return verifySelfieBvnCall(verifySelfieBvnRequest, appId, _callback);

    }


    private ApiResponse<VerifySelfieBvnResponse> verifySelfieBvnWithHttpInfo(VerifySelfieBvnRequest verifySelfieBvnRequest, String appId) throws ApiException {
        okhttp3.Call localVarCall = verifySelfieBvnValidateBeforeCall(verifySelfieBvnRequest, appId, null);
        Type localVarReturnType = new TypeToken<VerifySelfieBvnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifySelfieBvnAsync(VerifySelfieBvnRequest verifySelfieBvnRequest, String appId, final ApiCallback<VerifySelfieBvnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySelfieBvnValidateBeforeCall(verifySelfieBvnRequest, appId, _callback);
        Type localVarReturnType = new TypeToken<VerifySelfieBvnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifySelfieBvnRequestBuilder {
        private String bvn;
        private String selfieImage;
        private String appId;

        private VerifySelfieBvnRequestBuilder() {
        }

        /**
         * Set bvn
         * @param bvn  (optional)
         * @return VerifySelfieBvnRequestBuilder
         */
        public VerifySelfieBvnRequestBuilder bvn(String bvn) {
            this.bvn = bvn;
            return this;
        }
        
        /**
         * Set selfieImage
         * @param selfieImage  (optional)
         * @return VerifySelfieBvnRequestBuilder
         */
        public VerifySelfieBvnRequestBuilder selfieImage(String selfieImage) {
            this.selfieImage = selfieImage;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return VerifySelfieBvnRequestBuilder
         */
        public VerifySelfieBvnRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for verifySelfieBvn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerifySelfieBvnRequest verifySelfieBvnRequest = buildBodyParams();
            return verifySelfieBvnCall(verifySelfieBvnRequest, appId, _callback);
        }

        private VerifySelfieBvnRequest buildBodyParams() {
            VerifySelfieBvnRequest verifySelfieBvnRequest = new VerifySelfieBvnRequest();
            verifySelfieBvnRequest.bvn(this.bvn);
            verifySelfieBvnRequest.selfieImage(this.selfieImage);
            return verifySelfieBvnRequest;
        }

        /**
         * Execute verifySelfieBvn request
         * @return VerifySelfieBvnResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public VerifySelfieBvnResponse execute() throws ApiException {
            VerifySelfieBvnRequest verifySelfieBvnRequest = buildBodyParams();
            ApiResponse<VerifySelfieBvnResponse> localVarResp = verifySelfieBvnWithHttpInfo(verifySelfieBvnRequest, appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifySelfieBvn request with HTTP info returned
         * @return ApiResponse&lt;VerifySelfieBvnResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifySelfieBvnResponse> executeWithHttpInfo() throws ApiException {
            VerifySelfieBvnRequest verifySelfieBvnRequest = buildBodyParams();
            return verifySelfieBvnWithHttpInfo(verifySelfieBvnRequest, appId);
        }

        /**
         * Execute verifySelfieBvn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifySelfieBvnResponse> _callback) throws ApiException {
            VerifySelfieBvnRequest verifySelfieBvnRequest = buildBodyParams();
            return verifySelfieBvnAsync(verifySelfieBvnRequest, appId, _callback);
        }
    }

    /**
     * KYV - Selfie BVN Verificatoin
     * 
     * @param verifySelfieBvnRequest  (required)
     * @return VerifySelfieBvnRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VerifySelfieBvnRequestBuilder verifySelfieBvn() throws IllegalArgumentException {
        return new VerifySelfieBvnRequestBuilder();
    }
    private okhttp3.Call verifySelfieNinCall(VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verificationsVerifySelfieNinRequest;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/nin/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySelfieNinValidateBeforeCall(VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationsVerifySelfieNinRequest' is set
        if (verificationsVerifySelfieNinRequest == null) {
            throw new ApiException("Missing the required parameter 'verificationsVerifySelfieNinRequest' when calling verifySelfieNin(Async)");
        }

        return verifySelfieNinCall(verificationsVerifySelfieNinRequest, appId, _callback);

    }


    private ApiResponse<Object> verifySelfieNinWithHttpInfo(VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest, String appId) throws ApiException {
        okhttp3.Call localVarCall = verifySelfieNinValidateBeforeCall(verificationsVerifySelfieNinRequest, appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifySelfieNinAsync(VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest, String appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySelfieNinValidateBeforeCall(verificationsVerifySelfieNinRequest, appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifySelfieNinRequestBuilder {
        private String nin;
        private String selfieImage;
        private String appId;

        private VerifySelfieNinRequestBuilder() {
        }

        /**
         * Set nin
         * @param nin  (optional)
         * @return VerifySelfieNinRequestBuilder
         */
        public VerifySelfieNinRequestBuilder nin(String nin) {
            this.nin = nin;
            return this;
        }
        
        /**
         * Set selfieImage
         * @param selfieImage  (optional)
         * @return VerifySelfieNinRequestBuilder
         */
        public VerifySelfieNinRequestBuilder selfieImage(String selfieImage) {
            this.selfieImage = selfieImage;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return VerifySelfieNinRequestBuilder
         */
        public VerifySelfieNinRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for verifySelfieNin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest = buildBodyParams();
            return verifySelfieNinCall(verificationsVerifySelfieNinRequest, appId, _callback);
        }

        private VerificationsVerifySelfieNinRequest buildBodyParams() {
            VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest = new VerificationsVerifySelfieNinRequest();
            verificationsVerifySelfieNinRequest.nin(this.nin);
            verificationsVerifySelfieNinRequest.selfieImage(this.selfieImage);
            return verificationsVerifySelfieNinRequest;
        }

        /**
         * Execute verifySelfieNin request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = verifySelfieNinWithHttpInfo(verificationsVerifySelfieNinRequest, appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifySelfieNin request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest = buildBodyParams();
            return verifySelfieNinWithHttpInfo(verificationsVerifySelfieNinRequest, appId);
        }

        /**
         * Execute verifySelfieNin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            VerificationsVerifySelfieNinRequest verificationsVerifySelfieNinRequest = buildBodyParams();
            return verifySelfieNinAsync(verificationsVerifySelfieNinRequest, appId, _callback);
        }
    }

    /**
     * KYC - Selfie NIN Verification
     * 
     * @param verificationsVerifySelfieNinRequest  (required)
     * @return VerifySelfieNinRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VerifySelfieNinRequestBuilder verifySelfieNin() throws IllegalArgumentException {
        return new VerifySelfieNinRequestBuilder();
    }
    private okhttp3.Call verifySelfieVninCall(VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verificationsVerifySelfieVninRequest;

        // create path and map variables
        String localVarPath = "/api/v1/kyc/vnin/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("AppId", localVarApiClient.parameterToString(appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySelfieVninValidateBeforeCall(VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationsVerifySelfieVninRequest' is set
        if (verificationsVerifySelfieVninRequest == null) {
            throw new ApiException("Missing the required parameter 'verificationsVerifySelfieVninRequest' when calling verifySelfieVnin(Async)");
        }

        return verifySelfieVninCall(verificationsVerifySelfieVninRequest, appId, _callback);

    }


    private ApiResponse<Object> verifySelfieVninWithHttpInfo(VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest, String appId) throws ApiException {
        okhttp3.Call localVarCall = verifySelfieVninValidateBeforeCall(verificationsVerifySelfieVninRequest, appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifySelfieVninAsync(VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest, String appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySelfieVninValidateBeforeCall(verificationsVerifySelfieVninRequest, appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifySelfieVninRequestBuilder {
        private String vnin;
        private String selfieImage;
        private String appId;

        private VerifySelfieVninRequestBuilder() {
        }

        /**
         * Set vnin
         * @param vnin  (optional)
         * @return VerifySelfieVninRequestBuilder
         */
        public VerifySelfieVninRequestBuilder vnin(String vnin) {
            this.vnin = vnin;
            return this;
        }
        
        /**
         * Set selfieImage
         * @param selfieImage  (optional)
         * @return VerifySelfieVninRequestBuilder
         */
        public VerifySelfieVninRequestBuilder selfieImage(String selfieImage) {
            this.selfieImage = selfieImage;
            return this;
        }
        
        /**
         * Set appId
         * @param appId  (optional)
         * @return VerifySelfieVninRequestBuilder
         */
        public VerifySelfieVninRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for verifySelfieVnin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest = buildBodyParams();
            return verifySelfieVninCall(verificationsVerifySelfieVninRequest, appId, _callback);
        }

        private VerificationsVerifySelfieVninRequest buildBodyParams() {
            VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest = new VerificationsVerifySelfieVninRequest();
            verificationsVerifySelfieVninRequest.vnin(this.vnin);
            verificationsVerifySelfieVninRequest.selfieImage(this.selfieImage);
            return verificationsVerifySelfieVninRequest;
        }

        /**
         * Execute verifySelfieVnin request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = verifySelfieVninWithHttpInfo(verificationsVerifySelfieVninRequest, appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifySelfieVnin request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest = buildBodyParams();
            return verifySelfieVninWithHttpInfo(verificationsVerifySelfieVninRequest, appId);
        }

        /**
         * Execute verifySelfieVnin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            VerificationsVerifySelfieVninRequest verificationsVerifySelfieVninRequest = buildBodyParams();
            return verifySelfieVninAsync(verificationsVerifySelfieVninRequest, appId, _callback);
        }
    }

    /**
     * KYC - Selfie vNIN verification
     * 
     * @param verificationsVerifySelfieVninRequest  (required)
     * @return VerifySelfieVninRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VerifySelfieVninRequestBuilder verifySelfieVnin() throws IllegalArgumentException {
        return new VerifySelfieVninRequestBuilder();
    }
}
