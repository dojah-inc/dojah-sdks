/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// AnalyzeDocumentResponseEntityStatus
    /// </summary>
    [DataContract(Name = "AnalyzeDocumentResponse_entity_status")]
    public partial class AnalyzeDocumentResponseEntityStatus : IEquatable<AnalyzeDocumentResponseEntityStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeDocumentResponseEntityStatus" /> class.
        /// </summary>
        /// <param name="overallStatus">overallStatus.</param>
        /// <param name="documentImages">documentImages.</param>
        /// <param name="text">text.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="expiry">expiry.</param>
        public AnalyzeDocumentResponseEntityStatus(decimal overallStatus = default(decimal), string documentImages = default(string), string text = default(string), string documentType = default(string), string expiry = default(string))
        {
            this.OverallStatus = overallStatus;
            this.DocumentImages = documentImages;
            this.Text = text;
            this.DocumentType = documentType;
            this.Expiry = expiry;
        }

        /// <summary>
        /// Gets or Sets OverallStatus
        /// </summary>
        [DataMember(Name = "overall_status", EmitDefaultValue = false)]
        public decimal OverallStatus { get; set; }

        /// <summary>
        /// Gets or Sets DocumentImages
        /// </summary>
        [DataMember(Name = "document_images", EmitDefaultValue = false)]
        public string DocumentImages { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "document_type", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public string Expiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyzeDocumentResponseEntityStatus {\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  DocumentImages: ").Append(DocumentImages).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyzeDocumentResponseEntityStatus);
        }

        /// <summary>
        /// Returns true if AnalyzeDocumentResponseEntityStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyzeDocumentResponseEntityStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyzeDocumentResponseEntityStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OverallStatus == input.OverallStatus ||
                    this.OverallStatus.Equals(input.OverallStatus)
                ) && 
                (
                    this.DocumentImages == input.DocumentImages ||
                    (this.DocumentImages != null &&
                    this.DocumentImages.Equals(input.DocumentImages))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OverallStatus.GetHashCode();
                if (this.DocumentImages != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentImages.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.Expiry != null)
                {
                    hashCode = (hashCode * 59) + this.Expiry.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
