/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// KycSubmitAddressResponseEntityData
    /// </summary>
    [DataContract(Name = "KycSubmitAddressResponse_entity_data")]
    public partial class KycSubmitAddressResponseEntityData : IEquatable<KycSubmitAddressResponseEntityData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycSubmitAddressResponseEntityData" /> class.
        /// </summary>
        /// <param name="applicant">applicant.</param>
        /// <param name="lattitude">lattitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="photos">photos.</param>
        /// <param name="neighbor">neighbor.</param>
        /// <param name="status">status.</param>
        /// <param name="city">city.</param>
        /// <param name="street">street.</param>
        /// <param name="lga">lga.</param>
        /// <param name="state">state.</param>
        /// <param name="country">country.</param>
        public KycSubmitAddressResponseEntityData(KycSubmitAddressResponseEntityDataApplicant applicant = default(KycSubmitAddressResponseEntityDataApplicant), string lattitude = default(string), string longitude = default(string), List<string> photos = default(List<string>), KycSubmitAddressResponseEntityDataNeighbor neighbor = default(KycSubmitAddressResponseEntityDataNeighbor), string status = default(string), string city = default(string), string street = default(string), string lga = default(string), string state = default(string), string country = default(string))
        {
            this.Applicant = applicant;
            this.Lattitude = lattitude;
            this.Longitude = longitude;
            this.Photos = photos;
            this.Neighbor = neighbor;
            this.Status = status;
            this.City = city;
            this.Street = street;
            this.Lga = lga;
            this.State = state;
            this.Country = country;
        }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name = "applicant", EmitDefaultValue = false)]
        public KycSubmitAddressResponseEntityDataApplicant Applicant { get; set; }

        /// <summary>
        /// Gets or Sets Lattitude
        /// </summary>
        [DataMember(Name = "lattitude", EmitDefaultValue = false)]
        public string Lattitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public string Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>
        [DataMember(Name = "photos", EmitDefaultValue = false)]
        public List<string> Photos { get; set; }

        /// <summary>
        /// Gets or Sets Neighbor
        /// </summary>
        [DataMember(Name = "neighbor", EmitDefaultValue = false)]
        public KycSubmitAddressResponseEntityDataNeighbor Neighbor { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Lga
        /// </summary>
        [DataMember(Name = "lga", EmitDefaultValue = false)]
        public string Lga { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KycSubmitAddressResponseEntityData {\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("  Lattitude: ").Append(Lattitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Neighbor: ").Append(Neighbor).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Lga: ").Append(Lga).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycSubmitAddressResponseEntityData);
        }

        /// <summary>
        /// Returns true if KycSubmitAddressResponseEntityData instances are equal
        /// </summary>
        /// <param name="input">Instance of KycSubmitAddressResponseEntityData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycSubmitAddressResponseEntityData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Applicant == input.Applicant ||
                    (this.Applicant != null &&
                    this.Applicant.Equals(input.Applicant))
                ) && 
                (
                    this.Lattitude == input.Lattitude ||
                    (this.Lattitude != null &&
                    this.Lattitude.Equals(input.Lattitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Photos == input.Photos ||
                    this.Photos != null &&
                    input.Photos != null &&
                    this.Photos.SequenceEqual(input.Photos)
                ) && 
                (
                    this.Neighbor == input.Neighbor ||
                    (this.Neighbor != null &&
                    this.Neighbor.Equals(input.Neighbor))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Lga == input.Lga ||
                    (this.Lga != null &&
                    this.Lga.Equals(input.Lga))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applicant != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant.GetHashCode();
                }
                if (this.Lattitude != null)
                {
                    hashCode = (hashCode * 59) + this.Lattitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Photos != null)
                {
                    hashCode = (hashCode * 59) + this.Photos.GetHashCode();
                }
                if (this.Neighbor != null)
                {
                    hashCode = (hashCode * 59) + this.Neighbor.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.Lga != null)
                {
                    hashCode = (hashCode * 59) + this.Lga.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
