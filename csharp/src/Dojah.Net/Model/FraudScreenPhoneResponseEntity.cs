/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// FraudScreenPhoneResponseEntity
    /// </summary>
    [DataContract(Name = "FraudScreenPhoneResponse_entity")]
    public partial class FraudScreenPhoneResponseEntity : IEquatable<FraudScreenPhoneResponseEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudScreenPhoneResponseEntity" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="valid">valid.</param>
        /// <param name="disposable">disposable.</param>
        /// <param name="type">type.</param>
        /// <param name="country">country.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="score">score.</param>
        /// <param name="accountDetailsRegistered">accountDetailsRegistered.</param>
        public FraudScreenPhoneResponseEntity(decimal number = default(decimal), bool valid = default(bool), bool disposable = default(bool), string type = default(string), string country = default(string), string carrier = default(string), decimal score = default(decimal), List<string> accountDetailsRegistered = default(List<string>))
        {
            this.Number = number;
            this.Valid = valid;
            this.Disposable = disposable;
            this.Type = type;
            this.Country = country;
            this.Carrier = carrier;
            this.Score = score;
            this.AccountDetailsRegistered = accountDetailsRegistered;
        }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public decimal Number { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "valid", EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Disposable
        /// </summary>
        [DataMember(Name = "disposable", EmitDefaultValue = true)]
        public bool Disposable { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public decimal Score { get; set; }

        /// <summary>
        /// Gets or Sets AccountDetailsRegistered
        /// </summary>
        [DataMember(Name = "account_details_registered", EmitDefaultValue = false)]
        public List<string> AccountDetailsRegistered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FraudScreenPhoneResponseEntity {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Disposable: ").Append(Disposable).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  AccountDetailsRegistered: ").Append(AccountDetailsRegistered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudScreenPhoneResponseEntity);
        }

        /// <summary>
        /// Returns true if FraudScreenPhoneResponseEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudScreenPhoneResponseEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudScreenPhoneResponseEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Valid == input.Valid ||
                    this.Valid.Equals(input.Valid)
                ) && 
                (
                    this.Disposable == input.Disposable ||
                    this.Disposable.Equals(input.Disposable)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.AccountDetailsRegistered == input.AccountDetailsRegistered ||
                    this.AccountDetailsRegistered != null &&
                    input.AccountDetailsRegistered != null &&
                    this.AccountDetailsRegistered.SequenceEqual(input.AccountDetailsRegistered)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.Valid.GetHashCode();
                hashCode = (hashCode * 59) + this.Disposable.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Carrier != null)
                {
                    hashCode = (hashCode * 59) + this.Carrier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.AccountDetailsRegistered != null)
                {
                    hashCode = (hashCode * 59) + this.AccountDetailsRegistered.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
