/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// AnalyzeDocumentResponseEntity
    /// </summary>
    [DataContract(Name = "AnalyzeDocumentResponse_entity")]
    public partial class AnalyzeDocumentResponseEntity : IEquatable<AnalyzeDocumentResponseEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeDocumentResponseEntity" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="documentImages">documentImages.</param>
        /// <param name="textData">textData.</param>
        public AnalyzeDocumentResponseEntity(AnalyzeDocumentResponseEntityStatus status = default(AnalyzeDocumentResponseEntityStatus), AnalyzeDocumentResponseEntityDocumentType documentType = default(AnalyzeDocumentResponseEntityDocumentType), AnalyzeDocumentResponseEntityDocumentImages documentImages = default(AnalyzeDocumentResponseEntityDocumentImages), List<AnalyzeDocumentResponseEntityTextDataInner> textData = default(List<AnalyzeDocumentResponseEntityTextDataInner>))
        {
            this.Status = status;
            this.DocumentType = documentType;
            this.DocumentImages = documentImages;
            this.TextData = textData;
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AnalyzeDocumentResponseEntityStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "document_type", EmitDefaultValue = false)]
        public AnalyzeDocumentResponseEntityDocumentType DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentImages
        /// </summary>
        [DataMember(Name = "document_images", EmitDefaultValue = false)]
        public AnalyzeDocumentResponseEntityDocumentImages DocumentImages { get; set; }

        /// <summary>
        /// Gets or Sets TextData
        /// </summary>
        [DataMember(Name = "text_data", EmitDefaultValue = false)]
        public List<AnalyzeDocumentResponseEntityTextDataInner> TextData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyzeDocumentResponseEntity {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentImages: ").Append(DocumentImages).Append("\n");
            sb.Append("  TextData: ").Append(TextData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyzeDocumentResponseEntity);
        }

        /// <summary>
        /// Returns true if AnalyzeDocumentResponseEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyzeDocumentResponseEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyzeDocumentResponseEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DocumentImages == input.DocumentImages ||
                    (this.DocumentImages != null &&
                    this.DocumentImages.Equals(input.DocumentImages))
                ) && 
                (
                    this.TextData == input.TextData ||
                    this.TextData != null &&
                    input.TextData != null &&
                    this.TextData.SequenceEqual(input.TextData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.DocumentType != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentType.GetHashCode();
                }
                if (this.DocumentImages != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentImages.GetHashCode();
                }
                if (this.TextData != null)
                {
                    hashCode = (hashCode * 59) + this.TextData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
