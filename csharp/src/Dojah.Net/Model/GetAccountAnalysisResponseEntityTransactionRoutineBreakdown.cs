/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
    /// </summary>
    [DataContract(Name = "GetAccountAnalysisResponse_entity_transactionRoutineBreakdown")]
    public partial class GetAccountAnalysisResponseEntityTransactionRoutineBreakdown : IEquatable<GetAccountAnalysisResponseEntityTransactionRoutineBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountAnalysisResponseEntityTransactionRoutineBreakdown" /> class.
        /// </summary>
        /// <param name="maximumExpense">maximumExpense.</param>
        /// <param name="lastCreditReceived">lastCreditReceived.</param>
        /// <param name="lastDebitMade">lastDebitMade.</param>
        /// <param name="mostFrequentBalanceRange">mostFrequentBalanceRange.</param>
        /// <param name="mostFrequentTransactionRange">mostFrequentTransactionRange.</param>
        /// <param name="numberOfCardRequests">numberOfCardRequests.</param>
        /// <param name="percentNumberOfDaysBalanceWasLessThan10ThousandNaira">percentNumberOfDaysBalanceWasLessThan10ThousandNaira.</param>
        /// <param name="percentNumberOfDaysTransactionsWasLessThan10ThousandNaira">percentNumberOfDaysTransactionsWasLessThan10ThousandNaira.</param>
        /// <param name="percentOfBalancesBetween100ThousandTo500ThousandNaira">percentOfBalancesBetween100ThousandTo500ThousandNaira.</param>
        /// <param name="percentOfBalancesBetween10ThousandTo100ThousandNaira">percentOfBalancesBetween10ThousandTo100ThousandNaira.</param>
        /// <param name="percentOfBalancesBetween500ThousandToOneMillionNaira">percentOfBalancesBetween500ThousandToOneMillionNaira.</param>
        /// <param name="percentOfBalancesGreaterThanOneMillionNaira">percentOfBalancesGreaterThanOneMillionNaira.</param>
        /// <param name="percentOfBalancesLessThan10ThousandNaira">percentOfBalancesLessThan10ThousandNaira.</param>
        /// <param name="percentOfTransactionsBetween100ThousandTo500ThousandNaira">percentOfTransactionsBetween100ThousandTo500ThousandNaira.</param>
        /// <param name="percentOfTransactionsBetween10ThousandTo100ThousandNaira">percentOfTransactionsBetween10ThousandTo100ThousandNaira.</param>
        /// <param name="percentOfTransactionsBetween500ThousandToOneMillionNaira">percentOfTransactionsBetween500ThousandToOneMillionNaira.</param>
        /// <param name="percentOfTransactionsGreaterThanOneMillionNaira">percentOfTransactionsGreaterThanOneMillionNaira.</param>
        /// <param name="percentOfTransactionsLessThan10ThousandNaira">percentOfTransactionsLessThan10ThousandNaira.</param>
        /// <param name="percentofCreditTransactions">percentofCreditTransactions.</param>
        /// <param name="percentofDebitTransactions">percentofDebitTransactions.</param>
        /// <param name="totalAmountOfTransactions">totalAmountOfTransactions.</param>
        public GetAccountAnalysisResponseEntityTransactionRoutineBreakdown(decimal maximumExpense = default(decimal), string lastCreditReceived = default(string), string lastDebitMade = default(string), string mostFrequentBalanceRange = default(string), string mostFrequentTransactionRange = default(string), decimal numberOfCardRequests = default(decimal), decimal percentNumberOfDaysBalanceWasLessThan10ThousandNaira = default(decimal), decimal percentNumberOfDaysTransactionsWasLessThan10ThousandNaira = default(decimal), decimal percentOfBalancesBetween100ThousandTo500ThousandNaira = default(decimal), decimal percentOfBalancesBetween10ThousandTo100ThousandNaira = default(decimal), decimal percentOfBalancesBetween500ThousandToOneMillionNaira = default(decimal), decimal percentOfBalancesGreaterThanOneMillionNaira = default(decimal), decimal percentOfBalancesLessThan10ThousandNaira = default(decimal), decimal percentOfTransactionsBetween100ThousandTo500ThousandNaira = default(decimal), decimal percentOfTransactionsBetween10ThousandTo100ThousandNaira = default(decimal), decimal percentOfTransactionsBetween500ThousandToOneMillionNaira = default(decimal), decimal percentOfTransactionsGreaterThanOneMillionNaira = default(decimal), decimal percentOfTransactionsLessThan10ThousandNaira = default(decimal), decimal percentofCreditTransactions = default(decimal), decimal percentofDebitTransactions = default(decimal), decimal totalAmountOfTransactions = default(decimal))
        {
            this.MaximumExpense = maximumExpense;
            this.LastCreditReceived = lastCreditReceived;
            this.LastDebitMade = lastDebitMade;
            this.MostFrequentBalanceRange = mostFrequentBalanceRange;
            this.MostFrequentTransactionRange = mostFrequentTransactionRange;
            this.NumberOfCardRequests = numberOfCardRequests;
            this.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira = percentNumberOfDaysBalanceWasLessThan10ThousandNaira;
            this.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira = percentNumberOfDaysTransactionsWasLessThan10ThousandNaira;
            this.PercentOfBalancesBetween100ThousandTo500ThousandNaira = percentOfBalancesBetween100ThousandTo500ThousandNaira;
            this.PercentOfBalancesBetween10ThousandTo100ThousandNaira = percentOfBalancesBetween10ThousandTo100ThousandNaira;
            this.PercentOfBalancesBetween500ThousandToOneMillionNaira = percentOfBalancesBetween500ThousandToOneMillionNaira;
            this.PercentOfBalancesGreaterThanOneMillionNaira = percentOfBalancesGreaterThanOneMillionNaira;
            this.PercentOfBalancesLessThan10ThousandNaira = percentOfBalancesLessThan10ThousandNaira;
            this.PercentOfTransactionsBetween100ThousandTo500ThousandNaira = percentOfTransactionsBetween100ThousandTo500ThousandNaira;
            this.PercentOfTransactionsBetween10ThousandTo100ThousandNaira = percentOfTransactionsBetween10ThousandTo100ThousandNaira;
            this.PercentOfTransactionsBetween500ThousandToOneMillionNaira = percentOfTransactionsBetween500ThousandToOneMillionNaira;
            this.PercentOfTransactionsGreaterThanOneMillionNaira = percentOfTransactionsGreaterThanOneMillionNaira;
            this.PercentOfTransactionsLessThan10ThousandNaira = percentOfTransactionsLessThan10ThousandNaira;
            this.PercentofCreditTransactions = percentofCreditTransactions;
            this.PercentofDebitTransactions = percentofDebitTransactions;
            this.TotalAmountOfTransactions = totalAmountOfTransactions;
        }

        /// <summary>
        /// Gets or Sets MaximumExpense
        /// </summary>
        [DataMember(Name = "MaximumExpense", EmitDefaultValue = false)]
        public decimal MaximumExpense { get; set; }

        /// <summary>
        /// Gets or Sets LastCreditReceived
        /// </summary>
        [DataMember(Name = "lastCreditReceived", EmitDefaultValue = false)]
        public string LastCreditReceived { get; set; }

        /// <summary>
        /// Gets or Sets LastDebitMade
        /// </summary>
        [DataMember(Name = "lastDebitMade", EmitDefaultValue = false)]
        public string LastDebitMade { get; set; }

        /// <summary>
        /// Gets or Sets MostFrequentBalanceRange
        /// </summary>
        [DataMember(Name = "mostFrequentBalanceRange", EmitDefaultValue = false)]
        public string MostFrequentBalanceRange { get; set; }

        /// <summary>
        /// Gets or Sets MostFrequentTransactionRange
        /// </summary>
        [DataMember(Name = "mostFrequentTransactionRange", EmitDefaultValue = false)]
        public string MostFrequentTransactionRange { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfCardRequests
        /// </summary>
        [DataMember(Name = "numberOfCardRequests", EmitDefaultValue = false)]
        public decimal NumberOfCardRequests { get; set; }

        /// <summary>
        /// Gets or Sets PercentNumberOfDaysBalanceWasLessThan10ThousandNaira
        /// </summary>
        [DataMember(Name = "percentNumberOfDaysBalanceWasLessThan10ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentNumberOfDaysBalanceWasLessThan10ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira
        /// </summary>
        [DataMember(Name = "percentNumberOfDaysTransactionsWasLessThan10ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfBalancesBetween100ThousandTo500ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfBalancesBetween100ThousandTo500ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfBalancesBetween100ThousandTo500ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfBalancesBetween10ThousandTo100ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfBalancesBetween10ThousandTo100ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfBalancesBetween10ThousandTo100ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfBalancesBetween500ThousandToOneMillionNaira
        /// </summary>
        [DataMember(Name = "percentOfBalancesBetween500ThousandToOneMillionNaira", EmitDefaultValue = false)]
        public decimal PercentOfBalancesBetween500ThousandToOneMillionNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfBalancesGreaterThanOneMillionNaira
        /// </summary>
        [DataMember(Name = "percentOfBalancesGreaterThanOneMillionNaira", EmitDefaultValue = false)]
        public decimal PercentOfBalancesGreaterThanOneMillionNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfBalancesLessThan10ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfBalancesLessThan10ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfBalancesLessThan10ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTransactionsBetween100ThousandTo500ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfTransactionsBetween100ThousandTo500ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfTransactionsBetween100ThousandTo500ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTransactionsBetween10ThousandTo100ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfTransactionsBetween10ThousandTo100ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfTransactionsBetween10ThousandTo100ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTransactionsBetween500ThousandToOneMillionNaira
        /// </summary>
        [DataMember(Name = "percentOfTransactionsBetween500ThousandToOneMillionNaira", EmitDefaultValue = false)]
        public decimal PercentOfTransactionsBetween500ThousandToOneMillionNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTransactionsGreaterThanOneMillionNaira
        /// </summary>
        [DataMember(Name = "percentOfTransactionsGreaterThanOneMillionNaira", EmitDefaultValue = false)]
        public decimal PercentOfTransactionsGreaterThanOneMillionNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfTransactionsLessThan10ThousandNaira
        /// </summary>
        [DataMember(Name = "percentOfTransactionsLessThan10ThousandNaira", EmitDefaultValue = false)]
        public decimal PercentOfTransactionsLessThan10ThousandNaira { get; set; }

        /// <summary>
        /// Gets or Sets PercentofCreditTransactions
        /// </summary>
        [DataMember(Name = "percentofCreditTransactions", EmitDefaultValue = false)]
        public decimal PercentofCreditTransactions { get; set; }

        /// <summary>
        /// Gets or Sets PercentofDebitTransactions
        /// </summary>
        [DataMember(Name = "percentofDebitTransactions", EmitDefaultValue = false)]
        public decimal PercentofDebitTransactions { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountOfTransactions
        /// </summary>
        [DataMember(Name = "totalAmountOfTransactions", EmitDefaultValue = false)]
        public decimal TotalAmountOfTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountAnalysisResponseEntityTransactionRoutineBreakdown {\n");
            sb.Append("  MaximumExpense: ").Append(MaximumExpense).Append("\n");
            sb.Append("  LastCreditReceived: ").Append(LastCreditReceived).Append("\n");
            sb.Append("  LastDebitMade: ").Append(LastDebitMade).Append("\n");
            sb.Append("  MostFrequentBalanceRange: ").Append(MostFrequentBalanceRange).Append("\n");
            sb.Append("  MostFrequentTransactionRange: ").Append(MostFrequentTransactionRange).Append("\n");
            sb.Append("  NumberOfCardRequests: ").Append(NumberOfCardRequests).Append("\n");
            sb.Append("  PercentNumberOfDaysBalanceWasLessThan10ThousandNaira: ").Append(PercentNumberOfDaysBalanceWasLessThan10ThousandNaira).Append("\n");
            sb.Append("  PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira: ").Append(PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira).Append("\n");
            sb.Append("  PercentOfBalancesBetween100ThousandTo500ThousandNaira: ").Append(PercentOfBalancesBetween100ThousandTo500ThousandNaira).Append("\n");
            sb.Append("  PercentOfBalancesBetween10ThousandTo100ThousandNaira: ").Append(PercentOfBalancesBetween10ThousandTo100ThousandNaira).Append("\n");
            sb.Append("  PercentOfBalancesBetween500ThousandToOneMillionNaira: ").Append(PercentOfBalancesBetween500ThousandToOneMillionNaira).Append("\n");
            sb.Append("  PercentOfBalancesGreaterThanOneMillionNaira: ").Append(PercentOfBalancesGreaterThanOneMillionNaira).Append("\n");
            sb.Append("  PercentOfBalancesLessThan10ThousandNaira: ").Append(PercentOfBalancesLessThan10ThousandNaira).Append("\n");
            sb.Append("  PercentOfTransactionsBetween100ThousandTo500ThousandNaira: ").Append(PercentOfTransactionsBetween100ThousandTo500ThousandNaira).Append("\n");
            sb.Append("  PercentOfTransactionsBetween10ThousandTo100ThousandNaira: ").Append(PercentOfTransactionsBetween10ThousandTo100ThousandNaira).Append("\n");
            sb.Append("  PercentOfTransactionsBetween500ThousandToOneMillionNaira: ").Append(PercentOfTransactionsBetween500ThousandToOneMillionNaira).Append("\n");
            sb.Append("  PercentOfTransactionsGreaterThanOneMillionNaira: ").Append(PercentOfTransactionsGreaterThanOneMillionNaira).Append("\n");
            sb.Append("  PercentOfTransactionsLessThan10ThousandNaira: ").Append(PercentOfTransactionsLessThan10ThousandNaira).Append("\n");
            sb.Append("  PercentofCreditTransactions: ").Append(PercentofCreditTransactions).Append("\n");
            sb.Append("  PercentofDebitTransactions: ").Append(PercentofDebitTransactions).Append("\n");
            sb.Append("  TotalAmountOfTransactions: ").Append(TotalAmountOfTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountAnalysisResponseEntityTransactionRoutineBreakdown);
        }

        /// <summary>
        /// Returns true if GetAccountAnalysisResponseEntityTransactionRoutineBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountAnalysisResponseEntityTransactionRoutineBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountAnalysisResponseEntityTransactionRoutineBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaximumExpense == input.MaximumExpense ||
                    this.MaximumExpense.Equals(input.MaximumExpense)
                ) && 
                (
                    this.LastCreditReceived == input.LastCreditReceived ||
                    (this.LastCreditReceived != null &&
                    this.LastCreditReceived.Equals(input.LastCreditReceived))
                ) && 
                (
                    this.LastDebitMade == input.LastDebitMade ||
                    (this.LastDebitMade != null &&
                    this.LastDebitMade.Equals(input.LastDebitMade))
                ) && 
                (
                    this.MostFrequentBalanceRange == input.MostFrequentBalanceRange ||
                    (this.MostFrequentBalanceRange != null &&
                    this.MostFrequentBalanceRange.Equals(input.MostFrequentBalanceRange))
                ) && 
                (
                    this.MostFrequentTransactionRange == input.MostFrequentTransactionRange ||
                    (this.MostFrequentTransactionRange != null &&
                    this.MostFrequentTransactionRange.Equals(input.MostFrequentTransactionRange))
                ) && 
                (
                    this.NumberOfCardRequests == input.NumberOfCardRequests ||
                    this.NumberOfCardRequests.Equals(input.NumberOfCardRequests)
                ) && 
                (
                    this.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira == input.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira ||
                    this.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira.Equals(input.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira)
                ) && 
                (
                    this.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira == input.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira ||
                    this.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira.Equals(input.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira)
                ) && 
                (
                    this.PercentOfBalancesBetween100ThousandTo500ThousandNaira == input.PercentOfBalancesBetween100ThousandTo500ThousandNaira ||
                    this.PercentOfBalancesBetween100ThousandTo500ThousandNaira.Equals(input.PercentOfBalancesBetween100ThousandTo500ThousandNaira)
                ) && 
                (
                    this.PercentOfBalancesBetween10ThousandTo100ThousandNaira == input.PercentOfBalancesBetween10ThousandTo100ThousandNaira ||
                    this.PercentOfBalancesBetween10ThousandTo100ThousandNaira.Equals(input.PercentOfBalancesBetween10ThousandTo100ThousandNaira)
                ) && 
                (
                    this.PercentOfBalancesBetween500ThousandToOneMillionNaira == input.PercentOfBalancesBetween500ThousandToOneMillionNaira ||
                    this.PercentOfBalancesBetween500ThousandToOneMillionNaira.Equals(input.PercentOfBalancesBetween500ThousandToOneMillionNaira)
                ) && 
                (
                    this.PercentOfBalancesGreaterThanOneMillionNaira == input.PercentOfBalancesGreaterThanOneMillionNaira ||
                    this.PercentOfBalancesGreaterThanOneMillionNaira.Equals(input.PercentOfBalancesGreaterThanOneMillionNaira)
                ) && 
                (
                    this.PercentOfBalancesLessThan10ThousandNaira == input.PercentOfBalancesLessThan10ThousandNaira ||
                    this.PercentOfBalancesLessThan10ThousandNaira.Equals(input.PercentOfBalancesLessThan10ThousandNaira)
                ) && 
                (
                    this.PercentOfTransactionsBetween100ThousandTo500ThousandNaira == input.PercentOfTransactionsBetween100ThousandTo500ThousandNaira ||
                    this.PercentOfTransactionsBetween100ThousandTo500ThousandNaira.Equals(input.PercentOfTransactionsBetween100ThousandTo500ThousandNaira)
                ) && 
                (
                    this.PercentOfTransactionsBetween10ThousandTo100ThousandNaira == input.PercentOfTransactionsBetween10ThousandTo100ThousandNaira ||
                    this.PercentOfTransactionsBetween10ThousandTo100ThousandNaira.Equals(input.PercentOfTransactionsBetween10ThousandTo100ThousandNaira)
                ) && 
                (
                    this.PercentOfTransactionsBetween500ThousandToOneMillionNaira == input.PercentOfTransactionsBetween500ThousandToOneMillionNaira ||
                    this.PercentOfTransactionsBetween500ThousandToOneMillionNaira.Equals(input.PercentOfTransactionsBetween500ThousandToOneMillionNaira)
                ) && 
                (
                    this.PercentOfTransactionsGreaterThanOneMillionNaira == input.PercentOfTransactionsGreaterThanOneMillionNaira ||
                    this.PercentOfTransactionsGreaterThanOneMillionNaira.Equals(input.PercentOfTransactionsGreaterThanOneMillionNaira)
                ) && 
                (
                    this.PercentOfTransactionsLessThan10ThousandNaira == input.PercentOfTransactionsLessThan10ThousandNaira ||
                    this.PercentOfTransactionsLessThan10ThousandNaira.Equals(input.PercentOfTransactionsLessThan10ThousandNaira)
                ) && 
                (
                    this.PercentofCreditTransactions == input.PercentofCreditTransactions ||
                    this.PercentofCreditTransactions.Equals(input.PercentofCreditTransactions)
                ) && 
                (
                    this.PercentofDebitTransactions == input.PercentofDebitTransactions ||
                    this.PercentofDebitTransactions.Equals(input.PercentofDebitTransactions)
                ) && 
                (
                    this.TotalAmountOfTransactions == input.TotalAmountOfTransactions ||
                    this.TotalAmountOfTransactions.Equals(input.TotalAmountOfTransactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaximumExpense.GetHashCode();
                if (this.LastCreditReceived != null)
                {
                    hashCode = (hashCode * 59) + this.LastCreditReceived.GetHashCode();
                }
                if (this.LastDebitMade != null)
                {
                    hashCode = (hashCode * 59) + this.LastDebitMade.GetHashCode();
                }
                if (this.MostFrequentBalanceRange != null)
                {
                    hashCode = (hashCode * 59) + this.MostFrequentBalanceRange.GetHashCode();
                }
                if (this.MostFrequentTransactionRange != null)
                {
                    hashCode = (hashCode * 59) + this.MostFrequentTransactionRange.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfCardRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentNumberOfDaysBalanceWasLessThan10ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentNumberOfDaysTransactionsWasLessThan10ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfBalancesBetween100ThousandTo500ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfBalancesBetween10ThousandTo100ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfBalancesBetween500ThousandToOneMillionNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfBalancesGreaterThanOneMillionNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfBalancesLessThan10ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfTransactionsBetween100ThousandTo500ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfTransactionsBetween10ThousandTo100ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfTransactionsBetween500ThousandToOneMillionNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfTransactionsGreaterThanOneMillionNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentOfTransactionsLessThan10ThousandNaira.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentofCreditTransactions.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentofDebitTransactions.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAmountOfTransactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
