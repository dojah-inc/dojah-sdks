/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// FraudGetIpReputationResponseEntityReportAnonymity
    /// </summary>
    [DataContract(Name = "FraudGetIpReputationResponse_entity_report_anonymity")]
    public partial class FraudGetIpReputationResponseEntityReportAnonymity : IEquatable<FraudGetIpReputationResponseEntityReportAnonymity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudGetIpReputationResponseEntityReportAnonymity" /> class.
        /// </summary>
        /// <param name="isProxy">isProxy.</param>
        /// <param name="isWebproxy">isWebproxy.</param>
        /// <param name="isVpn">isVpn.</param>
        /// <param name="isHosting">isHosting.</param>
        /// <param name="isTor">isTor.</param>
        public FraudGetIpReputationResponseEntityReportAnonymity(bool isProxy = default(bool), bool isWebproxy = default(bool), bool isVpn = default(bool), bool isHosting = default(bool), bool isTor = default(bool))
        {
            this.IsProxy = isProxy;
            this.IsWebproxy = isWebproxy;
            this.IsVpn = isVpn;
            this.IsHosting = isHosting;
            this.IsTor = isTor;
        }

        /// <summary>
        /// Gets or Sets IsProxy
        /// </summary>
        [DataMember(Name = "is_proxy", EmitDefaultValue = true)]
        public bool IsProxy { get; set; }

        /// <summary>
        /// Gets or Sets IsWebproxy
        /// </summary>
        [DataMember(Name = "is_webproxy", EmitDefaultValue = true)]
        public bool IsWebproxy { get; set; }

        /// <summary>
        /// Gets or Sets IsVpn
        /// </summary>
        [DataMember(Name = "is_vpn", EmitDefaultValue = true)]
        public bool IsVpn { get; set; }

        /// <summary>
        /// Gets or Sets IsHosting
        /// </summary>
        [DataMember(Name = "is_hosting", EmitDefaultValue = true)]
        public bool IsHosting { get; set; }

        /// <summary>
        /// Gets or Sets IsTor
        /// </summary>
        [DataMember(Name = "is_tor", EmitDefaultValue = true)]
        public bool IsTor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FraudGetIpReputationResponseEntityReportAnonymity {\n");
            sb.Append("  IsProxy: ").Append(IsProxy).Append("\n");
            sb.Append("  IsWebproxy: ").Append(IsWebproxy).Append("\n");
            sb.Append("  IsVpn: ").Append(IsVpn).Append("\n");
            sb.Append("  IsHosting: ").Append(IsHosting).Append("\n");
            sb.Append("  IsTor: ").Append(IsTor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudGetIpReputationResponseEntityReportAnonymity);
        }

        /// <summary>
        /// Returns true if FraudGetIpReputationResponseEntityReportAnonymity instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudGetIpReputationResponseEntityReportAnonymity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudGetIpReputationResponseEntityReportAnonymity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsProxy == input.IsProxy ||
                    this.IsProxy.Equals(input.IsProxy)
                ) && 
                (
                    this.IsWebproxy == input.IsWebproxy ||
                    this.IsWebproxy.Equals(input.IsWebproxy)
                ) && 
                (
                    this.IsVpn == input.IsVpn ||
                    this.IsVpn.Equals(input.IsVpn)
                ) && 
                (
                    this.IsHosting == input.IsHosting ||
                    this.IsHosting.Equals(input.IsHosting)
                ) && 
                (
                    this.IsTor == input.IsTor ||
                    this.IsTor.Equals(input.IsTor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsProxy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsWebproxy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVpn.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHosting.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
