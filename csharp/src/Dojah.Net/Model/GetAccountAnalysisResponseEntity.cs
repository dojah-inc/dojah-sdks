/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetAccountAnalysisResponseEntity
    /// </summary>
    [DataContract(Name = "GetAccountAnalysisResponse_entity")]
    public partial class GetAccountAnalysisResponseEntity : IEquatable<GetAccountAnalysisResponseEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountAnalysisResponseEntity" /> class.
        /// </summary>
        /// <param name="accountBreakdown">accountBreakdown.</param>
        /// <param name="expenseBreakdown">expenseBreakdown.</param>
        /// <param name="fundsManagement">fundsManagement.</param>
        /// <param name="inflowBreakdown">inflowBreakdown.</param>
        /// <param name="transactionRoutineBreakdown">transactionRoutineBreakdown.</param>
        /// <param name="status">status.</param>
        public GetAccountAnalysisResponseEntity(GetAccountAnalysisResponseEntityAccountBreakdown accountBreakdown = default(GetAccountAnalysisResponseEntityAccountBreakdown), GetAccountAnalysisResponseEntityExpenseBreakdown expenseBreakdown = default(GetAccountAnalysisResponseEntityExpenseBreakdown), GetAccountAnalysisResponseEntityFundsManagement fundsManagement = default(GetAccountAnalysisResponseEntityFundsManagement), GetAccountAnalysisResponseEntityInflowBreakdown inflowBreakdown = default(GetAccountAnalysisResponseEntityInflowBreakdown), GetAccountAnalysisResponseEntityTransactionRoutineBreakdown transactionRoutineBreakdown = default(GetAccountAnalysisResponseEntityTransactionRoutineBreakdown), decimal status = default(decimal))
        {
            this.AccountBreakdown = accountBreakdown;
            this.ExpenseBreakdown = expenseBreakdown;
            this.FundsManagement = fundsManagement;
            this.InflowBreakdown = inflowBreakdown;
            this.TransactionRoutineBreakdown = transactionRoutineBreakdown;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets AccountBreakdown
        /// </summary>
        [DataMember(Name = "accountBreakdown", EmitDefaultValue = false)]
        public GetAccountAnalysisResponseEntityAccountBreakdown AccountBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseBreakdown
        /// </summary>
        [DataMember(Name = "expenseBreakdown", EmitDefaultValue = false)]
        public GetAccountAnalysisResponseEntityExpenseBreakdown ExpenseBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets FundsManagement
        /// </summary>
        [DataMember(Name = "fundsManagement", EmitDefaultValue = false)]
        public GetAccountAnalysisResponseEntityFundsManagement FundsManagement { get; set; }

        /// <summary>
        /// Gets or Sets InflowBreakdown
        /// </summary>
        [DataMember(Name = "inflowBreakdown", EmitDefaultValue = false)]
        public GetAccountAnalysisResponseEntityInflowBreakdown InflowBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets TransactionRoutineBreakdown
        /// </summary>
        [DataMember(Name = "transactionRoutineBreakdown", EmitDefaultValue = false)]
        public GetAccountAnalysisResponseEntityTransactionRoutineBreakdown TransactionRoutineBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public decimal Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountAnalysisResponseEntity {\n");
            sb.Append("  AccountBreakdown: ").Append(AccountBreakdown).Append("\n");
            sb.Append("  ExpenseBreakdown: ").Append(ExpenseBreakdown).Append("\n");
            sb.Append("  FundsManagement: ").Append(FundsManagement).Append("\n");
            sb.Append("  InflowBreakdown: ").Append(InflowBreakdown).Append("\n");
            sb.Append("  TransactionRoutineBreakdown: ").Append(TransactionRoutineBreakdown).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountAnalysisResponseEntity);
        }

        /// <summary>
        /// Returns true if GetAccountAnalysisResponseEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountAnalysisResponseEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountAnalysisResponseEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountBreakdown == input.AccountBreakdown ||
                    (this.AccountBreakdown != null &&
                    this.AccountBreakdown.Equals(input.AccountBreakdown))
                ) && 
                (
                    this.ExpenseBreakdown == input.ExpenseBreakdown ||
                    (this.ExpenseBreakdown != null &&
                    this.ExpenseBreakdown.Equals(input.ExpenseBreakdown))
                ) && 
                (
                    this.FundsManagement == input.FundsManagement ||
                    (this.FundsManagement != null &&
                    this.FundsManagement.Equals(input.FundsManagement))
                ) && 
                (
                    this.InflowBreakdown == input.InflowBreakdown ||
                    (this.InflowBreakdown != null &&
                    this.InflowBreakdown.Equals(input.InflowBreakdown))
                ) && 
                (
                    this.TransactionRoutineBreakdown == input.TransactionRoutineBreakdown ||
                    (this.TransactionRoutineBreakdown != null &&
                    this.TransactionRoutineBreakdown.Equals(input.TransactionRoutineBreakdown))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.AccountBreakdown.GetHashCode();
                }
                if (this.ExpenseBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseBreakdown.GetHashCode();
                }
                if (this.FundsManagement != null)
                {
                    hashCode = (hashCode * 59) + this.FundsManagement.GetHashCode();
                }
                if (this.InflowBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.InflowBreakdown.GetHashCode();
                }
                if (this.TransactionRoutineBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionRoutineBreakdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
