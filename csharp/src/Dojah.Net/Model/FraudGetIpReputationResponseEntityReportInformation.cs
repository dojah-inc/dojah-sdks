/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// FraudGetIpReputationResponseEntityReportInformation
    /// </summary>
    [DataContract(Name = "FraudGetIpReputationResponse_entity_report_information")]
    public partial class FraudGetIpReputationResponseEntityReportInformation : IEquatable<FraudGetIpReputationResponseEntityReportInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudGetIpReputationResponseEntityReportInformation" /> class.
        /// </summary>
        /// <param name="reverseDns">reverseDns.</param>
        /// <param name="continentCode">continentCode.</param>
        /// <param name="continentName">continentName.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="countryCurrency">countryCurrency.</param>
        /// <param name="countryCallingCode">countryCallingCode.</param>
        /// <param name="regionName">regionName.</param>
        /// <param name="cityName">cityName.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="isp">isp.</param>
        /// <param name="asn">asn.</param>
        public FraudGetIpReputationResponseEntityReportInformation(string reverseDns = default(string), string continentCode = default(string), string continentName = default(string), string countryCode = default(string), string countryName = default(string), string countryCurrency = default(string), string countryCallingCode = default(string), string regionName = default(string), string cityName = default(string), decimal latitude = default(decimal), decimal longitude = default(decimal), string isp = default(string), string asn = default(string))
        {
            this.ReverseDns = reverseDns;
            this.ContinentCode = continentCode;
            this.ContinentName = continentName;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
            this.CountryCurrency = countryCurrency;
            this.CountryCallingCode = countryCallingCode;
            this.RegionName = regionName;
            this.CityName = cityName;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Isp = isp;
            this.Asn = asn;
        }

        /// <summary>
        /// Gets or Sets ReverseDns
        /// </summary>
        [DataMember(Name = "reverse_dns", EmitDefaultValue = false)]
        public string ReverseDns { get; set; }

        /// <summary>
        /// Gets or Sets ContinentCode
        /// </summary>
        [DataMember(Name = "continent_code", EmitDefaultValue = false)]
        public string ContinentCode { get; set; }

        /// <summary>
        /// Gets or Sets ContinentName
        /// </summary>
        [DataMember(Name = "continent_name", EmitDefaultValue = false)]
        public string ContinentName { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name = "country_name", EmitDefaultValue = false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets CountryCurrency
        /// </summary>
        [DataMember(Name = "country_currency", EmitDefaultValue = false)]
        public string CountryCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CountryCallingCode
        /// </summary>
        [DataMember(Name = "country_calling_code", EmitDefaultValue = false)]
        public string CountryCallingCode { get; set; }

        /// <summary>
        /// Gets or Sets RegionName
        /// </summary>
        [DataMember(Name = "region_name", EmitDefaultValue = false)]
        public string RegionName { get; set; }

        /// <summary>
        /// Gets or Sets CityName
        /// </summary>
        [DataMember(Name = "city_name", EmitDefaultValue = false)]
        public string CityName { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Isp
        /// </summary>
        [DataMember(Name = "isp", EmitDefaultValue = false)]
        public string Isp { get; set; }

        /// <summary>
        /// Gets or Sets Asn
        /// </summary>
        [DataMember(Name = "asn", EmitDefaultValue = false)]
        public string Asn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FraudGetIpReputationResponseEntityReportInformation {\n");
            sb.Append("  ReverseDns: ").Append(ReverseDns).Append("\n");
            sb.Append("  ContinentCode: ").Append(ContinentCode).Append("\n");
            sb.Append("  ContinentName: ").Append(ContinentName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryCurrency: ").Append(CountryCurrency).Append("\n");
            sb.Append("  CountryCallingCode: ").Append(CountryCallingCode).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  Asn: ").Append(Asn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudGetIpReputationResponseEntityReportInformation);
        }

        /// <summary>
        /// Returns true if FraudGetIpReputationResponseEntityReportInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudGetIpReputationResponseEntityReportInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudGetIpReputationResponseEntityReportInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReverseDns == input.ReverseDns ||
                    (this.ReverseDns != null &&
                    this.ReverseDns.Equals(input.ReverseDns))
                ) && 
                (
                    this.ContinentCode == input.ContinentCode ||
                    (this.ContinentCode != null &&
                    this.ContinentCode.Equals(input.ContinentCode))
                ) && 
                (
                    this.ContinentName == input.ContinentName ||
                    (this.ContinentName != null &&
                    this.ContinentName.Equals(input.ContinentName))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CountryCurrency == input.CountryCurrency ||
                    (this.CountryCurrency != null &&
                    this.CountryCurrency.Equals(input.CountryCurrency))
                ) && 
                (
                    this.CountryCallingCode == input.CountryCallingCode ||
                    (this.CountryCallingCode != null &&
                    this.CountryCallingCode.Equals(input.CountryCallingCode))
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.CityName == input.CityName ||
                    (this.CityName != null &&
                    this.CityName.Equals(input.CityName))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Isp == input.Isp ||
                    (this.Isp != null &&
                    this.Isp.Equals(input.Isp))
                ) && 
                (
                    this.Asn == input.Asn ||
                    (this.Asn != null &&
                    this.Asn.Equals(input.Asn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReverseDns != null)
                {
                    hashCode = (hashCode * 59) + this.ReverseDns.GetHashCode();
                }
                if (this.ContinentCode != null)
                {
                    hashCode = (hashCode * 59) + this.ContinentCode.GetHashCode();
                }
                if (this.ContinentName != null)
                {
                    hashCode = (hashCode * 59) + this.ContinentName.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.CountryName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryName.GetHashCode();
                }
                if (this.CountryCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCurrency.GetHashCode();
                }
                if (this.CountryCallingCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCallingCode.GetHashCode();
                }
                if (this.RegionName != null)
                {
                    hashCode = (hashCode * 59) + this.RegionName.GetHashCode();
                }
                if (this.CityName != null)
                {
                    hashCode = (hashCode * 59) + this.CityName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                if (this.Isp != null)
                {
                    hashCode = (hashCode * 59) + this.Isp.GetHashCode();
                }
                if (this.Asn != null)
                {
                    hashCode = (hashCode * 59) + this.Asn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
