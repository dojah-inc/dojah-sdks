/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// FraudGetIpReputationResponseEntityReport
    /// </summary>
    [DataContract(Name = "FraudGetIpReputationResponse_entity_report")]
    public partial class FraudGetIpReputationResponseEntityReport : IEquatable<FraudGetIpReputationResponseEntityReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudGetIpReputationResponseEntityReport" /> class.
        /// </summary>
        /// <param name="ip">ip.</param>
        /// <param name="blacklists">blacklists.</param>
        /// <param name="information">information.</param>
        /// <param name="anonymity">anonymity.</param>
        /// <param name="riskScore">riskScore.</param>
        public FraudGetIpReputationResponseEntityReport(string ip = default(string), FraudGetIpReputationResponseEntityReportBlacklists blacklists = default(FraudGetIpReputationResponseEntityReportBlacklists), FraudGetIpReputationResponseEntityReportInformation information = default(FraudGetIpReputationResponseEntityReportInformation), FraudGetIpReputationResponseEntityReportAnonymity anonymity = default(FraudGetIpReputationResponseEntityReportAnonymity), FraudGetIpReputationResponseEntityReportRiskScore riskScore = default(FraudGetIpReputationResponseEntityReportRiskScore))
        {
            this.Ip = ip;
            this.Blacklists = blacklists;
            this.Information = information;
            this.Anonymity = anonymity;
            this.RiskScore = riskScore;
        }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Blacklists
        /// </summary>
        [DataMember(Name = "blacklists", EmitDefaultValue = false)]
        public FraudGetIpReputationResponseEntityReportBlacklists Blacklists { get; set; }

        /// <summary>
        /// Gets or Sets Information
        /// </summary>
        [DataMember(Name = "information", EmitDefaultValue = false)]
        public FraudGetIpReputationResponseEntityReportInformation Information { get; set; }

        /// <summary>
        /// Gets or Sets Anonymity
        /// </summary>
        [DataMember(Name = "anonymity", EmitDefaultValue = false)]
        public FraudGetIpReputationResponseEntityReportAnonymity Anonymity { get; set; }

        /// <summary>
        /// Gets or Sets RiskScore
        /// </summary>
        [DataMember(Name = "risk_score", EmitDefaultValue = false)]
        public FraudGetIpReputationResponseEntityReportRiskScore RiskScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FraudGetIpReputationResponseEntityReport {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Blacklists: ").Append(Blacklists).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  Anonymity: ").Append(Anonymity).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudGetIpReputationResponseEntityReport);
        }

        /// <summary>
        /// Returns true if FraudGetIpReputationResponseEntityReport instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudGetIpReputationResponseEntityReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudGetIpReputationResponseEntityReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Blacklists == input.Blacklists ||
                    (this.Blacklists != null &&
                    this.Blacklists.Equals(input.Blacklists))
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.Anonymity == input.Anonymity ||
                    (this.Anonymity != null &&
                    this.Anonymity.Equals(input.Anonymity))
                ) && 
                (
                    this.RiskScore == input.RiskScore ||
                    (this.RiskScore != null &&
                    this.RiskScore.Equals(input.RiskScore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.Blacklists != null)
                {
                    hashCode = (hashCode * 59) + this.Blacklists.GetHashCode();
                }
                if (this.Information != null)
                {
                    hashCode = (hashCode * 59) + this.Information.GetHashCode();
                }
                if (this.Anonymity != null)
                {
                    hashCode = (hashCode * 59) + this.Anonymity.GetHashCode();
                }
                if (this.RiskScore != null)
                {
                    hashCode = (hashCode * 59) + this.RiskScore.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
