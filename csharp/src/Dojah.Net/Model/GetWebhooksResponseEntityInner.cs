/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetWebhooksResponseEntityInner
    /// </summary>
    [DataContract(Name = "GetWebhooksResponse_entity_inner")]
    public partial class GetWebhooksResponseEntityInner : IEquatable<GetWebhooksResponseEntityInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWebhooksResponseEntityInner" /> class.
        /// </summary>
        /// <param name="appId">appId.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="environment">environment.</param>
        /// <param name="service">service.</param>
        /// <param name="confirmationStatus">confirmationStatus.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateUpdated">dateUpdated.</param>
        public GetWebhooksResponseEntityInner(string appId = default(string), string endpoint = default(string), string environment = default(string), string service = default(string), string confirmationStatus = default(string), string dateCreated = default(string), string dateUpdated = default(string))
        {
            this.AppId = appId;
            this.Endpoint = endpoint;
            this.Environment = environment;
            this.Service = service;
            this.ConfirmationStatus = confirmationStatus;
            this.DateCreated = dateCreated;
            this.DateUpdated = dateUpdated;
        }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name = "app_id", EmitDefaultValue = false)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationStatus
        /// </summary>
        [DataMember(Name = "confirmation_status", EmitDefaultValue = false)]
        public string ConfirmationStatus { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "date_updated", EmitDefaultValue = false)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWebhooksResponseEntityInner {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  ConfirmationStatus: ").Append(ConfirmationStatus).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWebhooksResponseEntityInner);
        }

        /// <summary>
        /// Returns true if GetWebhooksResponseEntityInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWebhooksResponseEntityInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWebhooksResponseEntityInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.ConfirmationStatus == input.ConfirmationStatus ||
                    (this.ConfirmationStatus != null &&
                    this.ConfirmationStatus.Equals(input.ConfirmationStatus))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppId != null)
                {
                    hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                }
                if (this.Endpoint != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoint.GetHashCode();
                }
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.ConfirmationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmationStatus.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.DateUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
