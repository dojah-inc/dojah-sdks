/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetAccountAnalysisResponseEntityExpenseBreakdown
    /// </summary>
    [DataContract(Name = "GetAccountAnalysisResponse_entity_expenseBreakdown")]
    public partial class GetAccountAnalysisResponseEntityExpenseBreakdown : IEquatable<GetAccountAnalysisResponseEntityExpenseBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountAnalysisResponseEntityExpenseBreakdown" /> class.
        /// </summary>
        /// <param name="maximumExpense">maximumExpense.</param>
        /// <param name="atmLocations">atmLocations.</param>
        /// <param name="averageMonthlyExpenseOnAirtimeandData">averageMonthlyExpenseOnAirtimeandData.</param>
        /// <param name="averageMonthlyExpenseOnAtmAndPOS">averageMonthlyExpenseOnAtmAndPOS.</param>
        /// <param name="averageMonthlyExpenseOnChargesAndStampDuty">averageMonthlyExpenseOnChargesAndStampDuty.</param>
        /// <param name="averageMonthlyExpenseOnEntertainment">averageMonthlyExpenseOnEntertainment.</param>
        /// <param name="averageMonthlyExpenseOnGambling">averageMonthlyExpenseOnGambling.</param>
        /// <param name="averageMonthlyExpenseOnHealth">averageMonthlyExpenseOnHealth.</param>
        /// <param name="averageMonthlyExpenseOnHospitalityandFood">averageMonthlyExpenseOnHospitalityandFood.</param>
        /// <param name="averageMonthlyExpenseOnInsurance">averageMonthlyExpenseOnInsurance.</param>
        /// <param name="averageMonthlyExpenseOnInternationalTransactions">averageMonthlyExpenseOnInternationalTransactions.</param>
        /// <param name="averageMonthlyExpenseOnOnlineandWeb">averageMonthlyExpenseOnOnlineandWeb.</param>
        /// <param name="averageMonthlyExpenseOnRent">averageMonthlyExpenseOnRent.</param>
        /// <param name="averageMonthlyExpenseOnSavingsAndInvestments">averageMonthlyExpenseOnSavingsAndInvestments.</param>
        /// <param name="averageMonthlyExpenseOnTransfer">averageMonthlyExpenseOnTransfer.</param>
        /// <param name="averageMonthlyExpenseOnTransportation">averageMonthlyExpenseOnTransportation.</param>
        /// <param name="averageMonthlyExpenseOnUSSD">averageMonthlyExpenseOnUSSD.</param>
        /// <param name="averageMonthlyExpenseOnUtilities">averageMonthlyExpenseOnUtilities.</param>
        /// <param name="averageMonthlyExpenseonTravel">averageMonthlyExpenseonTravel.</param>
        /// <param name="averageMonthlyRecurringExpenses">averageMonthlyRecurringExpenses.</param>
        /// <param name="averageMonthlyTotalExpenses">averageMonthlyTotalExpenses.</param>
        /// <param name="minimumSalary">minimumSalary.</param>
        /// <param name="monthWithmaximumExpense">monthWithmaximumExpense.</param>
        /// <param name="mostFrequentExpense">mostFrequentExpense.</param>
        /// <param name="mostFrequentExpenseCategory">mostFrequentExpenseCategory.</param>
        /// <param name="totalExpenseOnAirtimeAndData">totalExpenseOnAirtimeAndData.</param>
        /// <param name="totalExpenseOnInternationalTransactions">totalExpenseOnInternationalTransactions.</param>
        /// <param name="totalExpenseOnSavingsAndInvestments">totalExpenseOnSavingsAndInvestments.</param>
        /// <param name="totalExpenseOnTransfer">totalExpenseOnTransfer.</param>
        /// <param name="totalExpenseOnTransportation">totalExpenseOnTransportation.</param>
        /// <param name="totalExpenseOnTravel">totalExpenseOnTravel.</param>
        /// <param name="totalExpenseOnUSSD">totalExpenseOnUSSD.</param>
        /// <param name="totalExpenseOnUtilities">totalExpenseOnUtilities.</param>
        /// <param name="totalExpenseonChargesAndStampDuty">totalExpenseonChargesAndStampDuty.</param>
        /// <param name="totalExpenseonEntertainment">totalExpenseonEntertainment.</param>
        /// <param name="totalExpenseonGambling">totalExpenseonGambling.</param>
        /// <param name="totalExpenseonHealth">totalExpenseonHealth.</param>
        /// <param name="totalExpenseonHospitalityandFood">totalExpenseonHospitalityandFood.</param>
        /// <param name="totalExpenseonInsurance">totalExpenseonInsurance.</param>
        /// <param name="totalExpenseonOnlineandWeb">totalExpenseonOnlineandWeb.</param>
        /// <param name="totalMonthlyExpenses">totalMonthlyExpenses.</param>
        /// <param name="totalRecurringExpenses">totalRecurringExpenses.</param>
        public GetAccountAnalysisResponseEntityExpenseBreakdown(string maximumExpense = default(string), List<string> atmLocations = default(List<string>), decimal averageMonthlyExpenseOnAirtimeandData = default(decimal), decimal averageMonthlyExpenseOnAtmAndPOS = default(decimal), decimal averageMonthlyExpenseOnChargesAndStampDuty = default(decimal), decimal averageMonthlyExpenseOnEntertainment = default(decimal), decimal averageMonthlyExpenseOnGambling = default(decimal), decimal averageMonthlyExpenseOnHealth = default(decimal), decimal averageMonthlyExpenseOnHospitalityandFood = default(decimal), decimal averageMonthlyExpenseOnInsurance = default(decimal), decimal averageMonthlyExpenseOnInternationalTransactions = default(decimal), decimal averageMonthlyExpenseOnOnlineandWeb = default(decimal), decimal averageMonthlyExpenseOnRent = default(decimal), decimal averageMonthlyExpenseOnSavingsAndInvestments = default(decimal), decimal averageMonthlyExpenseOnTransfer = default(decimal), decimal averageMonthlyExpenseOnTransportation = default(decimal), decimal averageMonthlyExpenseOnUSSD = default(decimal), decimal averageMonthlyExpenseOnUtilities = default(decimal), decimal averageMonthlyExpenseonTravel = default(decimal), decimal averageMonthlyRecurringExpenses = default(decimal), decimal averageMonthlyTotalExpenses = default(decimal), decimal minimumSalary = default(decimal), string monthWithmaximumExpense = default(string), string mostFrequentExpense = default(string), string mostFrequentExpenseCategory = default(string), decimal totalExpenseOnAirtimeAndData = default(decimal), decimal totalExpenseOnInternationalTransactions = default(decimal), decimal totalExpenseOnSavingsAndInvestments = default(decimal), decimal totalExpenseOnTransfer = default(decimal), decimal totalExpenseOnTransportation = default(decimal), decimal totalExpenseOnTravel = default(decimal), decimal totalExpenseOnUSSD = default(decimal), decimal totalExpenseOnUtilities = default(decimal), decimal totalExpenseonChargesAndStampDuty = default(decimal), decimal totalExpenseonEntertainment = default(decimal), decimal totalExpenseonGambling = default(decimal), decimal totalExpenseonHealth = default(decimal), decimal totalExpenseonHospitalityandFood = default(decimal), decimal totalExpenseonInsurance = default(decimal), decimal totalExpenseonOnlineandWeb = default(decimal), decimal totalMonthlyExpenses = default(decimal), decimal totalRecurringExpenses = default(decimal))
        {
            this.MaximumExpense = maximumExpense;
            this.AtmLocations = atmLocations;
            this.AverageMonthlyExpenseOnAirtimeandData = averageMonthlyExpenseOnAirtimeandData;
            this.AverageMonthlyExpenseOnAtmAndPOS = averageMonthlyExpenseOnAtmAndPOS;
            this.AverageMonthlyExpenseOnChargesAndStampDuty = averageMonthlyExpenseOnChargesAndStampDuty;
            this.AverageMonthlyExpenseOnEntertainment = averageMonthlyExpenseOnEntertainment;
            this.AverageMonthlyExpenseOnGambling = averageMonthlyExpenseOnGambling;
            this.AverageMonthlyExpenseOnHealth = averageMonthlyExpenseOnHealth;
            this.AverageMonthlyExpenseOnHospitalityandFood = averageMonthlyExpenseOnHospitalityandFood;
            this.AverageMonthlyExpenseOnInsurance = averageMonthlyExpenseOnInsurance;
            this.AverageMonthlyExpenseOnInternationalTransactions = averageMonthlyExpenseOnInternationalTransactions;
            this.AverageMonthlyExpenseOnOnlineandWeb = averageMonthlyExpenseOnOnlineandWeb;
            this.AverageMonthlyExpenseOnRent = averageMonthlyExpenseOnRent;
            this.AverageMonthlyExpenseOnSavingsAndInvestments = averageMonthlyExpenseOnSavingsAndInvestments;
            this.AverageMonthlyExpenseOnTransfer = averageMonthlyExpenseOnTransfer;
            this.AverageMonthlyExpenseOnTransportation = averageMonthlyExpenseOnTransportation;
            this.AverageMonthlyExpenseOnUSSD = averageMonthlyExpenseOnUSSD;
            this.AverageMonthlyExpenseOnUtilities = averageMonthlyExpenseOnUtilities;
            this.AverageMonthlyExpenseonTravel = averageMonthlyExpenseonTravel;
            this.AverageMonthlyRecurringExpenses = averageMonthlyRecurringExpenses;
            this.AverageMonthlyTotalExpenses = averageMonthlyTotalExpenses;
            this.MinimumSalary = minimumSalary;
            this.MonthWithmaximumExpense = monthWithmaximumExpense;
            this.MostFrequentExpense = mostFrequentExpense;
            this.MostFrequentExpenseCategory = mostFrequentExpenseCategory;
            this.TotalExpenseOnAirtimeAndData = totalExpenseOnAirtimeAndData;
            this.TotalExpenseOnInternationalTransactions = totalExpenseOnInternationalTransactions;
            this.TotalExpenseOnSavingsAndInvestments = totalExpenseOnSavingsAndInvestments;
            this.TotalExpenseOnTransfer = totalExpenseOnTransfer;
            this.TotalExpenseOnTransportation = totalExpenseOnTransportation;
            this.TotalExpenseOnTravel = totalExpenseOnTravel;
            this.TotalExpenseOnUSSD = totalExpenseOnUSSD;
            this.TotalExpenseOnUtilities = totalExpenseOnUtilities;
            this.TotalExpenseonChargesAndStampDuty = totalExpenseonChargesAndStampDuty;
            this.TotalExpenseonEntertainment = totalExpenseonEntertainment;
            this.TotalExpenseonGambling = totalExpenseonGambling;
            this.TotalExpenseonHealth = totalExpenseonHealth;
            this.TotalExpenseonHospitalityandFood = totalExpenseonHospitalityandFood;
            this.TotalExpenseonInsurance = totalExpenseonInsurance;
            this.TotalExpenseonOnlineandWeb = totalExpenseonOnlineandWeb;
            this.TotalMonthlyExpenses = totalMonthlyExpenses;
            this.TotalRecurringExpenses = totalRecurringExpenses;
        }

        /// <summary>
        /// Gets or Sets MaximumExpense
        /// </summary>
        [DataMember(Name = "MaximumExpense", EmitDefaultValue = false)]
        public string MaximumExpense { get; set; }

        /// <summary>
        /// Gets or Sets AtmLocations
        /// </summary>
        [DataMember(Name = "atmLocations", EmitDefaultValue = false)]
        public List<string> AtmLocations { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnAirtimeandData
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnAirtimeandData", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnAirtimeandData { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnAtmAndPOS
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnAtmAndPOS", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnAtmAndPOS { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnChargesAndStampDuty
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnChargesAndStampDuty", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnChargesAndStampDuty { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnEntertainment
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnEntertainment", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnEntertainment { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnGambling
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnGambling", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnGambling { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnHealth
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnHealth", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnHealth { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnHospitalityandFood
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnHospitalityandFood", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnHospitalityandFood { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnInsurance
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnInsurance", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnInsurance { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnInternationalTransactions
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnInternationalTransactions", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnInternationalTransactions { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnOnlineandWeb
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnOnlineandWeb", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnOnlineandWeb { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnRent
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnRent", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnRent { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnSavingsAndInvestments
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnSavingsAndInvestments", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnSavingsAndInvestments { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnTransfer
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnTransfer", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnTransfer { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnTransportation
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnTransportation", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnTransportation { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnUSSD
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnUSSD", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnUSSD { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseOnUtilities
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseOnUtilities", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseOnUtilities { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyExpenseonTravel
        /// </summary>
        [DataMember(Name = "averageMonthlyExpenseonTravel", EmitDefaultValue = false)]
        public decimal AverageMonthlyExpenseonTravel { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyRecurringExpenses
        /// </summary>
        [DataMember(Name = "averageMonthlyRecurringExpenses", EmitDefaultValue = false)]
        public decimal AverageMonthlyRecurringExpenses { get; set; }

        /// <summary>
        /// Gets or Sets AverageMonthlyTotalExpenses
        /// </summary>
        [DataMember(Name = "averageMonthlyTotalExpenses", EmitDefaultValue = false)]
        public decimal AverageMonthlyTotalExpenses { get; set; }

        /// <summary>
        /// Gets or Sets MinimumSalary
        /// </summary>
        [DataMember(Name = "minimumSalary", EmitDefaultValue = false)]
        public decimal MinimumSalary { get; set; }

        /// <summary>
        /// Gets or Sets MonthWithmaximumExpense
        /// </summary>
        [DataMember(Name = "monthWithmaximumExpense", EmitDefaultValue = false)]
        public string MonthWithmaximumExpense { get; set; }

        /// <summary>
        /// Gets or Sets MostFrequentExpense
        /// </summary>
        [DataMember(Name = "mostFrequentExpense", EmitDefaultValue = false)]
        public string MostFrequentExpense { get; set; }

        /// <summary>
        /// Gets or Sets MostFrequentExpenseCategory
        /// </summary>
        [DataMember(Name = "mostFrequentExpenseCategory", EmitDefaultValue = false)]
        public string MostFrequentExpenseCategory { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnAirtimeAndData
        /// </summary>
        [DataMember(Name = "totalExpenseOnAirtimeAndData", EmitDefaultValue = false)]
        public decimal TotalExpenseOnAirtimeAndData { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnInternationalTransactions
        /// </summary>
        [DataMember(Name = "totalExpenseOnInternationalTransactions", EmitDefaultValue = false)]
        public decimal TotalExpenseOnInternationalTransactions { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnSavingsAndInvestments
        /// </summary>
        [DataMember(Name = "totalExpenseOnSavingsAndInvestments", EmitDefaultValue = false)]
        public decimal TotalExpenseOnSavingsAndInvestments { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnTransfer
        /// </summary>
        [DataMember(Name = "totalExpenseOnTransfer", EmitDefaultValue = false)]
        public decimal TotalExpenseOnTransfer { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnTransportation
        /// </summary>
        [DataMember(Name = "totalExpenseOnTransportation", EmitDefaultValue = false)]
        public decimal TotalExpenseOnTransportation { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnTravel
        /// </summary>
        [DataMember(Name = "totalExpenseOnTravel", EmitDefaultValue = false)]
        public decimal TotalExpenseOnTravel { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnUSSD
        /// </summary>
        [DataMember(Name = "totalExpenseOnUSSD", EmitDefaultValue = false)]
        public decimal TotalExpenseOnUSSD { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseOnUtilities
        /// </summary>
        [DataMember(Name = "totalExpenseOnUtilities", EmitDefaultValue = false)]
        public decimal TotalExpenseOnUtilities { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonChargesAndStampDuty
        /// </summary>
        [DataMember(Name = "totalExpenseonChargesAndStampDuty", EmitDefaultValue = false)]
        public decimal TotalExpenseonChargesAndStampDuty { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonEntertainment
        /// </summary>
        [DataMember(Name = "totalExpenseonEntertainment", EmitDefaultValue = false)]
        public decimal TotalExpenseonEntertainment { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonGambling
        /// </summary>
        [DataMember(Name = "totalExpenseonGambling", EmitDefaultValue = false)]
        public decimal TotalExpenseonGambling { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonHealth
        /// </summary>
        [DataMember(Name = "totalExpenseonHealth", EmitDefaultValue = false)]
        public decimal TotalExpenseonHealth { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonHospitalityandFood
        /// </summary>
        [DataMember(Name = "totalExpenseonHospitalityandFood", EmitDefaultValue = false)]
        public decimal TotalExpenseonHospitalityandFood { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonInsurance
        /// </summary>
        [DataMember(Name = "totalExpenseonInsurance", EmitDefaultValue = false)]
        public decimal TotalExpenseonInsurance { get; set; }

        /// <summary>
        /// Gets or Sets TotalExpenseonOnlineandWeb
        /// </summary>
        [DataMember(Name = "totalExpenseonOnlineandWeb", EmitDefaultValue = false)]
        public decimal TotalExpenseonOnlineandWeb { get; set; }

        /// <summary>
        /// Gets or Sets TotalMonthlyExpenses
        /// </summary>
        [DataMember(Name = "totalMonthlyExpenses", EmitDefaultValue = false)]
        public decimal TotalMonthlyExpenses { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecurringExpenses
        /// </summary>
        [DataMember(Name = "totalRecurringExpenses", EmitDefaultValue = false)]
        public decimal TotalRecurringExpenses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountAnalysisResponseEntityExpenseBreakdown {\n");
            sb.Append("  MaximumExpense: ").Append(MaximumExpense).Append("\n");
            sb.Append("  AtmLocations: ").Append(AtmLocations).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnAirtimeandData: ").Append(AverageMonthlyExpenseOnAirtimeandData).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnAtmAndPOS: ").Append(AverageMonthlyExpenseOnAtmAndPOS).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnChargesAndStampDuty: ").Append(AverageMonthlyExpenseOnChargesAndStampDuty).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnEntertainment: ").Append(AverageMonthlyExpenseOnEntertainment).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnGambling: ").Append(AverageMonthlyExpenseOnGambling).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnHealth: ").Append(AverageMonthlyExpenseOnHealth).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnHospitalityandFood: ").Append(AverageMonthlyExpenseOnHospitalityandFood).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnInsurance: ").Append(AverageMonthlyExpenseOnInsurance).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnInternationalTransactions: ").Append(AverageMonthlyExpenseOnInternationalTransactions).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnOnlineandWeb: ").Append(AverageMonthlyExpenseOnOnlineandWeb).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnRent: ").Append(AverageMonthlyExpenseOnRent).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnSavingsAndInvestments: ").Append(AverageMonthlyExpenseOnSavingsAndInvestments).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnTransfer: ").Append(AverageMonthlyExpenseOnTransfer).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnTransportation: ").Append(AverageMonthlyExpenseOnTransportation).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnUSSD: ").Append(AverageMonthlyExpenseOnUSSD).Append("\n");
            sb.Append("  AverageMonthlyExpenseOnUtilities: ").Append(AverageMonthlyExpenseOnUtilities).Append("\n");
            sb.Append("  AverageMonthlyExpenseonTravel: ").Append(AverageMonthlyExpenseonTravel).Append("\n");
            sb.Append("  AverageMonthlyRecurringExpenses: ").Append(AverageMonthlyRecurringExpenses).Append("\n");
            sb.Append("  AverageMonthlyTotalExpenses: ").Append(AverageMonthlyTotalExpenses).Append("\n");
            sb.Append("  MinimumSalary: ").Append(MinimumSalary).Append("\n");
            sb.Append("  MonthWithmaximumExpense: ").Append(MonthWithmaximumExpense).Append("\n");
            sb.Append("  MostFrequentExpense: ").Append(MostFrequentExpense).Append("\n");
            sb.Append("  MostFrequentExpenseCategory: ").Append(MostFrequentExpenseCategory).Append("\n");
            sb.Append("  TotalExpenseOnAirtimeAndData: ").Append(TotalExpenseOnAirtimeAndData).Append("\n");
            sb.Append("  TotalExpenseOnInternationalTransactions: ").Append(TotalExpenseOnInternationalTransactions).Append("\n");
            sb.Append("  TotalExpenseOnSavingsAndInvestments: ").Append(TotalExpenseOnSavingsAndInvestments).Append("\n");
            sb.Append("  TotalExpenseOnTransfer: ").Append(TotalExpenseOnTransfer).Append("\n");
            sb.Append("  TotalExpenseOnTransportation: ").Append(TotalExpenseOnTransportation).Append("\n");
            sb.Append("  TotalExpenseOnTravel: ").Append(TotalExpenseOnTravel).Append("\n");
            sb.Append("  TotalExpenseOnUSSD: ").Append(TotalExpenseOnUSSD).Append("\n");
            sb.Append("  TotalExpenseOnUtilities: ").Append(TotalExpenseOnUtilities).Append("\n");
            sb.Append("  TotalExpenseonChargesAndStampDuty: ").Append(TotalExpenseonChargesAndStampDuty).Append("\n");
            sb.Append("  TotalExpenseonEntertainment: ").Append(TotalExpenseonEntertainment).Append("\n");
            sb.Append("  TotalExpenseonGambling: ").Append(TotalExpenseonGambling).Append("\n");
            sb.Append("  TotalExpenseonHealth: ").Append(TotalExpenseonHealth).Append("\n");
            sb.Append("  TotalExpenseonHospitalityandFood: ").Append(TotalExpenseonHospitalityandFood).Append("\n");
            sb.Append("  TotalExpenseonInsurance: ").Append(TotalExpenseonInsurance).Append("\n");
            sb.Append("  TotalExpenseonOnlineandWeb: ").Append(TotalExpenseonOnlineandWeb).Append("\n");
            sb.Append("  TotalMonthlyExpenses: ").Append(TotalMonthlyExpenses).Append("\n");
            sb.Append("  TotalRecurringExpenses: ").Append(TotalRecurringExpenses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountAnalysisResponseEntityExpenseBreakdown);
        }

        /// <summary>
        /// Returns true if GetAccountAnalysisResponseEntityExpenseBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountAnalysisResponseEntityExpenseBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountAnalysisResponseEntityExpenseBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaximumExpense == input.MaximumExpense ||
                    (this.MaximumExpense != null &&
                    this.MaximumExpense.Equals(input.MaximumExpense))
                ) && 
                (
                    this.AtmLocations == input.AtmLocations ||
                    this.AtmLocations != null &&
                    input.AtmLocations != null &&
                    this.AtmLocations.SequenceEqual(input.AtmLocations)
                ) && 
                (
                    this.AverageMonthlyExpenseOnAirtimeandData == input.AverageMonthlyExpenseOnAirtimeandData ||
                    this.AverageMonthlyExpenseOnAirtimeandData.Equals(input.AverageMonthlyExpenseOnAirtimeandData)
                ) && 
                (
                    this.AverageMonthlyExpenseOnAtmAndPOS == input.AverageMonthlyExpenseOnAtmAndPOS ||
                    this.AverageMonthlyExpenseOnAtmAndPOS.Equals(input.AverageMonthlyExpenseOnAtmAndPOS)
                ) && 
                (
                    this.AverageMonthlyExpenseOnChargesAndStampDuty == input.AverageMonthlyExpenseOnChargesAndStampDuty ||
                    this.AverageMonthlyExpenseOnChargesAndStampDuty.Equals(input.AverageMonthlyExpenseOnChargesAndStampDuty)
                ) && 
                (
                    this.AverageMonthlyExpenseOnEntertainment == input.AverageMonthlyExpenseOnEntertainment ||
                    this.AverageMonthlyExpenseOnEntertainment.Equals(input.AverageMonthlyExpenseOnEntertainment)
                ) && 
                (
                    this.AverageMonthlyExpenseOnGambling == input.AverageMonthlyExpenseOnGambling ||
                    this.AverageMonthlyExpenseOnGambling.Equals(input.AverageMonthlyExpenseOnGambling)
                ) && 
                (
                    this.AverageMonthlyExpenseOnHealth == input.AverageMonthlyExpenseOnHealth ||
                    this.AverageMonthlyExpenseOnHealth.Equals(input.AverageMonthlyExpenseOnHealth)
                ) && 
                (
                    this.AverageMonthlyExpenseOnHospitalityandFood == input.AverageMonthlyExpenseOnHospitalityandFood ||
                    this.AverageMonthlyExpenseOnHospitalityandFood.Equals(input.AverageMonthlyExpenseOnHospitalityandFood)
                ) && 
                (
                    this.AverageMonthlyExpenseOnInsurance == input.AverageMonthlyExpenseOnInsurance ||
                    this.AverageMonthlyExpenseOnInsurance.Equals(input.AverageMonthlyExpenseOnInsurance)
                ) && 
                (
                    this.AverageMonthlyExpenseOnInternationalTransactions == input.AverageMonthlyExpenseOnInternationalTransactions ||
                    this.AverageMonthlyExpenseOnInternationalTransactions.Equals(input.AverageMonthlyExpenseOnInternationalTransactions)
                ) && 
                (
                    this.AverageMonthlyExpenseOnOnlineandWeb == input.AverageMonthlyExpenseOnOnlineandWeb ||
                    this.AverageMonthlyExpenseOnOnlineandWeb.Equals(input.AverageMonthlyExpenseOnOnlineandWeb)
                ) && 
                (
                    this.AverageMonthlyExpenseOnRent == input.AverageMonthlyExpenseOnRent ||
                    this.AverageMonthlyExpenseOnRent.Equals(input.AverageMonthlyExpenseOnRent)
                ) && 
                (
                    this.AverageMonthlyExpenseOnSavingsAndInvestments == input.AverageMonthlyExpenseOnSavingsAndInvestments ||
                    this.AverageMonthlyExpenseOnSavingsAndInvestments.Equals(input.AverageMonthlyExpenseOnSavingsAndInvestments)
                ) && 
                (
                    this.AverageMonthlyExpenseOnTransfer == input.AverageMonthlyExpenseOnTransfer ||
                    this.AverageMonthlyExpenseOnTransfer.Equals(input.AverageMonthlyExpenseOnTransfer)
                ) && 
                (
                    this.AverageMonthlyExpenseOnTransportation == input.AverageMonthlyExpenseOnTransportation ||
                    this.AverageMonthlyExpenseOnTransportation.Equals(input.AverageMonthlyExpenseOnTransportation)
                ) && 
                (
                    this.AverageMonthlyExpenseOnUSSD == input.AverageMonthlyExpenseOnUSSD ||
                    this.AverageMonthlyExpenseOnUSSD.Equals(input.AverageMonthlyExpenseOnUSSD)
                ) && 
                (
                    this.AverageMonthlyExpenseOnUtilities == input.AverageMonthlyExpenseOnUtilities ||
                    this.AverageMonthlyExpenseOnUtilities.Equals(input.AverageMonthlyExpenseOnUtilities)
                ) && 
                (
                    this.AverageMonthlyExpenseonTravel == input.AverageMonthlyExpenseonTravel ||
                    this.AverageMonthlyExpenseonTravel.Equals(input.AverageMonthlyExpenseonTravel)
                ) && 
                (
                    this.AverageMonthlyRecurringExpenses == input.AverageMonthlyRecurringExpenses ||
                    this.AverageMonthlyRecurringExpenses.Equals(input.AverageMonthlyRecurringExpenses)
                ) && 
                (
                    this.AverageMonthlyTotalExpenses == input.AverageMonthlyTotalExpenses ||
                    this.AverageMonthlyTotalExpenses.Equals(input.AverageMonthlyTotalExpenses)
                ) && 
                (
                    this.MinimumSalary == input.MinimumSalary ||
                    this.MinimumSalary.Equals(input.MinimumSalary)
                ) && 
                (
                    this.MonthWithmaximumExpense == input.MonthWithmaximumExpense ||
                    (this.MonthWithmaximumExpense != null &&
                    this.MonthWithmaximumExpense.Equals(input.MonthWithmaximumExpense))
                ) && 
                (
                    this.MostFrequentExpense == input.MostFrequentExpense ||
                    (this.MostFrequentExpense != null &&
                    this.MostFrequentExpense.Equals(input.MostFrequentExpense))
                ) && 
                (
                    this.MostFrequentExpenseCategory == input.MostFrequentExpenseCategory ||
                    (this.MostFrequentExpenseCategory != null &&
                    this.MostFrequentExpenseCategory.Equals(input.MostFrequentExpenseCategory))
                ) && 
                (
                    this.TotalExpenseOnAirtimeAndData == input.TotalExpenseOnAirtimeAndData ||
                    this.TotalExpenseOnAirtimeAndData.Equals(input.TotalExpenseOnAirtimeAndData)
                ) && 
                (
                    this.TotalExpenseOnInternationalTransactions == input.TotalExpenseOnInternationalTransactions ||
                    this.TotalExpenseOnInternationalTransactions.Equals(input.TotalExpenseOnInternationalTransactions)
                ) && 
                (
                    this.TotalExpenseOnSavingsAndInvestments == input.TotalExpenseOnSavingsAndInvestments ||
                    this.TotalExpenseOnSavingsAndInvestments.Equals(input.TotalExpenseOnSavingsAndInvestments)
                ) && 
                (
                    this.TotalExpenseOnTransfer == input.TotalExpenseOnTransfer ||
                    this.TotalExpenseOnTransfer.Equals(input.TotalExpenseOnTransfer)
                ) && 
                (
                    this.TotalExpenseOnTransportation == input.TotalExpenseOnTransportation ||
                    this.TotalExpenseOnTransportation.Equals(input.TotalExpenseOnTransportation)
                ) && 
                (
                    this.TotalExpenseOnTravel == input.TotalExpenseOnTravel ||
                    this.TotalExpenseOnTravel.Equals(input.TotalExpenseOnTravel)
                ) && 
                (
                    this.TotalExpenseOnUSSD == input.TotalExpenseOnUSSD ||
                    this.TotalExpenseOnUSSD.Equals(input.TotalExpenseOnUSSD)
                ) && 
                (
                    this.TotalExpenseOnUtilities == input.TotalExpenseOnUtilities ||
                    this.TotalExpenseOnUtilities.Equals(input.TotalExpenseOnUtilities)
                ) && 
                (
                    this.TotalExpenseonChargesAndStampDuty == input.TotalExpenseonChargesAndStampDuty ||
                    this.TotalExpenseonChargesAndStampDuty.Equals(input.TotalExpenseonChargesAndStampDuty)
                ) && 
                (
                    this.TotalExpenseonEntertainment == input.TotalExpenseonEntertainment ||
                    this.TotalExpenseonEntertainment.Equals(input.TotalExpenseonEntertainment)
                ) && 
                (
                    this.TotalExpenseonGambling == input.TotalExpenseonGambling ||
                    this.TotalExpenseonGambling.Equals(input.TotalExpenseonGambling)
                ) && 
                (
                    this.TotalExpenseonHealth == input.TotalExpenseonHealth ||
                    this.TotalExpenseonHealth.Equals(input.TotalExpenseonHealth)
                ) && 
                (
                    this.TotalExpenseonHospitalityandFood == input.TotalExpenseonHospitalityandFood ||
                    this.TotalExpenseonHospitalityandFood.Equals(input.TotalExpenseonHospitalityandFood)
                ) && 
                (
                    this.TotalExpenseonInsurance == input.TotalExpenseonInsurance ||
                    this.TotalExpenseonInsurance.Equals(input.TotalExpenseonInsurance)
                ) && 
                (
                    this.TotalExpenseonOnlineandWeb == input.TotalExpenseonOnlineandWeb ||
                    this.TotalExpenseonOnlineandWeb.Equals(input.TotalExpenseonOnlineandWeb)
                ) && 
                (
                    this.TotalMonthlyExpenses == input.TotalMonthlyExpenses ||
                    this.TotalMonthlyExpenses.Equals(input.TotalMonthlyExpenses)
                ) && 
                (
                    this.TotalRecurringExpenses == input.TotalRecurringExpenses ||
                    this.TotalRecurringExpenses.Equals(input.TotalRecurringExpenses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaximumExpense != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumExpense.GetHashCode();
                }
                if (this.AtmLocations != null)
                {
                    hashCode = (hashCode * 59) + this.AtmLocations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnAirtimeandData.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnAtmAndPOS.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnChargesAndStampDuty.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnEntertainment.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnGambling.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnHealth.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnHospitalityandFood.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnInsurance.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnInternationalTransactions.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnOnlineandWeb.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnRent.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnSavingsAndInvestments.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnTransfer.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnTransportation.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnUSSD.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseOnUtilities.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyExpenseonTravel.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyRecurringExpenses.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageMonthlyTotalExpenses.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumSalary.GetHashCode();
                if (this.MonthWithmaximumExpense != null)
                {
                    hashCode = (hashCode * 59) + this.MonthWithmaximumExpense.GetHashCode();
                }
                if (this.MostFrequentExpense != null)
                {
                    hashCode = (hashCode * 59) + this.MostFrequentExpense.GetHashCode();
                }
                if (this.MostFrequentExpenseCategory != null)
                {
                    hashCode = (hashCode * 59) + this.MostFrequentExpenseCategory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalExpenseOnAirtimeAndData.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnInternationalTransactions.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnSavingsAndInvestments.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnTransfer.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnTransportation.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnTravel.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnUSSD.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseOnUtilities.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonChargesAndStampDuty.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonEntertainment.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonGambling.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonHealth.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonHospitalityandFood.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonInsurance.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExpenseonOnlineandWeb.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalMonthlyExpenses.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalRecurringExpenses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
