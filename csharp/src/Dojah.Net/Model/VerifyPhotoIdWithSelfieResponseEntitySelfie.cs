/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// VerifyPhotoIdWithSelfieResponseEntitySelfie
    /// </summary>
    [DataContract(Name = "VerifyPhotoIdWithSelfieResponse_entity_selfie")]
    public partial class VerifyPhotoIdWithSelfieResponseEntitySelfie : IEquatable<VerifyPhotoIdWithSelfieResponseEntitySelfie>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyPhotoIdWithSelfieResponseEntitySelfie" /> class.
        /// </summary>
        /// <param name="confidenceValue">confidenceValue.</param>
        /// <param name="match">match.</param>
        /// <param name="photoIdImageBlurry">photoIdImageBlurry.</param>
        /// <param name="selfieImageBlurry">selfieImageBlurry.</param>
        /// <param name="selfieGlare">selfieGlare.</param>
        /// <param name="photoIdGlare">photoIdGlare.</param>
        /// <param name="ageRange">ageRange.</param>
        /// <param name="sunglasses">sunglasses.</param>
        public VerifyPhotoIdWithSelfieResponseEntitySelfie(decimal confidenceValue = default(decimal), bool match = default(bool), bool photoIdImageBlurry = default(bool), bool selfieImageBlurry = default(bool), bool selfieGlare = default(bool), bool photoIdGlare = default(bool), string ageRange = default(string), bool sunglasses = default(bool))
        {
            this.ConfidenceValue = confidenceValue;
            this.Match = match;
            this.PhotoIdImageBlurry = photoIdImageBlurry;
            this.SelfieImageBlurry = selfieImageBlurry;
            this.SelfieGlare = selfieGlare;
            this.PhotoIdGlare = photoIdGlare;
            this.AgeRange = ageRange;
            this.Sunglasses = sunglasses;
        }

        /// <summary>
        /// Gets or Sets ConfidenceValue
        /// </summary>
        [DataMember(Name = "confidence_value", EmitDefaultValue = false)]
        public decimal ConfidenceValue { get; set; }

        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [DataMember(Name = "match", EmitDefaultValue = true)]
        public bool Match { get; set; }

        /// <summary>
        /// Gets or Sets PhotoIdImageBlurry
        /// </summary>
        [DataMember(Name = "photoId_image_blurry", EmitDefaultValue = true)]
        public bool PhotoIdImageBlurry { get; set; }

        /// <summary>
        /// Gets or Sets SelfieImageBlurry
        /// </summary>
        [DataMember(Name = "selfie_image_blurry", EmitDefaultValue = true)]
        public bool SelfieImageBlurry { get; set; }

        /// <summary>
        /// Gets or Sets SelfieGlare
        /// </summary>
        [DataMember(Name = "selfie_glare", EmitDefaultValue = true)]
        public bool SelfieGlare { get; set; }

        /// <summary>
        /// Gets or Sets PhotoIdGlare
        /// </summary>
        [DataMember(Name = "photoId_glare", EmitDefaultValue = true)]
        public bool PhotoIdGlare { get; set; }

        /// <summary>
        /// Gets or Sets AgeRange
        /// </summary>
        [DataMember(Name = "age_range", EmitDefaultValue = false)]
        public string AgeRange { get; set; }

        /// <summary>
        /// Gets or Sets Sunglasses
        /// </summary>
        [DataMember(Name = "sunglasses", EmitDefaultValue = true)]
        public bool Sunglasses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyPhotoIdWithSelfieResponseEntitySelfie {\n");
            sb.Append("  ConfidenceValue: ").Append(ConfidenceValue).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  PhotoIdImageBlurry: ").Append(PhotoIdImageBlurry).Append("\n");
            sb.Append("  SelfieImageBlurry: ").Append(SelfieImageBlurry).Append("\n");
            sb.Append("  SelfieGlare: ").Append(SelfieGlare).Append("\n");
            sb.Append("  PhotoIdGlare: ").Append(PhotoIdGlare).Append("\n");
            sb.Append("  AgeRange: ").Append(AgeRange).Append("\n");
            sb.Append("  Sunglasses: ").Append(Sunglasses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyPhotoIdWithSelfieResponseEntitySelfie);
        }

        /// <summary>
        /// Returns true if VerifyPhotoIdWithSelfieResponseEntitySelfie instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyPhotoIdWithSelfieResponseEntitySelfie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyPhotoIdWithSelfieResponseEntitySelfie input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConfidenceValue == input.ConfidenceValue ||
                    this.ConfidenceValue.Equals(input.ConfidenceValue)
                ) && 
                (
                    this.Match == input.Match ||
                    this.Match.Equals(input.Match)
                ) && 
                (
                    this.PhotoIdImageBlurry == input.PhotoIdImageBlurry ||
                    this.PhotoIdImageBlurry.Equals(input.PhotoIdImageBlurry)
                ) && 
                (
                    this.SelfieImageBlurry == input.SelfieImageBlurry ||
                    this.SelfieImageBlurry.Equals(input.SelfieImageBlurry)
                ) && 
                (
                    this.SelfieGlare == input.SelfieGlare ||
                    this.SelfieGlare.Equals(input.SelfieGlare)
                ) && 
                (
                    this.PhotoIdGlare == input.PhotoIdGlare ||
                    this.PhotoIdGlare.Equals(input.PhotoIdGlare)
                ) && 
                (
                    this.AgeRange == input.AgeRange ||
                    (this.AgeRange != null &&
                    this.AgeRange.Equals(input.AgeRange))
                ) && 
                (
                    this.Sunglasses == input.Sunglasses ||
                    this.Sunglasses.Equals(input.Sunglasses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ConfidenceValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Match.GetHashCode();
                hashCode = (hashCode * 59) + this.PhotoIdImageBlurry.GetHashCode();
                hashCode = (hashCode * 59) + this.SelfieImageBlurry.GetHashCode();
                hashCode = (hashCode * 59) + this.SelfieGlare.GetHashCode();
                hashCode = (hashCode * 59) + this.PhotoIdGlare.GetHashCode();
                if (this.AgeRange != null)
                {
                    hashCode = (hashCode * 59) + this.AgeRange.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sunglasses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
