/*
 * DOJAH APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetScreeningInfoResponseEntityResult
    /// </summary>
    [DataContract(Name = "GetScreeningInfoResponse_entity_result")]
    public partial class GetScreeningInfoResponseEntityResult : IEquatable<GetScreeningInfoResponseEntityResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetScreeningInfoResponseEntityResult" /> class.
        /// </summary>
        /// <param name="addresses">addresses.</param>
        /// <param name="aka">aka.</param>
        /// <param name="aliases">aliases.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="dob">dob.</param>
        /// <param name="dob2">dob2.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="entryCategory">entryCategory.</param>
        /// <param name="entryDesc">entryDesc.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="govDesignation">govDesignation.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="levelDesc">levelDesc.</param>
        /// <param name="masterId">masterId.</param>
        /// <param name="name">name.</param>
        /// <param name="nationalId">nationalId.</param>
        /// <param name="otherId">otherId.</param>
        /// <param name="passportId">passportId.</param>
        /// <param name="pob">pob.</param>
        /// <param name="positions">positions.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="primaryName">primaryName.</param>
        /// <param name="relatedId">relatedId.</param>
        /// <param name="relationships">relationships.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="sourceName">sourceName.</param>
        /// <param name="sourceWebLinks">sourceWebLinks.</param>
        /// <param name="subCatDesc">subCatDesc.</param>
        /// <param name="suffix">suffix.</param>
        /// <param name="touchDate">touchDate.</param>
        /// <param name="watch">watch.</param>
        public GetScreeningInfoResponseEntityResult(List<string> addresses = default(List<string>), string aka = default(string), List<string> aliases = default(List<string>), string countryName = default(string), string dob = default(string), string dob2 = default(string), string effectiveDate = default(string), string entryCategory = default(string), string entryDesc = default(string), string firstName = default(string), string govDesignation = default(string), string lastName = default(string), string levelDesc = default(string), decimal masterId = default(decimal), string name = default(string), string nationalId = default(string), string otherId = default(string), string passportId = default(string), string pob = default(string), string positions = default(string), string prefix = default(string), string primaryName = default(string), decimal relatedId = default(decimal), List<string> relationships = default(List<string>), string remarks = default(string), string sourceName = default(string), string sourceWebLinks = default(string), string subCatDesc = default(string), string suffix = default(string), string touchDate = default(string), bool watch = default(bool))
        {
            this.Addresses = addresses;
            this.Aka = aka;
            this.Aliases = aliases;
            this.CountryName = countryName;
            this.Dob = dob;
            this.Dob2 = dob2;
            this.EffectiveDate = effectiveDate;
            this.EntryCategory = entryCategory;
            this.EntryDesc = entryDesc;
            this.FirstName = firstName;
            this.GovDesignation = govDesignation;
            this.LastName = lastName;
            this.LevelDesc = levelDesc;
            this.MasterId = masterId;
            this.Name = name;
            this.NationalId = nationalId;
            this.OtherId = otherId;
            this.PassportId = passportId;
            this.Pob = pob;
            this.Positions = positions;
            this.Prefix = prefix;
            this.PrimaryName = primaryName;
            this.RelatedId = relatedId;
            this.Relationships = relationships;
            this.Remarks = remarks;
            this.SourceName = sourceName;
            this.SourceWebLinks = sourceWebLinks;
            this.SubCatDesc = subCatDesc;
            this.Suffix = suffix;
            this.TouchDate = touchDate;
            this.Watch = watch;
        }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Aka
        /// </summary>
        [DataMember(Name = "aka", EmitDefaultValue = false)]
        public string Aka { get; set; }

        /// <summary>
        /// Gets or Sets Aliases
        /// </summary>
        [DataMember(Name = "aliases", EmitDefaultValue = false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name = "countryName", EmitDefaultValue = false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name = "dob", EmitDefaultValue = false)]
        public string Dob { get; set; }

        /// <summary>
        /// Gets or Sets Dob2
        /// </summary>
        [DataMember(Name = "dob2", EmitDefaultValue = false)]
        public string Dob2 { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets EntryCategory
        /// </summary>
        [DataMember(Name = "entryCategory", EmitDefaultValue = false)]
        public string EntryCategory { get; set; }

        /// <summary>
        /// Gets or Sets EntryDesc
        /// </summary>
        [DataMember(Name = "entryDesc", EmitDefaultValue = false)]
        public string EntryDesc { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets GovDesignation
        /// </summary>
        [DataMember(Name = "govDesignation", EmitDefaultValue = false)]
        public string GovDesignation { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LevelDesc
        /// </summary>
        [DataMember(Name = "levelDesc", EmitDefaultValue = false)]
        public string LevelDesc { get; set; }

        /// <summary>
        /// Gets or Sets MasterId
        /// </summary>
        [DataMember(Name = "masterId", EmitDefaultValue = false)]
        public decimal MasterId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NationalId
        /// </summary>
        [DataMember(Name = "nationalId", EmitDefaultValue = false)]
        public string NationalId { get; set; }

        /// <summary>
        /// Gets or Sets OtherId
        /// </summary>
        [DataMember(Name = "otherId", EmitDefaultValue = false)]
        public string OtherId { get; set; }

        /// <summary>
        /// Gets or Sets PassportId
        /// </summary>
        [DataMember(Name = "passportId", EmitDefaultValue = false)]
        public string PassportId { get; set; }

        /// <summary>
        /// Gets or Sets Pob
        /// </summary>
        [DataMember(Name = "pob", EmitDefaultValue = false)]
        public string Pob { get; set; }

        /// <summary>
        /// Gets or Sets Positions
        /// </summary>
        [DataMember(Name = "positions", EmitDefaultValue = false)]
        public string Positions { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryName
        /// </summary>
        [DataMember(Name = "primaryName", EmitDefaultValue = false)]
        public string PrimaryName { get; set; }

        /// <summary>
        /// Gets or Sets RelatedId
        /// </summary>
        [DataMember(Name = "relatedId", EmitDefaultValue = false)]
        public decimal RelatedId { get; set; }

        /// <summary>
        /// Gets or Sets Relationships
        /// </summary>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<string> Relationships { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name = "remarks", EmitDefaultValue = false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets SourceName
        /// </summary>
        [DataMember(Name = "sourceName", EmitDefaultValue = false)]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or Sets SourceWebLinks
        /// </summary>
        [DataMember(Name = "sourceWebLinks", EmitDefaultValue = false)]
        public string SourceWebLinks { get; set; }

        /// <summary>
        /// Gets or Sets SubCatDesc
        /// </summary>
        [DataMember(Name = "subCatDesc", EmitDefaultValue = false)]
        public string SubCatDesc { get; set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Gets or Sets TouchDate
        /// </summary>
        [DataMember(Name = "touchDate", EmitDefaultValue = false)]
        public string TouchDate { get; set; }

        /// <summary>
        /// Gets or Sets Watch
        /// </summary>
        [DataMember(Name = "watch", EmitDefaultValue = true)]
        public bool Watch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetScreeningInfoResponseEntityResult {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Aka: ").Append(Aka).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Dob2: ").Append(Dob2).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EntryCategory: ").Append(EntryCategory).Append("\n");
            sb.Append("  EntryDesc: ").Append(EntryDesc).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GovDesignation: ").Append(GovDesignation).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LevelDesc: ").Append(LevelDesc).Append("\n");
            sb.Append("  MasterId: ").Append(MasterId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NationalId: ").Append(NationalId).Append("\n");
            sb.Append("  OtherId: ").Append(OtherId).Append("\n");
            sb.Append("  PassportId: ").Append(PassportId).Append("\n");
            sb.Append("  Pob: ").Append(Pob).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  PrimaryName: ").Append(PrimaryName).Append("\n");
            sb.Append("  RelatedId: ").Append(RelatedId).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceWebLinks: ").Append(SourceWebLinks).Append("\n");
            sb.Append("  SubCatDesc: ").Append(SubCatDesc).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  TouchDate: ").Append(TouchDate).Append("\n");
            sb.Append("  Watch: ").Append(Watch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetScreeningInfoResponseEntityResult);
        }

        /// <summary>
        /// Returns true if GetScreeningInfoResponseEntityResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetScreeningInfoResponseEntityResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetScreeningInfoResponseEntityResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Aka == input.Aka ||
                    (this.Aka != null &&
                    this.Aka.Equals(input.Aka))
                ) && 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    input.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Dob2 == input.Dob2 ||
                    (this.Dob2 != null &&
                    this.Dob2.Equals(input.Dob2))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.EntryCategory == input.EntryCategory ||
                    (this.EntryCategory != null &&
                    this.EntryCategory.Equals(input.EntryCategory))
                ) && 
                (
                    this.EntryDesc == input.EntryDesc ||
                    (this.EntryDesc != null &&
                    this.EntryDesc.Equals(input.EntryDesc))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GovDesignation == input.GovDesignation ||
                    (this.GovDesignation != null &&
                    this.GovDesignation.Equals(input.GovDesignation))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LevelDesc == input.LevelDesc ||
                    (this.LevelDesc != null &&
                    this.LevelDesc.Equals(input.LevelDesc))
                ) && 
                (
                    this.MasterId == input.MasterId ||
                    this.MasterId.Equals(input.MasterId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NationalId == input.NationalId ||
                    (this.NationalId != null &&
                    this.NationalId.Equals(input.NationalId))
                ) && 
                (
                    this.OtherId == input.OtherId ||
                    (this.OtherId != null &&
                    this.OtherId.Equals(input.OtherId))
                ) && 
                (
                    this.PassportId == input.PassportId ||
                    (this.PassportId != null &&
                    this.PassportId.Equals(input.PassportId))
                ) && 
                (
                    this.Pob == input.Pob ||
                    (this.Pob != null &&
                    this.Pob.Equals(input.Pob))
                ) && 
                (
                    this.Positions == input.Positions ||
                    (this.Positions != null &&
                    this.Positions.Equals(input.Positions))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.PrimaryName == input.PrimaryName ||
                    (this.PrimaryName != null &&
                    this.PrimaryName.Equals(input.PrimaryName))
                ) && 
                (
                    this.RelatedId == input.RelatedId ||
                    this.RelatedId.Equals(input.RelatedId)
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    input.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) && 
                (
                    this.SourceWebLinks == input.SourceWebLinks ||
                    (this.SourceWebLinks != null &&
                    this.SourceWebLinks.Equals(input.SourceWebLinks))
                ) && 
                (
                    this.SubCatDesc == input.SubCatDesc ||
                    (this.SubCatDesc != null &&
                    this.SubCatDesc.Equals(input.SubCatDesc))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.TouchDate == input.TouchDate ||
                    (this.TouchDate != null &&
                    this.TouchDate.Equals(input.TouchDate))
                ) && 
                (
                    this.Watch == input.Watch ||
                    this.Watch.Equals(input.Watch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.Aka != null)
                {
                    hashCode = (hashCode * 59) + this.Aka.GetHashCode();
                }
                if (this.Aliases != null)
                {
                    hashCode = (hashCode * 59) + this.Aliases.GetHashCode();
                }
                if (this.CountryName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryName.GetHashCode();
                }
                if (this.Dob != null)
                {
                    hashCode = (hashCode * 59) + this.Dob.GetHashCode();
                }
                if (this.Dob2 != null)
                {
                    hashCode = (hashCode * 59) + this.Dob2.GetHashCode();
                }
                if (this.EffectiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveDate.GetHashCode();
                }
                if (this.EntryCategory != null)
                {
                    hashCode = (hashCode * 59) + this.EntryCategory.GetHashCode();
                }
                if (this.EntryDesc != null)
                {
                    hashCode = (hashCode * 59) + this.EntryDesc.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.GovDesignation != null)
                {
                    hashCode = (hashCode * 59) + this.GovDesignation.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.LevelDesc != null)
                {
                    hashCode = (hashCode * 59) + this.LevelDesc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MasterId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NationalId != null)
                {
                    hashCode = (hashCode * 59) + this.NationalId.GetHashCode();
                }
                if (this.OtherId != null)
                {
                    hashCode = (hashCode * 59) + this.OtherId.GetHashCode();
                }
                if (this.PassportId != null)
                {
                    hashCode = (hashCode * 59) + this.PassportId.GetHashCode();
                }
                if (this.Pob != null)
                {
                    hashCode = (hashCode * 59) + this.Pob.GetHashCode();
                }
                if (this.Positions != null)
                {
                    hashCode = (hashCode * 59) + this.Positions.GetHashCode();
                }
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                if (this.PrimaryName != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RelatedId.GetHashCode();
                if (this.Relationships != null)
                {
                    hashCode = (hashCode * 59) + this.Relationships.GetHashCode();
                }
                if (this.Remarks != null)
                {
                    hashCode = (hashCode * 59) + this.Remarks.GetHashCode();
                }
                if (this.SourceName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceName.GetHashCode();
                }
                if (this.SourceWebLinks != null)
                {
                    hashCode = (hashCode * 59) + this.SourceWebLinks.GetHashCode();
                }
                if (this.SubCatDesc != null)
                {
                    hashCode = (hashCode * 59) + this.SubCatDesc.GetHashCode();
                }
                if (this.Suffix != null)
                {
                    hashCode = (hashCode * 59) + this.Suffix.GetHashCode();
                }
                if (this.TouchDate != null)
                {
                    hashCode = (hashCode * 59) + this.TouchDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Watch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
