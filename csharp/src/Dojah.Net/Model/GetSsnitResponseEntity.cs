/*
 * DOJAH Publilc APIs
 *
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dojah.Net.Client.OpenAPIDateConverter;

namespace Dojah.Net.Model
{
    /// <summary>
    /// GetSsnitResponseEntity
    /// </summary>
    [DataContract(Name = "GetSsnitResponse_entity")]
    public partial class GetSsnitResponseEntity : IEquatable<GetSsnitResponseEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSsnitResponseEntity" /> class.
        /// </summary>
        /// <param name="cardSerial">cardSerial.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="id">id.</param>
        /// <param name="isDateOfBirthMatch">isDateOfBirthMatch.</param>
        /// <param name="isFullNameMatch">isFullNameMatch.</param>
        /// <param name="picture">picture.</param>
        /// <param name="status">status.</param>
        public GetSsnitResponseEntity(string cardSerial = default(string), string dateOfBirth = default(string), string fullName = default(string), string gender = default(string), string id = default(string), bool isDateOfBirthMatch = default(bool), bool isFullNameMatch = default(bool), string picture = default(string), decimal status = default(decimal))
        {
            this.CardSerial = cardSerial;
            this.DateOfBirth = dateOfBirth;
            this.FullName = fullName;
            this.Gender = gender;
            this.Id = id;
            this.IsDateOfBirthMatch = isDateOfBirthMatch;
            this.IsFullNameMatch = isFullNameMatch;
            this.Picture = picture;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets CardSerial
        /// </summary>
        [DataMember(Name = "card_serial", EmitDefaultValue = false)]
        public string CardSerial { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "date_of_birth", EmitDefaultValue = false)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDateOfBirthMatch
        /// </summary>
        [DataMember(Name = "is_date_of_birth_match", EmitDefaultValue = true)]
        public bool IsDateOfBirthMatch { get; set; }

        /// <summary>
        /// Gets or Sets IsFullNameMatch
        /// </summary>
        [DataMember(Name = "is_full_name_match", EmitDefaultValue = true)]
        public bool IsFullNameMatch { get; set; }

        /// <summary>
        /// Gets or Sets Picture
        /// </summary>
        [DataMember(Name = "picture", EmitDefaultValue = false)]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public decimal Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSsnitResponseEntity {\n");
            sb.Append("  CardSerial: ").Append(CardSerial).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDateOfBirthMatch: ").Append(IsDateOfBirthMatch).Append("\n");
            sb.Append("  IsFullNameMatch: ").Append(IsFullNameMatch).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSsnitResponseEntity);
        }

        /// <summary>
        /// Returns true if GetSsnitResponseEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSsnitResponseEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSsnitResponseEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CardSerial == input.CardSerial ||
                    (this.CardSerial != null &&
                    this.CardSerial.Equals(input.CardSerial))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDateOfBirthMatch == input.IsDateOfBirthMatch ||
                    this.IsDateOfBirthMatch.Equals(input.IsDateOfBirthMatch)
                ) && 
                (
                    this.IsFullNameMatch == input.IsFullNameMatch ||
                    this.IsFullNameMatch.Equals(input.IsFullNameMatch)
                ) && 
                (
                    this.Picture == input.Picture ||
                    (this.Picture != null &&
                    this.Picture.Equals(input.Picture))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardSerial != null)
                {
                    hashCode = (hashCode * 59) + this.CardSerial.GetHashCode();
                }
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Gender != null)
                {
                    hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDateOfBirthMatch.GetHashCode();
                hashCode = (hashCode * 59) + this.IsFullNameMatch.GetHashCode();
                if (this.Picture != null)
                {
                    hashCode = (hashCode * 59) + this.Picture.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
