/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AnalyzeDocumentResponse
 */
export interface AnalyzeDocumentResponse {
    /**
     * 
     * @type {AnalyzeDocumentResponseEntity}
     * @memberof AnalyzeDocumentResponse
     */
    'entity'?: AnalyzeDocumentResponseEntity;
}
/**
 * 
 * @export
 * @interface AnalyzeDocumentResponseEntity
 */
export interface AnalyzeDocumentResponseEntity {
    /**
     * 
     * @type {AnalyzeDocumentResponseEntityStatus}
     * @memberof AnalyzeDocumentResponseEntity
     */
    'status'?: AnalyzeDocumentResponseEntityStatus;
    /**
     * 
     * @type {AnalyzeDocumentResponseEntityDocumentType}
     * @memberof AnalyzeDocumentResponseEntity
     */
    'document_type'?: AnalyzeDocumentResponseEntityDocumentType;
    /**
     * 
     * @type {AnalyzeDocumentResponseEntityDocumentImages}
     * @memberof AnalyzeDocumentResponseEntity
     */
    'document_images'?: AnalyzeDocumentResponseEntityDocumentImages;
    /**
     * 
     * @type {Array<AnalyzeDocumentResponseEntityTextDataInner>}
     * @memberof AnalyzeDocumentResponseEntity
     */
    'text_data'?: Array<AnalyzeDocumentResponseEntityTextDataInner>;
}
/**
 * 
 * @export
 * @interface AnalyzeDocumentResponseEntityDocumentImages
 */
export interface AnalyzeDocumentResponseEntityDocumentImages {
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentImages
     */
    'Portrait'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentImages
     */
    'Fingerprint'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentImages
     */
    'Document front side'?: string;
}
/**
 * 
 * @export
 * @interface AnalyzeDocumentResponseEntityDocumentType
 */
export interface AnalyzeDocumentResponseEntityDocumentType {
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentType
     */
    'document_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentType
     */
    'document_country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentType
     */
    'document_country_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof AnalyzeDocumentResponseEntityDocumentType
     */
    'document_type_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityDocumentType
     */
    'document_year'?: string;
}
/**
 * 
 * @export
 * @interface AnalyzeDocumentResponseEntityStatus
 */
export interface AnalyzeDocumentResponseEntityStatus {
    /**
     * 
     * @type {number}
     * @memberof AnalyzeDocumentResponseEntityStatus
     */
    'overall_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityStatus
     */
    'document_images'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityStatus
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityStatus
     */
    'document_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityStatus
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface AnalyzeDocumentResponseEntityTextDataInner
 */
export interface AnalyzeDocumentResponseEntityTextDataInner {
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityTextDataInner
     */
    'field_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof AnalyzeDocumentResponseEntityTextDataInner
     */
    'field_type'?: number;
    /**
     * 
     * @type {number}
     * @memberof AnalyzeDocumentResponseEntityTextDataInner
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof AnalyzeDocumentResponseEntityTextDataInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CategorizeTransactionsResponse
 */
export interface CategorizeTransactionsResponse {
    /**
     * 
     * @type {CategorizeTransactionsResponseEntity}
     * @memberof CategorizeTransactionsResponse
     */
    'entity'?: CategorizeTransactionsResponseEntity;
}
/**
 * 
 * @export
 * @interface CategorizeTransactionsResponseEntity
 */
export interface CategorizeTransactionsResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'sub_category'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'service_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'is_subscription'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'service_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategorizeTransactionsResponseEntity
     */
    'mode_of_payment'?: string;
}
/**
 * 
 * @export
 * @interface CollectStatusFromPdfResponse
 */
export interface CollectStatusFromPdfResponse {
    /**
     * 
     * @type {CollectTransactionsResponseEntity}
     * @memberof CollectStatusFromPdfResponse
     */
    'entity'?: CollectTransactionsResponseEntity;
}
/**
 * 
 * @export
 * @interface CollectTransactionsResponse
 */
export interface CollectTransactionsResponse {
    /**
     * 
     * @type {string}
     * @memberof CollectTransactionsResponse
     */
    'message'?: string;
    /**
     * 
     * @type {CollectTransactionsResponseEntity}
     * @memberof CollectTransactionsResponse
     */
    'entity'?: CollectTransactionsResponseEntity;
}
/**
 * 
 * @export
 * @interface CollectTransactionsResponseEntity
 */
export interface CollectTransactionsResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof CollectTransactionsResponseEntity
     */
    'account_id'?: string;
}
/**
 * 
 * @export
 * @interface CreateWalletResponse
 */
export interface CreateWalletResponse {
    /**
     * 
     * @type {CreateWalletResponseEntity}
     * @memberof CreateWalletResponse
     */
    'entity'?: CreateWalletResponseEntity;
}
/**
 * 
 * @export
 * @interface CreateWalletResponseEntity
 */
export interface CreateWalletResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof CreateWalletResponseEntity
     */
    'wallet_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateWalletResponseEntity
     */
    'wallet_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWalletResponseEntity
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWalletResponseEntity
     */
    'phone_number'?: string;
}
/**
 * 
 * @export
 * @interface CreditSubwalletResponse
 */
export interface CreditSubwalletResponse {
    /**
     * 
     * @type {CreditSubwalletResponseEntity}
     * @memberof CreditSubwalletResponse
     */
    'entity'?: CreditSubwalletResponseEntity;
}
/**
 * 
 * @export
 * @interface CreditSubwalletResponseEntity
 */
export interface CreditSubwalletResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'wallet_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'recipient_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'sender_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_reason'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'transaction_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditSubwalletResponseEntity
     */
    'date_created'?: string;
}
/**
 * 
 * @export
 * @interface DeleteWebhookResponse
 */
export interface DeleteWebhookResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteWebhookResponse
     */
    'entity'?: string;
}
/**
 * 
 * @export
 * @interface FinancialGetBasicBvnResponse
 */
export interface FinancialGetBasicBvnResponse {
    /**
     * 
     * @type {FinancialGetBasicBvnResponseEntity}
     * @memberof FinancialGetBasicBvnResponse
     */
    'entity'?: FinancialGetBasicBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface FinancialGetBasicBvnResponseEntity
 */
export interface FinancialGetBasicBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'formatted_dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetBasicBvnResponseEntity
     */
    'bvn'?: string;
}
/**
 * 
 * @export
 * @interface FinancialGetFullBvnResponse
 */
export interface FinancialGetFullBvnResponse {
    /**
     * 
     * @type {FinancialGetFullBvnResponseEntity}
     * @memberof FinancialGetFullBvnResponse
     */
    'entity'?: FinancialGetFullBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface FinancialGetFullBvnResponseEntity
 */
export interface FinancialGetFullBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'enrollment_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'enrollment_branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'level_of_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'lga_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'lga_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'marital_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'name_on_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'phone_number1'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'phone_number2'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'registration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'residential_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'state_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'state_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialGetFullBvnResponseEntity
     */
    'watch_listed'?: string;
}
/**
 * 
 * @export
 * @interface GeneralGetNubanResponse
 */
export interface GeneralGetNubanResponse {
    /**
     * 
     * @type {GeneralGetNubanResponseEntity}
     * @memberof GeneralGetNubanResponse
     */
    'entity'?: GeneralGetNubanResponseEntity;
}
/**
 * 
 * @export
 * @interface GeneralGetNubanResponseEntity
 */
export interface GeneralGetNubanResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GeneralGetNubanResponseEntity
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralGetNubanResponseEntity
     */
    'account_name'?: string;
}
/**
 * 
 * @export
 * @interface GeneralGetWalletBalanceResponse
 */
export interface GeneralGetWalletBalanceResponse {
    /**
     * 
     * @type {GetWalletBalanceResponseEntity}
     * @memberof GeneralGetWalletBalanceResponse
     */
    'entity'?: GetWalletBalanceResponseEntity;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponse
 */
export interface GetAccountAnalysisResponse {
    /**
     * 
     * @type {GetAccountAnalysisResponseEntity}
     * @memberof GetAccountAnalysisResponse
     */
    'entity'?: GetAccountAnalysisResponseEntity;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntity
 */
export interface GetAccountAnalysisResponseEntity {
    /**
     * 
     * @type {GetAccountAnalysisResponseEntityAccountBreakdown}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'accountBreakdown'?: GetAccountAnalysisResponseEntityAccountBreakdown;
    /**
     * 
     * @type {GetAccountAnalysisResponseEntityExpenseBreakdown}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'expenseBreakdown'?: GetAccountAnalysisResponseEntityExpenseBreakdown;
    /**
     * 
     * @type {GetAccountAnalysisResponseEntityFundsManagement}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'fundsManagement'?: GetAccountAnalysisResponseEntityFundsManagement;
    /**
     * 
     * @type {GetAccountAnalysisResponseEntityInflowBreakdown}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'inflowBreakdown'?: GetAccountAnalysisResponseEntityInflowBreakdown;
    /**
     * 
     * @type {GetAccountAnalysisResponseEntityTransactionRoutineBreakdown}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'transactionRoutineBreakdown'?: GetAccountAnalysisResponseEntityTransactionRoutineBreakdown;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntityAccountBreakdown
 */
export interface GetAccountAnalysisResponseEntityAccountBreakdown {
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'TotalCreditEntry'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'TotalDebitMade'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageMonthlyBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageMonthlyCredits'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageMonthlyDebits'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageWeeklyBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageWeeklyCredits'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'averageWeeklyDebits'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'closingBalance'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'firstDateInStatement'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'lastDateInStatement'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'numberOfTransactingMonths'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'periodInStatement'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityAccountBreakdown
     */
    'yearInStatement'?: string;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntityExpenseBreakdown
 */
export interface GetAccountAnalysisResponseEntityExpenseBreakdown {
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'MaximumExpense'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'atmLocations'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnAirtimeandData'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnAtmAndPOS'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnChargesAndStampDuty'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnEntertainment'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnGambling'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnHealth'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnHospitalityandFood'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnInsurance'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnInternationalTransactions'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnOnlineandWeb'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnRent'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnSavingsAndInvestments'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnTransfer'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnTransportation'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnUSSD'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseOnUtilities'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyExpenseonTravel'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyRecurringExpenses'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'averageMonthlyTotalExpenses'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'minimumSalary'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'monthWithmaximumExpense'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'mostFrequentExpense'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'mostFrequentExpenseCategory'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnAirtimeAndData'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnInternationalTransactions'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnSavingsAndInvestments'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnTransfer'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnTransportation'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnTravel'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnUSSD'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseOnUtilities'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonChargesAndStampDuty'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonEntertainment'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonGambling'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonHealth'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonHospitalityandFood'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonInsurance'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalExpenseonOnlineandWeb'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalMonthlyExpenses'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityExpenseBreakdown
     */
    'totalRecurringExpenses'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntityFundsManagement
 */
export interface GetAccountAnalysisResponseEntityFundsManagement {
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'accountActivity'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'accountSweep'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'averageMonthlyLoanAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'averageMonthlyLoanRepaymentAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'gamblingRate'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'gamblingStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'loanInflowAmount'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'loanRepaymentToInflowAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'monthToMonthInflowToOutflowAmount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'numberOfCreditLoanTransactions'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'numberOfDebitRepaymentTransactions'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'overallInflowToOutflowAmount'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'percentOfInflowIrregularity'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'totalLoanAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityFundsManagement
     */
    'totalLoanRepaymentAmount'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntityInflowBreakdown
 */
export interface GetAccountAnalysisResponseEntityInflowBreakdown {
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'AdditionalIncome'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'RecurringSalaryPayments'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'aSalaryEarner'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'averageAdditionalIncome'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'averageGuaranteedSalary'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'estimatedSalaryPaymentDay'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'lastDateOfSalaryPayment'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'minimumSalary'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'netAverageMonthlySalary'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'numberOfAdditionalIncomePayments'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityInflowBreakdown
     */
    'totalnumberOfSalaryPayments'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
 */
export interface GetAccountAnalysisResponseEntityTransactionRoutineBreakdown {
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'MaximumExpense'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'lastCreditReceived'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'lastDebitMade'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'mostFrequentBalanceRange'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'mostFrequentTransactionRange'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'numberOfCardRequests'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentNumberOfDaysBalanceWasLessThan10ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentNumberOfDaysTransactionsWasLessThan10ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfBalancesBetween100ThousandTo500ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfBalancesBetween10ThousandTo100ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfBalancesBetween500ThousandToOneMillionNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfBalancesGreaterThanOneMillionNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfBalancesLessThan10ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfTransactionsBetween100ThousandTo500ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfTransactionsBetween10ThousandTo100ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfTransactionsBetween500ThousandToOneMillionNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfTransactionsGreaterThanOneMillionNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentOfTransactionsLessThan10ThousandNaira'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentofCreditTransactions'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'percentofDebitTransactions'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAnalysisResponseEntityTransactionRoutineBreakdown
     */
    'totalAmountOfTransactions'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'account_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'account_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountResponse
     */
    'balance'?: string;
}
/**
 * 
 * @export
 * @interface GetAccountSubscriptionsResponse
 */
export interface GetAccountSubscriptionsResponse {
    /**
     * 
     * @type {GetAccountSubscriptionsResponseEntity}
     * @memberof GetAccountSubscriptionsResponse
     */
    'entity'?: GetAccountSubscriptionsResponseEntity;
}
/**
 * 
 * @export
 * @interface GetAccountSubscriptionsResponseEntity
 */
export interface GetAccountSubscriptionsResponseEntity {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'subscriptions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'total'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'previous_page'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'next_page'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'total_pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountSubscriptionsResponseEntity
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountTransactionsResponse
 */
export interface GetAccountTransactionsResponse {
    /**
     * 
     * @type {GetAccountTransactionsResponseEntity}
     * @memberof GetAccountTransactionsResponse
     */
    'entity'?: GetAccountTransactionsResponseEntity;
}
/**
 * 
 * @export
 * @interface GetAccountTransactionsResponseEntity
 */
export interface GetAccountTransactionsResponseEntity {
    /**
     * 
     * @type {Array<GetAccountTransactionsResponseEntityTransactionsInner>}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'transactions'?: Array<GetAccountTransactionsResponseEntityTransactionsInner>;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'total'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'previous_page'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'next_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'total_pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsResponseEntity
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface GetAccountTransactionsResponseEntityTransactionsInner
 */
export interface GetAccountTransactionsResponseEntityTransactionsInner {
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'value_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'trans_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsResponseEntityTransactionsInner
     */
    'narration'?: string;
}
/**
 * 
 * @export
 * @interface GetAdvancedCacResponse
 */
export interface GetAdvancedCacResponse {
    /**
     * 
     * @type {GetBasicCacResponseEntity}
     * @memberof GetAdvancedCacResponse
     */
    'entity'?: GetBasicCacResponseEntity;
}
/**
 * 
 * @export
 * @interface GetBanksResponse
 */
export interface GetBanksResponse {
    /**
     * 
     * @type {Array<GetBanksResponseEntityInner>}
     * @memberof GetBanksResponse
     */
    'entity'?: Array<GetBanksResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface GetBanksResponseEntityInner
 */
export interface GetBanksResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'longcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'gateway'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBanksResponseEntityInner
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface GetBasicBvnResponse
 */
export interface GetBasicBvnResponse {
    /**
     * 
     * @type {GetBasicBvnResponseEntity}
     * @memberof GetBasicBvnResponse
     */
    'entity'?: GetBasicBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface GetBasicBvnResponseEntity
 */
export interface GetBasicBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'formatted_dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicBvnResponseEntity
     */
    'bvn'?: string;
}
/**
 * 
 * @export
 * @interface GetBasicCacResponse
 */
export interface GetBasicCacResponse {
    /**
     * 
     * @type {GetBasicCacResponseEntity}
     * @memberof GetBasicCacResponse
     */
    'entity'?: GetBasicCacResponseEntity;
}
/**
 * 
 * @export
 * @interface GetBasicCacResponseEntity
 */
export interface GetBasicCacResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetBasicCacResponseEntity
     */
    'rc_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicCacResponseEntity
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicCacResponseEntity
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicCacResponseEntity
     */
    'date_of_registration'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicCacResponseEntity
     */
    'type_of_company'?: string;
}
/**
 * 
 * @export
 * @interface GetBasicPhoneNumberResponse
 */
export interface GetBasicPhoneNumberResponse {
    /**
     * 
     * @type {GetBasicPhoneNumberResponseEntity}
     * @memberof GetBasicPhoneNumberResponse
     */
    'entity'?: GetBasicPhoneNumberResponseEntity;
}
/**
 * 
 * @export
 * @interface GetBasicPhoneNumberResponseEntity
 */
export interface GetBasicPhoneNumberResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'msisdn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'encryptedPan'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'address_city'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'address_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'bank_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBasicPhoneNumberResponseEntity
     */
    'gender'?: string;
}
/**
 * 
 * @export
 * @interface GetBinResponse
 */
export interface GetBinResponse {
    /**
     * 
     * @type {GetBinResponseEntity}
     * @memberof GetBinResponse
     */
    'entity'?: GetBinResponseEntity;
}
/**
 * 
 * @export
 * @interface GetBinResponseEntity
 */
export interface GetBinResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'bin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'sub_brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'country_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'card_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBinResponseEntity
     */
    'bank'?: string;
}
/**
 * 
 * @export
 * @interface GetCacResponse
 */
export interface GetCacResponse {
    /**
     * 
     * @type {GetCacResponseEntity}
     * @memberof GetCacResponse
     */
    'entity'?: GetCacResponseEntity;
}
/**
 * 
 * @export
 * @interface GetCacResponseEntity
 */
export interface GetCacResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetCacResponseEntity
     */
    'rc_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCacResponseEntity
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCacResponseEntity
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCacResponseEntity
     */
    'date_of_registration'?: string;
}
/**
 * 
 * @export
 * @interface GetDataPlansResponse
 */
export interface GetDataPlansResponse {
    /**
     * 
     * @type {Array<PurchaseDataResponseEntityInner>}
     * @memberof GetDataPlansResponse
     */
    'entity'?: Array<PurchaseDataResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface GetDocumentAnalysisResponse
 */
export interface GetDocumentAnalysisResponse {
    /**
     * 
     * @type {GetDocumentAnalysisResponseEntity}
     * @memberof GetDocumentAnalysisResponse
     */
    'entity'?: GetDocumentAnalysisResponseEntity;
}
/**
 * 
 * @export
 * @interface GetDocumentAnalysisResponseEntity
 */
export interface GetDocumentAnalysisResponseEntity {
    /**
     * 
     * @type {GetDocumentAnalysisResponseEntityData}
     * @memberof GetDocumentAnalysisResponseEntity
     */
    'data'?: GetDocumentAnalysisResponseEntityData;
}
/**
 * 
 * @export
 * @interface GetDocumentAnalysisResponseEntityData
 */
export interface GetDocumentAnalysisResponseEntityData {
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'ADDRESS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'CITY_IN_ADDRESS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'CLASS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'COUNTY'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'DATE_OF_BIRTH'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'DATE_OF_ISSUE'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'DOCUMENT_NUMBER'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'ENDORSEMENTS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'EXPIRATION_DATE'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'FIRST_NAME'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'ID_TYPE'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'LAST_NAME'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'MIDDLE_NAME'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'PLACE_OF_BIRTH'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'RESTRICTIONS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'STATE_IN_ADDRESS'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'STATE_NAME'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'SUFFIX'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'VETERAN'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDocumentAnalysisResponseEntityData
     */
    'ZIP_CODE_IN_ADDRESS'?: string;
}
/**
 * 
 * @export
 * @interface GetDriversLicenseResponse
 */
export interface GetDriversLicenseResponse {
    /**
     * 
     * @type {GetDriversLicenseResponseEntity}
     * @memberof GetDriversLicenseResponse
     */
    'entity'?: GetDriversLicenseResponseEntity;
}
/**
 * 
 * @export
 * @interface GetDriversLicenseResponseEntity
 */
export interface GetDriversLicenseResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'certificate_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'expiry_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetDriversLicenseResponseEntity
     */
    'is_date_of_birth_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetDriversLicenseResponseEntity
     */
    'is_full_name_match'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'issue_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDriversLicenseResponseEntity
     */
    'processing_center'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetDriversLicenseResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetEarningStructureResponse
 */
export interface GetEarningStructureResponse {
    /**
     * 
     * @type {GetEarningStructureResponseEntity}
     * @memberof GetEarningStructureResponse
     */
    'entity'?: GetEarningStructureResponseEntity;
}
/**
 * 
 * @export
 * @interface GetEarningStructureResponseEntity
 */
export interface GetEarningStructureResponseEntity {
    /**
     * 
     * @type {number}
     * @memberof GetEarningStructureResponseEntity
     */
    'average_monthly_income'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetEarningStructureResponseEntity
     */
    'salary_earner'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEarningStructureResponseEntity
     */
    'consistent'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetEarningStructureResponseEntity
     */
    'number_of_days'?: number;
}
/**
 * 
 * @export
 * @interface GetEmailReputationResponse
 */
export interface GetEmailReputationResponse {
    /**
     * 
     * @type {GetEmailReputationResponseEntity}
     * @memberof GetEmailReputationResponse
     */
    'entity'?: GetEmailReputationResponseEntity;
}
/**
 * 
 * @export
 * @interface GetEmailReputationResponseEntity
 */
export interface GetEmailReputationResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntity
     */
    'reputation'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntity
     */
    'suspicious'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetEmailReputationResponseEntity
     */
    'references'?: number;
    /**
     * 
     * @type {GetEmailReputationResponseEntityDetails}
     * @memberof GetEmailReputationResponseEntity
     */
    'details'?: GetEmailReputationResponseEntityDetails;
}
/**
 * 
 * @export
 * @interface GetEmailReputationResponseEntityDetails
 */
export interface GetEmailReputationResponseEntityDetails {
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'blacklisted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'malicious_activity'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'malicious_activity_recent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'credentials_leaked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'credentials_leaked_recent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'data_breach'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'first_seen'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'last_seen'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'domain_exists'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'domain_reputation'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'new_domain'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'days_since_domain_creation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'suspicious_tld'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'spam'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'free_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'disposable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'deliverable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'accept_all'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'valid_mx'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'primary_mx'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'spoofable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'spf_strict'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'dmarc_enforced'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetEmailReputationResponseEntityDetails
     */
    'profiles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetFullBvnResponse
 */
export interface GetFullBvnResponse {
    /**
     * 
     * @type {GetFullBvnResponseEntity}
     * @memberof GetFullBvnResponse
     */
    'entity'?: GetFullBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface GetFullBvnResponseEntity
 */
export interface GetFullBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'enrollment_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'enrollment_branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'level_of_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'lga_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'lga_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'marital_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'name_on_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'phone_number1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'phone_number2'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'registration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'residential_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'state_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'state_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFullBvnResponseEntity
     */
    'watch_listed'?: string;
}
/**
 * 
 * @export
 * @interface GetGenericOcrTextResponse
 */
export interface GetGenericOcrTextResponse {
    /**
     * 
     * @type {GetOcrTextResponseEntity}
     * @memberof GetGenericOcrTextResponse
     */
    'entity'?: GetOcrTextResponseEntity;
}
/**
 * 
 * @export
 * @interface GetKycDriversLicenseResponse
 */
export interface GetKycDriversLicenseResponse {
    /**
     * 
     * @type {GetKycDriversLicenseResponseEntity}
     * @memberof GetKycDriversLicenseResponse
     */
    'entity'?: GetKycDriversLicenseResponseEntity;
}
/**
 * 
 * @export
 * @interface GetKycDriversLicenseResponseEntity
 */
export interface GetKycDriversLicenseResponseEntity {
    /**
     * 
     * @type {GetKycDriversLicenseResponseEntityPersonalDetails}
     * @memberof GetKycDriversLicenseResponseEntity
     */
    'personal_details'?: GetKycDriversLicenseResponseEntityPersonalDetails;
}
/**
 * 
 * @export
 * @interface GetKycDriversLicenseResponseEntityPersonalDetails
 */
export interface GetKycDriversLicenseResponseEntityPersonalDetails {
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'othername'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'mother_maiden_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'blood_group_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'facial_mark'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'glasses'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'universaltax_identity_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'nin_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'lga'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'is_disability'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycDriversLicenseResponseEntityPersonalDetails
     */
    'disability_reason'?: string;
}
/**
 * 
 * @export
 * @interface GetKycPassportResponse
 */
export interface GetKycPassportResponse {
    /**
     * 
     * @type {GetKycPassportResponseEntity}
     * @memberof GetKycPassportResponse
     */
    'entity'?: GetKycPassportResponseEntity;
}
/**
 * 
 * @export
 * @interface GetKycPassportResponseEntity
 */
export interface GetKycPassportResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'passport_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'date_of_issue'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'expiry_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'document_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'issue_place'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'other_names'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetKycPassportResponseEntity
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GetNationalIdResponse
 */
export interface GetNationalIdResponse {
    /**
     * 
     * @type {GetNationalIdResponseEntity}
     * @memberof GetNationalIdResponse
     */
    'entity'?: GetNationalIdResponseEntity;
}
/**
 * 
 * @export
 * @interface GetNationalIdResponseEntity
 */
export interface GetNationalIdResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetNationalIdResponseEntity
     */
    'is_date_of_birth_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNationalIdResponseEntity
     */
    'is_first_name_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNationalIdResponseEntity
     */
    'is_gender_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNationalIdResponseEntity
     */
    'is_last_name_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNationalIdResponseEntity
     */
    'is_middle_name_match'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNationalIdResponseEntity
     */
    'middle_name'?: string;
}
/**
 * 
 * @export
 * @interface GetNubanResponse
 */
export interface GetNubanResponse {
    /**
     * 
     * @type {GetNubanResponseEntity}
     * @memberof GetNubanResponse
     */
    'entity'?: GetNubanResponseEntity;
}
/**
 * 
 * @export
 * @interface GetNubanResponseEntity
 */
export interface GetNubanResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'account_currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'account_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'account_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'address_1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'address_2'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'country_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'country_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'country_of_issue'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'expiry_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'identity_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'identity_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'other_names'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'postal_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNubanResponseEntity
     */
    'state_code'?: string;
}
/**
 * 
 * @export
 * @interface GetOcrTextResponse
 */
export interface GetOcrTextResponse {
    /**
     * 
     * @type {GetOcrTextResponseEntity}
     * @memberof GetOcrTextResponse
     */
    'entity'?: GetOcrTextResponseEntity;
}
/**
 * 
 * @export
 * @interface GetOcrTextResponseEntity
 */
export interface GetOcrTextResponseEntity {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetOcrTextResponseEntity
     */
    'data'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetPassportResponse
 */
export interface GetPassportResponse {
    /**
     * 
     * @type {GetPassportResponseEntity}
     * @memberof GetPassportResponse
     */
    'entity'?: GetPassportResponseEntity;
}
/**
 * 
 * @export
 * @interface GetPassportResponseEntity
 */
export interface GetPassportResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'expiry_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPassportResponseEntity
     */
    'is_date_of_birth_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetPassportResponseEntity
     */
    'is_first_name_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetPassportResponseEntity
     */
    'is_last_name_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetPassportResponseEntity
     */
    'is_middle_name_match'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'issue_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'place_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPassportResponseEntity
     */
    'place_of_issue'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPassportResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetPhoneNumber404Response
 */
export interface GetPhoneNumber404Response {
    /**
     * 
     * @type {GetPhoneNumberResponseEntity}
     * @memberof GetPhoneNumber404Response
     */
    'entity'?: GetPhoneNumberResponseEntity;
}
/**
 * 
 * @export
 * @interface GetPhoneNumberResponse
 */
export interface GetPhoneNumberResponse {
    /**
     * 
     * @type {GetPhoneNumberResponseEntity}
     * @memberof GetPhoneNumberResponse
     */
    'entity'?: GetPhoneNumberResponseEntity;
}
/**
 * 
 * @export
 * @interface GetPhoneNumberResponseEntity
 */
export interface GetPhoneNumberResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'msisdn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'maritalStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'birthLga'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'birthState'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'educationalLevel'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'emplymentStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'nspokenLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'ospokenlang'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'profession'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'religion'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'residenceAddressLine1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'residenceTown'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'residenceLga'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'residenceState'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'residenceStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'selfOriginLga'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'selfOriginPlace'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'selfOriginState'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'lga'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPhoneNumberResponseEntity
     */
    'picture'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPhoneNumberResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetPremiumBvnResponse
 */
export interface GetPremiumBvnResponse {
    /**
     * 
     * @type {GetPremiumBvnResponseEntity}
     * @memberof GetPremiumBvnResponse
     */
    'entity'?: GetPremiumBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface GetPremiumBvnResponseEntity
 */
export interface GetPremiumBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'enrollment_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'enrollment_branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'level_of_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'lga_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'lga_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'marital_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'name_on_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'phone_number1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'phone_number2'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'registration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'residential_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'state_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'state_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPremiumBvnResponseEntity
     */
    'watch_listed'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetPremiumBvnResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetScreeningInfoResponse
 */
export interface GetScreeningInfoResponse {
    /**
     * 
     * @type {GetScreeningInfoResponseEntity}
     * @memberof GetScreeningInfoResponse
     */
    'entity'?: GetScreeningInfoResponseEntity;
}
/**
 * 
 * @export
 * @interface GetScreeningInfoResponseEntity
 */
export interface GetScreeningInfoResponseEntity {
    /**
     * 
     * @type {GetScreeningInfoResponseEntityResult}
     * @memberof GetScreeningInfoResponseEntity
     */
    'result'?: GetScreeningInfoResponseEntityResult;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntity
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface GetScreeningInfoResponseEntityResult
 */
export interface GetScreeningInfoResponseEntityResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'addresses'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'aka'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'aliases'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'countryName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'dob2'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'effectiveDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'entryCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'entryDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'govDesignation'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'levelDesc'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'masterId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'nationalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'otherId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'passportId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'pob'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'positions'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'prefix'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'primaryName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'relatedId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'relationships'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'sourceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'sourceWebLinks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'subCatDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'suffix'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'touchDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetScreeningInfoResponseEntityResult
     */
    'watch'?: boolean;
}
/**
 * 
 * @export
 * @interface GetSenderIdResponse
 */
export interface GetSenderIdResponse {
    /**
     * 
     * @type {Array<GetSenderIdResponseEntityInner>}
     * @memberof GetSenderIdResponse
     */
    'entity'?: Array<GetSenderIdResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface GetSenderIdResponseEntityInner
 */
export interface GetSenderIdResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof GetSenderIdResponseEntityInner
     */
    'sender_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSenderIdResponseEntityInner
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetSenderIdResponseEntityInner
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface GetSmsStatusResponse
 */
export interface GetSmsStatusResponse {
    /**
     * 
     * @type {GetSmsStatusResponseEntity}
     * @memberof GetSmsStatusResponse
     */
    'entity'?: GetSmsStatusResponseEntity;
}
/**
 * 
 * @export
 * @interface GetSmsStatusResponseEntity
 */
export interface GetSmsStatusResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetSmsStatusResponseEntity
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponse
 */
export interface GetSpendingPatternResponse {
    /**
     * 
     * @type {GetSpendingPatternResponseEntity}
     * @memberof GetSpendingPatternResponse
     */
    'entity'?: GetSpendingPatternResponseEntity;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntity
 */
export interface GetSpendingPatternResponseEntity {
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPattern}
     * @memberof GetSpendingPatternResponseEntity
     */
    'pattern'?: GetSpendingPatternResponseEntityPattern;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPattern
 */
export interface GetSpendingPatternResponseEntityPattern {
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPatternOthers}
     * @memberof GetSpendingPatternResponseEntityPattern
     */
    'Others'?: GetSpendingPatternResponseEntityPatternOthers;
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPatternFood}
     * @memberof GetSpendingPatternResponseEntityPattern
     */
    'Food'?: GetSpendingPatternResponseEntityPatternFood;
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPatternAirtimeData}
     * @memberof GetSpendingPatternResponseEntityPattern
     */
    'Airtime/Data'?: GetSpendingPatternResponseEntityPatternAirtimeData;
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPatternBankTransfer}
     * @memberof GetSpendingPatternResponseEntityPattern
     */
    'Bank Transfer'?: GetSpendingPatternResponseEntityPatternBankTransfer;
    /**
     * 
     * @type {GetSpendingPatternResponseEntityPatternCharges}
     * @memberof GetSpendingPatternResponseEntityPattern
     */
    'Charges'?: GetSpendingPatternResponseEntityPatternCharges;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPatternAirtimeData
 */
export interface GetSpendingPatternResponseEntityPatternAirtimeData {
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternAirtimeData
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternAirtimeData
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternAirtimeData
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPatternBankTransfer
 */
export interface GetSpendingPatternResponseEntityPatternBankTransfer {
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternBankTransfer
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternBankTransfer
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternBankTransfer
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPatternCharges
 */
export interface GetSpendingPatternResponseEntityPatternCharges {
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternCharges
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternCharges
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternCharges
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPatternFood
 */
export interface GetSpendingPatternResponseEntityPatternFood {
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternFood
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternFood
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternFood
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface GetSpendingPatternResponseEntityPatternOthers
 */
export interface GetSpendingPatternResponseEntityPatternOthers {
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternOthers
     */
    'sum'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternOthers
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSpendingPatternResponseEntityPatternOthers
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface GetSsnitResponse
 */
export interface GetSsnitResponse {
    /**
     * 
     * @type {GetSsnitResponseEntity}
     * @memberof GetSsnitResponse
     */
    'entity'?: GetSsnitResponseEntity;
}
/**
 * 
 * @export
 * @interface GetSsnitResponseEntity
 */
export interface GetSsnitResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'card_serial'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSsnitResponseEntity
     */
    'is_date_of_birth_match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetSsnitResponseEntity
     */
    'is_full_name_match'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetSsnitResponseEntity
     */
    'picture'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetSsnitResponseEntity
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface GetTinResponse
 */
export interface GetTinResponse {
    /**
     * 
     * @type {GetTinResponseEntity}
     * @memberof GetTinResponse
     */
    'entity'?: GetTinResponseEntity;
}
/**
 * 
 * @export
 * @interface GetTinResponseEntity
 */
export interface GetTinResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'Search'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'Taxpayer_Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'CAC_Reg_No'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'FIRSTIN'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'JITTIN'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'Tax_Office'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'Phone_No'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTinResponseEntity
     */
    'Email'?: string;
}
/**
 * 
 * @export
 * @interface GetTransactionResponse
 */
export interface GetTransactionResponse {
    /**
     * 
     * @type {GetTransactionResponseEntity}
     * @memberof GetTransactionResponse
     */
    'entity'?: GetTransactionResponseEntity;
}
/**
 * 
 * @export
 * @interface GetTransactionResponseEntity
 */
export interface GetTransactionResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'wallet_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'recipient_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'sender_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_reason'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'transaction_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTransactionResponseEntity
     */
    'date_created'?: string;
}
/**
 * 
 * @export
 * @interface GetVinResponse
 */
export interface GetVinResponse {
    /**
     * 
     * @type {GetVinResponseEntity}
     * @memberof GetVinResponse
     */
    'entity'?: GetVinResponseEntity;
}
/**
 * 
 * @export
 * @interface GetVinResponseEntity
 */
export interface GetVinResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'voter_identification_number:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'gender:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'occupation:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'time_of_registration:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'state:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'local_government:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'registration_area_ward:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'polling_unit:'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVinResponseEntity
     */
    'polling_unit_code'?: string;
}
/**
 * 
 * @export
 * @interface GetVninResponse
 */
export interface GetVninResponse {
    /**
     * 
     * @type {GetVninResponseEntity}
     * @memberof GetVninResponse
     */
    'entity'?: GetVninResponseEntity;
}
/**
 * 
 * @export
 * @interface GetVninResponseEntity
 */
export interface GetVninResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'vnin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'middlename'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVninResponseEntity
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GetVoterResponse
 */
export interface GetVoterResponse {
    /**
     * 
     * @type {GetVoterResponseEntity}
     * @memberof GetVoterResponse
     */
    'entity': GetVoterResponseEntity;
}
/**
 * 
 * @export
 * @interface GetVoterResponseEntity
 */
export interface GetVoterResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'voter_number': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'village': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'district': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'constituency': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'sub_county': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'parish': string;
    /**
     * 
     * @type {string}
     * @memberof GetVoterResponseEntity
     */
    'polling_station': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetVoterResponseEntity
     */
    'is_first_name_match': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetVoterResponseEntity
     */
    'is_last_name_match': boolean;
}
/**
 * 
 * @export
 * @interface GetWalletBalanceResponse
 */
export interface GetWalletBalanceResponse {
    /**
     * 
     * @type {GetWalletBalanceResponseEntity}
     * @memberof GetWalletBalanceResponse
     */
    'entity'?: GetWalletBalanceResponseEntity;
}
/**
 * 
 * @export
 * @interface GetWalletBalanceResponseEntity
 */
export interface GetWalletBalanceResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetWalletBalanceResponseEntity
     */
    'wallet_balance'?: string;
}
/**
 * 
 * @export
 * @interface GetWalletResponse
 */
export interface GetWalletResponse {
    /**
     * 
     * @type {GetWalletResponseEntity}
     * @memberof GetWalletResponse
     */
    'entity'?: GetWalletResponseEntity;
}
/**
 * 
 * @export
 * @interface GetWalletResponseEntity
 */
export interface GetWalletResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetWalletResponseEntity
     */
    'wallet_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetWalletResponseEntity
     */
    'wallet_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetWalletResponseEntity
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWalletResponseEntity
     */
    'phone_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWalletResponseEntity
     */
    'bank_name'?: string;
}
/**
 * 
 * @export
 * @interface GetWalletsResponse
 */
export interface GetWalletsResponse {
    /**
     * 
     * @type {GetWalletsResponseEntity}
     * @memberof GetWalletsResponse
     */
    'entity'?: GetWalletsResponseEntity;
}
/**
 * 
 * @export
 * @interface GetWalletsResponseEntity
 */
export interface GetWalletsResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof GetWalletsResponseEntity
     */
    'app_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetWalletsResponseEntity
     */
    'total_amount'?: number;
    /**
     * 
     * @type {Array<GetWalletResponseEntity>}
     * @memberof GetWalletsResponseEntity
     */
    'client_wallets'?: Array<GetWalletResponseEntity>;
}
/**
 * 
 * @export
 * @interface GetWebhooksResponse
 */
export interface GetWebhooksResponse {
    /**
     * 
     * @type {Array<GetWebhooksResponseEntityInner>}
     * @memberof GetWebhooksResponse
     */
    'entity'?: Array<GetWebhooksResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface GetWebhooksResponseEntityInner
 */
export interface GetWebhooksResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'app_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'endpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'environment'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'service'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'confirmation_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'date_created'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWebhooksResponseEntityInner
     */
    'date_updated'?: string;
}
/**
 * 
 * @export
 * @interface NotifyWebhookResponse
 */
export interface NotifyWebhookResponse {
    /**
     * 
     * @type {string}
     * @memberof NotifyWebhookResponse
     */
    'entity'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseAirtimeResponse
 */
export interface PurchaseAirtimeResponse {
    /**
     * 
     * @type {PurchaseAirtimeResponseEntity}
     * @memberof PurchaseAirtimeResponse
     */
    'entity'?: PurchaseAirtimeResponseEntity;
}
/**
 * 
 * @export
 * @interface PurchaseAirtimeResponseEntity
 */
export interface PurchaseAirtimeResponseEntity {
    /**
     * 
     * @type {Array<PurchaseAirtimeResponseEntityDataInner>}
     * @memberof PurchaseAirtimeResponseEntity
     */
    'data'?: Array<PurchaseAirtimeResponseEntityDataInner>;
    /**
     * 
     * @type {string}
     * @memberof PurchaseAirtimeResponseEntity
     */
    'reference_id'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseAirtimeResponseEntityDataInner
 */
export interface PurchaseAirtimeResponseEntityDataInner {
    /**
     * 
     * @type {string}
     * @memberof PurchaseAirtimeResponseEntityDataInner
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseAirtimeResponseEntityDataInner
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseDataResponse
 */
export interface PurchaseDataResponse {
    /**
     * 
     * @type {Array<PurchaseDataResponseEntityInner>}
     * @memberof PurchaseDataResponse
     */
    'entity'?: Array<PurchaseDataResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface PurchaseDataResponseEntityInner
 */
export interface PurchaseDataResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof PurchaseDataResponseEntityInner
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseDataResponseEntityInner
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDataResponseEntityInner
     */
    'plan'?: string;
}
/**
 * 
 * @export
 * @interface RequestSenderIdResponse
 */
export interface RequestSenderIdResponse {
    /**
     * 
     * @type {Array<RequestSenderIdResponseEntityInner>}
     * @memberof RequestSenderIdResponse
     */
    'entity'?: Array<RequestSenderIdResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface RequestSenderIdResponseEntityInner
 */
export interface RequestSenderIdResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof RequestSenderIdResponseEntityInner
     */
    'sender_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestSenderIdResponseEntityInner
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RequestSenderIdResponseEntityInner
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface ScreenAmlResponse
 */
export interface ScreenAmlResponse {
    /**
     * 
     * @type {ScreenAmlResponseEntity}
     * @memberof ScreenAmlResponse
     */
    'entity'?: ScreenAmlResponseEntity;
}
/**
 * 
 * @export
 * @interface ScreenAmlResponseEntity
 */
export interface ScreenAmlResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof ScreenAmlResponseEntity
     */
    'reference_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenAmlResponseEntity
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface SendOtpResponse
 */
export interface SendOtpResponse {
    /**
     * 
     * @type {Array<SendOtpResponseEntityInner>}
     * @memberof SendOtpResponse
     */
    'entity'?: Array<SendOtpResponseEntityInner>;
}
/**
 * 
 * @export
 * @interface SendOtpResponseEntityInner
 */
export interface SendOtpResponseEntityInner {
    /**
     * 
     * @type {string}
     * @memberof SendOtpResponseEntityInner
     */
    'reference_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendOtpResponseEntityInner
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendOtpResponseEntityInner
     */
    'status_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendOtpResponseEntityInner
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface SendSmsResponse
 */
export interface SendSmsResponse {
    /**
     * 
     * @type {SendSmsResponseEntity}
     * @memberof SendSmsResponse
     */
    'entity'?: SendSmsResponseEntity;
}
/**
 * 
 * @export
 * @interface SendSmsResponseEntity
 */
export interface SendSmsResponseEntity {
    /**
     * 
     * @type {boolean}
     * @memberof SendSmsResponseEntity
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SendSmsResponseEntity
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendSmsResponseEntity
     */
    'message_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendSmsResponseEntity
     */
    'batch_id'?: string;
}
/**
 * 
 * @export
 * @interface SubscribeServiceResponse
 */
export interface SubscribeServiceResponse {
    /**
     * 
     * @type {string}
     * @memberof SubscribeServiceResponse
     */
    'entity'?: string;
}
/**
 * 
 * @export
 * @interface TransferFundsResponse
 */
export interface TransferFundsResponse {
    /**
     * 
     * @type {TransferFundsResponseEntity}
     * @memberof TransferFundsResponse
     */
    'entity'?: TransferFundsResponseEntity;
}
/**
 * 
 * @export
 * @interface TransferFundsResponseEntity
 */
export interface TransferFundsResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'wallet_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'recipient_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'sender_account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_remarks'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_reason'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'transaction_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferFundsResponseEntity
     */
    'date_created'?: string;
}
/**
 * 
 * @export
 * @interface ValidateBvnResponse
 */
export interface ValidateBvnResponse {
    /**
     * 
     * @type {ValidateBvnResponseEntity}
     * @memberof ValidateBvnResponse
     */
    'entity'?: ValidateBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface ValidateBvnResponseEntity
 */
export interface ValidateBvnResponseEntity {
    /**
     * 
     * @type {ValidateBvnResponseEntityBvn}
     * @memberof ValidateBvnResponseEntity
     */
    'bvn'?: ValidateBvnResponseEntityBvn;
    /**
     * 
     * @type {ValidateBvnResponseEntityFirstName}
     * @memberof ValidateBvnResponseEntity
     */
    'first_name'?: ValidateBvnResponseEntityFirstName;
}
/**
 * 
 * @export
 * @interface ValidateBvnResponseEntityBvn
 */
export interface ValidateBvnResponseEntityBvn {
    /**
     * 
     * @type {string}
     * @memberof ValidateBvnResponseEntityBvn
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ValidateBvnResponseEntityBvn
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface ValidateBvnResponseEntityFirstName
 */
export interface ValidateBvnResponseEntityFirstName {
    /**
     * 
     * @type {number}
     * @memberof ValidateBvnResponseEntityFirstName
     */
    'confidence_value'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ValidateBvnResponseEntityFirstName
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface ValidateOtpResponse
 */
export interface ValidateOtpResponse {
    /**
     * 
     * @type {ValidateOtpResponseEntity}
     * @memberof ValidateOtpResponse
     */
    'entity'?: ValidateOtpResponseEntity;
}
/**
 * 
 * @export
 * @interface ValidateOtpResponseEntity
 */
export interface ValidateOtpResponseEntity {
    /**
     * 
     * @type {boolean}
     * @memberof ValidateOtpResponseEntity
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifyAgeResponse
 */
export interface VerifyAgeResponse {
    /**
     * 
     * @type {VerifyAgeResponseEntity}
     * @memberof VerifyAgeResponse
     */
    'entity'?: VerifyAgeResponseEntity;
}
/**
 * 
 * @export
 * @interface VerifyAgeResponseEntity
 */
export interface VerifyAgeResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof VerifyAgeResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyAgeResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyAgeResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyAgeResponseEntity
     */
    'verification'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifyPhotoIdWithSelfieResponse
 */
export interface VerifyPhotoIdWithSelfieResponse {
    /**
     * 
     * @type {VerifyPhotoIdWithSelfieResponseEntity}
     * @memberof VerifyPhotoIdWithSelfieResponse
     */
    'entity'?: VerifyPhotoIdWithSelfieResponseEntity;
}
/**
 * 
 * @export
 * @interface VerifyPhotoIdWithSelfieResponseEntity
 */
export interface VerifyPhotoIdWithSelfieResponseEntity {
    /**
     * 
     * @type {VerifyPhotoIdWithSelfieResponseEntitySelfie}
     * @memberof VerifyPhotoIdWithSelfieResponseEntity
     */
    'selfie'?: VerifyPhotoIdWithSelfieResponseEntitySelfie;
}
/**
 * 
 * @export
 * @interface VerifyPhotoIdWithSelfieResponseEntitySelfie
 */
export interface VerifyPhotoIdWithSelfieResponseEntitySelfie {
    /**
     * 
     * @type {number}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'confidence_value'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'match'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'photoId_image_blurry'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'selfie_image_blurry'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'selfie_glare'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'photoId_glare'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'age_range'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoIdWithSelfieResponseEntitySelfie
     */
    'sunglasses'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifySelfieBvnResponse
 */
export interface VerifySelfieBvnResponse {
    /**
     * 
     * @type {VerifySelfieBvnResponseEntity}
     * @memberof VerifySelfieBvnResponse
     */
    'entity'?: VerifySelfieBvnResponseEntity;
}
/**
 * 
 * @export
 * @interface VerifySelfieBvnResponseEntity
 */
export interface VerifySelfieBvnResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'bvn'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'date_of_birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'phone_number1'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'phone_number2'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'enrollment_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'enrollment_branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'lga_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'lga_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'marital_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'name_on_card'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'residential_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'state_of_origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'state_of_residence'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'watch_listed'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'level_of_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'registration_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'image'?: string;
    /**
     * 
     * @type {VerifySelfieBvnResponseEntitySelfieVerification}
     * @memberof VerifySelfieBvnResponseEntity
     */
    'selfie_verification'?: VerifySelfieBvnResponseEntitySelfieVerification;
}
/**
 * 
 * @export
 * @interface VerifySelfieBvnResponseEntitySelfieVerification
 */
export interface VerifySelfieBvnResponseEntitySelfieVerification {
    /**
     * 
     * @type {number}
     * @memberof VerifySelfieBvnResponseEntitySelfieVerification
     */
    'confidence_value'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof VerifySelfieBvnResponseEntitySelfieVerification
     */
    'match'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifySelfieNinResponse
 */
export interface VerifySelfieNinResponse {
    /**
     * 
     * @type {VerifySelfieNinResponseEntity}
     * @memberof VerifySelfieNinResponse
     */
    'entity'?: VerifySelfieNinResponseEntity;
}
/**
 * 
 * @export
 * @interface VerifySelfieNinResponseEntity
 */
export interface VerifySelfieNinResponseEntity {
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nin'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'middlename'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'maidenname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'telephoneno'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'profession'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'birthstate'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'birthcountry'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'centralID'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'documentno'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'educationallevel'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'employmentstatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_middlename'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_lga'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_town'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nok_postalcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'othername'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'pfirstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'pmiddlename'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'psurname'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nspokenlang'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'ospokenlang'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'religion'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residence_Town'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residence_lga'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residence_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residencestatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residence_AddressLine1'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'residence_AddressLine2'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'self_origin_lga'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'self_origin_place'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'self_origin_state'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'signature'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifySelfieNinResponseEntity
     */
    'trackingId'?: string;
    /**
     * 
     * @type {VerifySelfieNinResponseEntitySelfieVerification}
     * @memberof VerifySelfieNinResponseEntity
     */
    'selfie_verification'?: VerifySelfieNinResponseEntitySelfieVerification;
}
/**
 * 
 * @export
 * @interface VerifySelfieNinResponseEntitySelfieVerification
 */
export interface VerifySelfieNinResponseEntitySelfieVerification {
    /**
     * 
     * @type {number}
     * @memberof VerifySelfieNinResponseEntitySelfieVerification
     */
    'confidence_value'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof VerifySelfieNinResponseEntitySelfieVerification
     */
    'match'?: boolean;
}

/**
 * AMLApi - axios parameter creator
 * @export
 */
export const AMLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {string} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningInfo: async (referenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/aml/screening/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (referenceId !== undefined) {
                localVarQueryParameter['reference_id'] = referenceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AML Screening
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenAml: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/aml/screening`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AMLApi - functional programming interface
 * @export
 */
export const AMLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AMLApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {string} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreeningInfo(referenceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScreeningInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreeningInfo(referenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AML Screening
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenAml(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenAmlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenAml(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AMLApi - factory interface
 * @export
 */
export const AMLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AMLApiFp(configuration)
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {string} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningInfo(referenceId?: string, options?: any): AxiosPromise<GetScreeningInfoResponse> {
            return localVarFp.getScreeningInfo(referenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AML Screening
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenAml(body?: object, options?: any): AxiosPromise<ScreenAmlResponse> {
            return localVarFp.screenAml(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AMLApi - object-oriented interface
 * @export
 * @class AMLApi
 * @extends {BaseAPI}
 */
export class AMLApi extends BaseAPI {
    /**
     * 
     * @summary Get AML Info
     * @param {string} [referenceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AMLApi
     */
    public getScreeningInfo(referenceId?: string, options?: AxiosRequestConfig) {
        return AMLApiFp(this.configuration).getScreeningInfo(referenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AML Screening
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AMLApi
     */
    public screenAml(body?: object, options?: AxiosRequestConfig) {
        return AMLApiFp(this.configuration).screenAml(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Messaging - Get Sender IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSenderId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/messaging/sender_ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Messaging - Get SMS Status
         * @param {string} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsStatus: async (messageId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/messaging/sms/get_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['message_id'] = messageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Messaging - Request Sender ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSenderId: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/messaging/sender_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Messaging - Send OTP
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/messaging/otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Messaging - Send SMS
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSms: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/messaging/sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Messaging - Validate OTP
         * @param {string} [referenceId] 
         * @param {number} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOtp: async (referenceId?: string, code?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/messaging/otp/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (referenceId !== undefined) {
                localVarQueryParameter['reference_id'] = referenceId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Messaging - Get Sender IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSenderId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSenderIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSenderId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Messaging - Get SMS Status
         * @param {string} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSmsStatus(messageId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSmsStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSmsStatus(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Messaging - Request Sender ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSenderId(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSenderIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSenderId(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Messaging - Send OTP
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOtp(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendOtp(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Messaging - Send SMS
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSms(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendSmsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSms(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Messaging - Validate OTP
         * @param {string} [referenceId] 
         * @param {number} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOtp(referenceId?: string, code?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateOtpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateOtp(referenceId, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Messaging - Get Sender IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSenderId(options?: any): AxiosPromise<GetSenderIdResponse> {
            return localVarFp.getSenderId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Messaging - Get SMS Status
         * @param {string} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSmsStatus(messageId?: string, options?: any): AxiosPromise<GetSmsStatusResponse> {
            return localVarFp.getSmsStatus(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Messaging - Request Sender ID
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSenderId(body?: object, options?: any): AxiosPromise<RequestSenderIdResponse> {
            return localVarFp.requestSenderId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Messaging - Send OTP
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp(body?: object, options?: any): AxiosPromise<SendOtpResponse> {
            return localVarFp.sendOtp(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Messaging - Send SMS
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSms(body?: object, options?: any): AxiosPromise<SendSmsResponse> {
            return localVarFp.sendSms(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Messaging - Validate OTP
         * @param {string} [referenceId] 
         * @param {number} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOtp(referenceId?: string, code?: number, options?: any): AxiosPromise<ValidateOtpResponse> {
            return localVarFp.validateOtp(referenceId, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Messaging - Get Sender IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getSenderId(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getSenderId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Messaging - Get SMS Status
     * @param {string} [messageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getSmsStatus(messageId?: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getSmsStatus(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Messaging - Request Sender ID
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public requestSenderId(body?: object, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).requestSenderId(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Messaging - Send OTP
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public sendOtp(body?: object, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).sendOtp(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Messaging - Send SMS
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public sendSms(body?: object, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).sendSms(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Messaging - Validate OTP
     * @param {string} [referenceId] 
     * @param {number} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public validateOtp(referenceId?: string, code?: number, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).validateOtp(referenceId, code, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FinancialApi - axios parameter creator
 * @export
 */
export const FinancialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {File} [statement] 
         * @param {number} [bankCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectStatusFromPdf: async (statement?: File, bankCode?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/transactions/pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


            if (statement !== undefined) { 
                localVarFormParams.append('statement', statement as any);
            }
    
            if (bankCode !== undefined) { 
                localVarFormParams.append('bank_code', bankCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/account_information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAnalysis: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSubscriptions: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/account_subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {string} [accountId] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions: async (accountId?: string, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/account_transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/bvn_information/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningStructure: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/earning_structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/bvn_information/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingPattern: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/spending_pattern`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinancialApi - functional programming interface
 * @export
 */
export const FinancialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FinancialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {File} [statement] 
         * @param {number} [bankCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectStatusFromPdf(statement?: File, bankCode?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectStatusFromPdfResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectStatusFromPdf(statement, bankCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectTransactions(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectTransactions(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountAnalysis(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountAnalysisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountAnalysis(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountSubscriptions(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountSubscriptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountSubscriptions(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {string} [accountId] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountTransactions(accountId?: string, length?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountTransactions(accountId, length, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialGetBasicBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEarningStructure(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEarningStructureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEarningStructure(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullBvn(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialGetFullBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullBvn(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpendingPattern(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSpendingPatternResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpendingPattern(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FinancialApi - factory interface
 * @export
 */
export const FinancialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FinancialApiFp(configuration)
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {File} [statement] 
         * @param {number} [bankCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectStatusFromPdf(statement?: File, bankCode?: number, options?: any): AxiosPromise<CollectStatusFromPdfResponse> {
            return localVarFp.collectStatusFromPdf(statement, bankCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions(body?: object, options?: any): AxiosPromise<CollectTransactionsResponse> {
            return localVarFp.collectTransactions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId?: string, options?: any): AxiosPromise<GetAccountResponse> {
            return localVarFp.getAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAnalysis(options?: any): AxiosPromise<GetAccountAnalysisResponse> {
            return localVarFp.getAccountAnalysis(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSubscriptions(accountId?: string, options?: any): AxiosPromise<GetAccountSubscriptionsResponse> {
            return localVarFp.getAccountSubscriptions(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {string} [accountId] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(accountId?: string, length?: number, options?: any): AxiosPromise<GetAccountTransactionsResponse> {
            return localVarFp.getAccountTransactions(accountId, length, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn(accountId?: string, options?: any): AxiosPromise<FinancialGetBasicBvnResponse> {
            return localVarFp.getBasicBvn(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningStructure(accountId?: string, options?: any): AxiosPromise<GetEarningStructureResponse> {
            return localVarFp.getEarningStructure(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn(accountId?: string, options?: any): AxiosPromise<FinancialGetFullBvnResponse> {
            return localVarFp.getFullBvn(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingPattern(accountId?: string, options?: any): AxiosPromise<GetSpendingPatternResponse> {
            return localVarFp.getSpendingPattern(accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FinancialApi - object-oriented interface
 * @export
 * @class FinancialApi
 * @extends {BaseAPI}
 */
export class FinancialApi extends BaseAPI {
    /**
     * 
     * @summary Collect Status via PDF Statement
     * @param {File} [statement] 
     * @param {number} [bankCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public collectStatusFromPdf(statement?: File, bankCode?: number, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).collectStatusFromPdf(statement, bankCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Collect Transactions
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public collectTransactions(body?: object, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).collectTransactions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * /services/@app_id/account/@account_id
     * @summary Get Account Information
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccount(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountAnalysis(options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountAnalysis(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Subscriptions
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountSubscriptions(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountSubscriptions(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Transactions
     * @param {string} [accountId] 
     * @param {number} [length] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountTransactions(accountId?: string, length?: number, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountTransactions(accountId, length, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BVN Information Basic
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getBasicBvn(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getBasicBvn(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Earning Structure
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getEarningStructure(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getEarningStructure(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BVN Information Full
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getFullBvn(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getFullBvn(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Spending Pattern
     * @param {string} [accountId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getSpendingPattern(accountId?: string, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getSpendingPattern(accountId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GHKYCApi - axios parameter creator
 * @export
 */
export const GHKYCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Driver\'s License
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense: async (id?: string, fullName?: string, dateOfBirth?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gh/kyc/dl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['full_name'] = fullName;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['date_of_birth'] = dateOfBirth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Passport
         * @param {string} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport: async (id?: string, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gh/kyc/passport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middle_name'] = middleName;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['date_of_birth'] = dateOfBirth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SSNIT
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsnit: async (id?: string, fullName?: string, dateOfBirth?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gh/kyc/ssnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['full_name'] = fullName;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['date_of_birth'] = dateOfBirth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GHKYCApi - functional programming interface
 * @export
 */
export const GHKYCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GHKYCApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Driver\'s License
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriversLicense(id?: string, fullName?: string, dateOfBirth?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDriversLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriversLicense(id, fullName, dateOfBirth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Passport
         * @param {string} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPassport(id?: string, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPassportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPassport(id, firstName, lastName, middleName, dateOfBirth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SSNIT
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSsnit(id?: string, fullName?: string, dateOfBirth?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSsnitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSsnit(id, fullName, dateOfBirth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GHKYCApi - factory interface
 * @export
 */
export const GHKYCApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GHKYCApiFp(configuration)
    return {
        /**
         * 
         * @summary Driver\'s License
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense(id?: string, fullName?: string, dateOfBirth?: string, options?: any): AxiosPromise<GetDriversLicenseResponse> {
            return localVarFp.getDriversLicense(id, fullName, dateOfBirth, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Passport
         * @param {string} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport(id?: string, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, options?: any): AxiosPromise<GetPassportResponse> {
            return localVarFp.getPassport(id, firstName, lastName, middleName, dateOfBirth, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SSNIT
         * @param {string} [id] 
         * @param {string} [fullName] 
         * @param {string} [dateOfBirth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsnit(id?: string, fullName?: string, dateOfBirth?: string, options?: any): AxiosPromise<GetSsnitResponse> {
            return localVarFp.getSsnit(id, fullName, dateOfBirth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GHKYCApi - object-oriented interface
 * @export
 * @class GHKYCApi
 * @extends {BaseAPI}
 */
export class GHKYCApi extends BaseAPI {
    /**
     * 
     * @summary Driver\'s License
     * @param {string} [id] 
     * @param {string} [fullName] 
     * @param {string} [dateOfBirth] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GHKYCApi
     */
    public getDriversLicense(id?: string, fullName?: string, dateOfBirth?: string, options?: AxiosRequestConfig) {
        return GHKYCApiFp(this.configuration).getDriversLicense(id, fullName, dateOfBirth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Passport
     * @param {string} [id] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [middleName] 
     * @param {string} [dateOfBirth] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GHKYCApi
     */
    public getPassport(id?: string, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, options?: AxiosRequestConfig) {
        return GHKYCApiFp(this.configuration).getPassport(id, firstName, lastName, middleName, dateOfBirth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SSNIT
     * @param {string} [id] 
     * @param {string} [fullName] 
     * @param {string} [dateOfBirth] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GHKYCApi
     */
    public getSsnit(id?: string, fullName?: string, dateOfBirth?: string, options?: AxiosRequestConfig) {
        return GHKYCApiFp(this.configuration).getSsnit(id, fullName, dateOfBirth, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {number} [cardBin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBin: async (cardBin?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/bin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (cardBin !== undefined) {
                localVarQueryParameter['card_bin'] = cardBin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataPlans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/data/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban: async (bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAirtime: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/airtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseData: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBanks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBanksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBanks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {number} [cardBin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBin(cardBin?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBin(cardBin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataPlans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDataPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataPlans(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNuban(bankCode?: number, accountNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralGetNubanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNuban(bankCode, accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWalletBalance(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWalletBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseAirtime(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseAirtimeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseAirtime(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseData(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseData(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks(options?: any): AxiosPromise<GetBanksResponse> {
            return localVarFp.getBanks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {number} [cardBin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBin(cardBin?: number, options?: any): AxiosPromise<GetBinResponse> {
            return localVarFp.getBin(cardBin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataPlans(options?: any): AxiosPromise<GetDataPlansResponse> {
            return localVarFp.getDataPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban(bankCode?: number, accountNumber?: number, options?: any): AxiosPromise<GeneralGetNubanResponse> {
            return localVarFp.getNuban(bankCode, accountNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance(options?: any): AxiosPromise<GetWalletBalanceResponse> {
            return localVarFp.getWalletBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAirtime(body?: object, options?: any): AxiosPromise<PurchaseAirtimeResponse> {
            return localVarFp.purchaseAirtime(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseData(body?: object, options?: any): AxiosPromise<PurchaseDataResponse> {
            return localVarFp.purchaseData(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * 
     * @summary General - Get Banks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getBanks(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getBanks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary General Resolve BIN
     * @param {number} [cardBin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getBin(cardBin?: number, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getBin(cardBin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Get Data Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getDataPlans(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getDataPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary General Resolve NUBAN
     * @param {number} [bankCode] 
     * @param {number} [accountNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getNuban(bankCode?: number, accountNumber?: number, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getNuban(bankCode, accountNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Dojah Wallet Balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getWalletBalance(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getWalletBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Send Airtime
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public purchaseAirtime(body?: object, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).purchaseAirtime(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Buy Data
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public purchaseData(body?: object, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).purchaseData(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KEKYCApi - axios parameter creator
 * @export
 */
export const KEKYCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {string} [gender] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNationalId: async (id?: number, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, gender?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ke/kyc/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middle_name'] = middleName;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['date_of_birth'] = dateOfBirth;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KEKYCApi - functional programming interface
 * @export
 */
export const KEKYCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KEKYCApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {string} [gender] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNationalId(id?: number, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, gender?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNationalIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNationalId(id, firstName, lastName, middleName, dateOfBirth, gender, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KEKYCApi - factory interface
 * @export
 */
export const KEKYCApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KEKYCApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {string} [gender] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNationalId(id?: number, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, gender?: string, options?: any): AxiosPromise<GetNationalIdResponse> {
            return localVarFp.getNationalId(id, firstName, lastName, middleName, dateOfBirth, gender, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KEKYCApi - object-oriented interface
 * @export
 * @class KEKYCApi
 * @extends {BaseAPI}
 */
export class KEKYCApi extends BaseAPI {
    /**
     * 
     * @summary KYC - National ID
     * @param {number} [id] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [middleName] 
     * @param {string} [dateOfBirth] 
     * @param {string} [gender] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KEKYCApi
     */
    public getNationalId(id?: number, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, gender?: string, options?: AxiosRequestConfig) {
        return KEKYCApiFp(this.configuration).getNationalId(id, firstName, lastName, middleName, dateOfBirth, gender, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KYBApi - axios parameter creator
 * @export
 */
export const KYBApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {string} [_class] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedCac: async (rc?: number, type?: string, _class?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (rc !== undefined) {
                localVarQueryParameter['rc'] = rc;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (_class !== undefined) {
                localVarQueryParameter['class'] = _class;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicCac: async (rc?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (rc !== undefined) {
                localVarQueryParameter['rc'] = rc;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {number} [rcNumber] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCac: async (rcNumber?: number, companyName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (rcNumber !== undefined) {
                localVarQueryParameter['rc_number'] = rcNumber;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {string} [tin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTin: async (tin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/tin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (tin !== undefined) {
                localVarQueryParameter['tin'] = tin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KYBApi - functional programming interface
 * @export
 */
export const KYBApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KYBApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {string} [_class] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvancedCac(rc?: number, type?: string, _class?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdvancedCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvancedCac(rc, type, _class, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicCac(rc?: number, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicCac(rc, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {number} [rcNumber] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCac(rcNumber?: number, companyName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCac(rcNumber, companyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {string} [tin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTin(tin?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTin(tin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KYBApi - factory interface
 * @export
 */
export const KYBApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KYBApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {string} [_class] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedCac(rc?: number, type?: string, _class?: string, options?: any): AxiosPromise<GetAdvancedCacResponse> {
            return localVarFp.getAdvancedCac(rc, type, _class, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicCac(rc?: number, type?: string, options?: any): AxiosPromise<GetBasicCacResponse> {
            return localVarFp.getBasicCac(rc, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {number} [rcNumber] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCac(rcNumber?: number, companyName?: string, options?: any): AxiosPromise<GetCacResponse> {
            return localVarFp.getCac(rcNumber, companyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {string} [tin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTin(tin?: string, options?: any): AxiosPromise<GetTinResponse> {
            return localVarFp.getTin(tin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KYBApi - object-oriented interface
 * @export
 * @class KYBApi
 * @extends {BaseAPI}
 */
export class KYBApi extends BaseAPI {
    /**
     * 
     * @summary KYC - Get CAC Advanced
     * @param {number} [rc] 
     * @param {string} [type] 
     * @param {string} [_class] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYBApi
     */
    public getAdvancedCac(rc?: number, type?: string, _class?: string, options?: AxiosRequestConfig) {
        return KYBApiFp(this.configuration).getAdvancedCac(rc, type, _class, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYB - Get CAC 2
     * @param {number} [rc] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYBApi
     */
    public getBasicCac(rc?: number, type?: string, options?: AxiosRequestConfig) {
        return KYBApiFp(this.configuration).getBasicCac(rc, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get CAC 
     * @param {number} [rcNumber] 
     * @param {string} [companyName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYBApi
     */
    public getCac(rcNumber?: number, companyName?: string, options?: AxiosRequestConfig) {
        return KYBApiFp(this.configuration).getCac(rcNumber, companyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Fetch Tin
     * @param {string} [tin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYBApi
     */
    public getTin(tin?: string, options?: AxiosRequestConfig) {
        return KYBApiFp(this.configuration).getTin(tin, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KYCApi - axios parameter creator
 * @export
 */
export const KYCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document/analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/phone_number/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {string} [licenseNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense: async (licenseNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/dl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (licenseNumber !== undefined) {
                localVarQueryParameter['license_number'] = licenseNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailReputation: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban: async (bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/nuban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {number} [passportNumber] 
         * @param {string} [surname] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport: async (passportNumber?: number, surname?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/passport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (passportNumber !== undefined) {
                localVarQueryParameter['passport_number'] = passportNumber;
            }

            if (surname !== undefined) {
                localVarQueryParameter['surname'] = surname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/phone_number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {string} [mode] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [vin] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVIN: async (mode?: string, firstname?: string, lastname?: string, vin?: number, state?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (vin !== undefined) {
                localVarQueryParameter['vin'] = vin;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {string} [vnin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin: async (vnin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vnin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (vnin !== undefined) {
                localVarQueryParameter['vnin'] = vnin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {number} [bvn] 
         * @param {string} [firstName] 
         * @param {string} [dob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn: async (bvn?: number, firstName?: string, dob?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {string} [mode] 
         * @param {number} [accountNumber] 
         * @param {number} [bankCode] 
         * @param {string} [dob] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge: async (mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/age_verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }

            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/bvn/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/nin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KYCApi - functional programming interface
 * @export
 */
export const KYCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KYCApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeDocument(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyzeDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeDocument(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn(bvn?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn(bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicPhoneNumber(phoneNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicPhoneNumber(phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {string} [licenseNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriversLicense(licenseNumber?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycDriversLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriversLicense(licenseNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailReputation(email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmailReputationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailReputation(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullBvn(bvn?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFullBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullBvn(bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNuban(bankCode?: number, accountNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNubanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNuban(bankCode, accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {number} [passportNumber] 
         * @param {string} [surname] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPassport(passportNumber?: number, surname?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycPassportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPassport(passportNumber, surname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumber(phoneNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumber(phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPremiumBvn(bvn?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPremiumBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPremiumBvn(bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {string} [mode] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [vin] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVIN(mode?: string, firstname?: string, lastname?: string, vin?: number, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVIN(mode, firstname, lastname, vin, state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {string} [vnin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVnin(vnin?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVninResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVnin(vnin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {number} [bvn] 
         * @param {string} [firstName] 
         * @param {string} [dob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateBvn(bvn?: number, firstName?: string, dob?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateBvn(bvn, firstName, dob, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {string} [mode] 
         * @param {number} [accountNumber] 
         * @param {number} [bankCode] 
         * @param {string} [dob] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAge(mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAge(mode, accountNumber, bankCode, dob, firstName, lastName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieBvn(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifySelfieBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieBvn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieNin(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifySelfieNinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieNin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KYCApi - factory interface
 * @export
 */
export const KYCApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KYCApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument(options?: any): AxiosPromise<AnalyzeDocumentResponse> {
            return localVarFp.analyzeDocument(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn(bvn?: number, options?: any): AxiosPromise<GetBasicBvnResponse> {
            return localVarFp.getBasicBvn(bvn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber(phoneNumber?: number, options?: any): AxiosPromise<GetBasicPhoneNumberResponse> {
            return localVarFp.getBasicPhoneNumber(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {string} [licenseNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense(licenseNumber?: string, options?: any): AxiosPromise<GetKycDriversLicenseResponse> {
            return localVarFp.getDriversLicense(licenseNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailReputation(email?: string, options?: any): AxiosPromise<GetEmailReputationResponse> {
            return localVarFp.getEmailReputation(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn(bvn?: number, options?: any): AxiosPromise<GetFullBvnResponse> {
            return localVarFp.getFullBvn(bvn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban(bankCode?: number, accountNumber?: number, options?: any): AxiosPromise<GetNubanResponse> {
            return localVarFp.getNuban(bankCode, accountNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {number} [passportNumber] 
         * @param {string} [surname] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport(passportNumber?: number, surname?: string, options?: any): AxiosPromise<GetKycPassportResponse> {
            return localVarFp.getPassport(passportNumber, surname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber(phoneNumber?: number, options?: any): AxiosPromise<GetPhoneNumberResponse> {
            return localVarFp.getPhoneNumber(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn(bvn?: number, options?: any): AxiosPromise<GetPremiumBvnResponse> {
            return localVarFp.getPremiumBvn(bvn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {string} [mode] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [vin] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVIN(mode?: string, firstname?: string, lastname?: string, vin?: number, state?: string, options?: any): AxiosPromise<GetVinResponse> {
            return localVarFp.getVIN(mode, firstname, lastname, vin, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {string} [vnin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin(vnin?: string, options?: any): AxiosPromise<GetVninResponse> {
            return localVarFp.getVnin(vnin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {number} [bvn] 
         * @param {string} [firstName] 
         * @param {string} [dob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn(bvn?: number, firstName?: string, dob?: string, options?: any): AxiosPromise<ValidateBvnResponse> {
            return localVarFp.validateBvn(bvn, firstName, dob, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {string} [mode] 
         * @param {number} [accountNumber] 
         * @param {number} [bankCode] 
         * @param {string} [dob] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge(mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options?: any): AxiosPromise<VerifyAgeResponse> {
            return localVarFp.verifyAge(mode, accountNumber, bankCode, dob, firstName, lastName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn(body?: object, options?: any): AxiosPromise<VerifySelfieBvnResponse> {
            return localVarFp.verifySelfieBvn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin(body?: object, options?: any): AxiosPromise<VerifySelfieNinResponse> {
            return localVarFp.verifySelfieNin(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KYCApi - object-oriented interface
 * @export
 * @class KYCApi
 * @extends {BaseAPI}
 */
export class KYCApi extends BaseAPI {
    /**
     * 
     * @summary KYC - Document Analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public analyzeDocument(options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).analyzeDocument(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Basic BVN Info
     * @param {number} [bvn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getBasicBvn(bvn?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getBasicBvn(bvn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC Lookup Phone Number Basic
     * @param {number} [phoneNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getBasicPhoneNumber(phoneNumber?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getBasicPhoneNumber(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Drivers License Info
     * @param {string} [licenseNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getDriversLicense(licenseNumber?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getDriversLicense(licenseNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Email Reputation
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getEmailReputation(email?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getEmailReputation(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Basic
     * @param {number} [bvn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getFullBvn(bvn?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getFullBvn(bvn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get NUBAN Information
     * @param {number} [bankCode] 
     * @param {number} [accountNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getNuban(bankCode?: number, accountNumber?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getNuban(bankCode, accountNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Passport
     * @param {number} [passportNumber] 
     * @param {string} [surname] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getPassport(passportNumber?: number, surname?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getPassport(passportNumber, surname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup Phone Number
     * @param {number} [phoneNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getPhoneNumber(phoneNumber?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getPhoneNumber(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Premium
     * @param {number} [bvn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getPremiumBvn(bvn?: number, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getPremiumBvn(bvn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get VIN
     * @param {string} [mode] 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {number} [vin] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getVIN(mode?: string, firstname?: string, lastname?: string, vin?: number, state?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getVIN(mode, firstname, lastname, vin, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lookup VNIN
     * @param {string} [vnin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public getVnin(vnin?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).getVnin(vnin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Validate BVN
     * @param {number} [bvn] 
     * @param {string} [firstName] 
     * @param {string} [dob] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public validateBvn(bvn?: number, firstName?: string, dob?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).validateBvn(bvn, firstName, dob, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Age Verification
     * @param {string} [mode] 
     * @param {number} [accountNumber] 
     * @param {number} [bankCode] 
     * @param {string} [dob] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public verifyAge(mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).verifyAge(mode, accountNumber, bankCode, dob, firstName, lastName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie BVN Verificatoin
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public verifySelfieBvn(body?: object, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).verifySelfieBvn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie NIN Verification
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KYCApi
     */
    public verifySelfieNin(body?: object, options?: AxiosRequestConfig) {
        return KYCApiFp(this.configuration).verifySelfieNin(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MLApi - axios parameter creator
 * @export
 */
export const MLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Document Analysis Drivers License
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentAnalysis: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/document/analysis/dl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generic OCR Service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericOcrText: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ml/ocr/generic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary BVN Ocr
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOcrText: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ml/ocr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie Photo ID Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhotoIdWithSelfie: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/photoid/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MLApi - functional programming interface
 * @export
 */
export const MLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MLApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Document Analysis Drivers License
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentAnalysis(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDocumentAnalysisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentAnalysis(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generic OCR Service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenericOcrText(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGenericOcrTextResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenericOcrText(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary BVN Ocr
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOcrText(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOcrTextResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOcrText(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie Photo ID Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyPhotoIdWithSelfie(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyPhotoIdWithSelfieResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyPhotoIdWithSelfie(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MLApi - factory interface
 * @export
 */
export const MLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MLApiFp(configuration)
    return {
        /**
         * 
         * @summary Document Analysis Drivers License
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentAnalysis(body?: object, options?: any): AxiosPromise<GetDocumentAnalysisResponse> {
            return localVarFp.getDocumentAnalysis(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generic OCR Service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenericOcrText(body?: object, options?: any): AxiosPromise<GetGenericOcrTextResponse> {
            return localVarFp.getGenericOcrText(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary BVN Ocr
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOcrText(body?: object, options?: any): AxiosPromise<GetOcrTextResponse> {
            return localVarFp.getOcrText(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie Photo ID Verification
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhotoIdWithSelfie(body?: object, options?: any): AxiosPromise<VerifyPhotoIdWithSelfieResponse> {
            return localVarFp.verifyPhotoIdWithSelfie(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MLApi - object-oriented interface
 * @export
 * @class MLApi
 * @extends {BaseAPI}
 */
export class MLApi extends BaseAPI {
    /**
     * 
     * @summary Document Analysis Drivers License
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MLApi
     */
    public getDocumentAnalysis(body?: object, options?: AxiosRequestConfig) {
        return MLApiFp(this.configuration).getDocumentAnalysis(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generic OCR Service
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MLApi
     */
    public getGenericOcrText(body?: object, options?: AxiosRequestConfig) {
        return MLApiFp(this.configuration).getGenericOcrText(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary BVN Ocr
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MLApi
     */
    public getOcrText(body?: object, options?: AxiosRequestConfig) {
        return MLApiFp(this.configuration).getOcrText(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie Photo ID Verification
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MLApi
     */
    public verifyPhotoIdWithSelfie(body?: object, options?: AxiosRequestConfig) {
        return MLApiFp(this.configuration).verifyPhotoIdWithSelfie(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ServicesApi - axios parameter creator
 * @export
 */
export const ServicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Categorize Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorizeTransactions: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ml/categorize_transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesApi - functional programming interface
 * @export
 */
export const ServicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Categorize Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categorizeTransactions(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategorizeTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categorizeTransactions(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicesApi - factory interface
 * @export
 */
export const ServicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicesApiFp(configuration)
    return {
        /**
         * 
         * @summary Categorize Transactions
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categorizeTransactions(body?: object, options?: any): AxiosPromise<CategorizeTransactionsResponse> {
            return localVarFp.categorizeTransactions(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export class ServicesApi extends BaseAPI {
    /**
     * 
     * @summary Categorize Transactions
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public categorizeTransactions(body?: object, options?: AxiosRequestConfig) {
        return ServicesApiFp(this.configuration).categorizeTransactions(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UGKYCApi - axios parameter creator
 * @export
 */
export const UGKYCApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Voters ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoter: async (id?: number, firstName?: string, lastName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ug/kyc/voter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UGKYCApi - functional programming interface
 * @export
 */
export const UGKYCApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UGKYCApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Voters ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoter(id?: number, firstName?: string, lastName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVoterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoter(id, firstName, lastName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UGKYCApi - factory interface
 * @export
 */
export const UGKYCApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UGKYCApiFp(configuration)
    return {
        /**
         * 
         * @summary Voters ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoter(id?: number, firstName?: string, lastName?: string, options?: any): AxiosPromise<GetVoterResponse> {
            return localVarFp.getVoter(id, firstName, lastName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UGKYCApi - object-oriented interface
 * @export
 * @class UGKYCApi
 * @extends {BaseAPI}
 */
export class UGKYCApi extends BaseAPI {
    /**
     * 
     * @summary Voters ID
     * @param {number} [id] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UGKYCApi
     */
    public getVoter(id?: number, firstName?: string, lastName?: string, options?: AxiosRequestConfig) {
        return UGKYCApiFp(this.configuration).getVoter(id, firstName, lastName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create NGN Wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWallet: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Credit Sub-wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSubwallet: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/credit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Transaction Details
         * @param {string} [transactionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (transactionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (transactionId !== undefined) {
                localVarQueryParameter['transaction_id'] = transactionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Wallet Details
         * @param {string} [walletId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet: async (walletId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/retrieve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (walletId !== undefined) {
                localVarQueryParameter['wallet_id'] = walletId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Wallets
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallets: async (appId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfer Funds
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFunds: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/ngn/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create NGN Wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWallet(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWalletResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWallet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Credit Sub-wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creditSubwallet(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditSubwalletResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creditSubwallet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Transaction Details
         * @param {string} [transactionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(transactionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Wallet Details
         * @param {string} [walletId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWallet(walletId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWalletResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(walletId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Wallets
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWallets(appId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallets(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Transfer Funds
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferFunds(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferFundsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferFunds(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * 
         * @summary Create NGN Wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWallet(body?: object, options?: any): AxiosPromise<CreateWalletResponse> {
            return localVarFp.createWallet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Credit Sub-wallet
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSubwallet(body?: object, options?: any): AxiosPromise<CreditSubwalletResponse> {
            return localVarFp.creditSubwallet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Transaction Details
         * @param {string} [transactionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(transactionId?: string, options?: any): AxiosPromise<GetTransactionResponse> {
            return localVarFp.getTransaction(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Wallet Details
         * @param {string} [walletId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet(walletId?: string, options?: any): AxiosPromise<GetWalletResponse> {
            return localVarFp.getWallet(walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Wallets
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallets(appId?: string, options?: any): AxiosPromise<GetWalletsResponse> {
            return localVarFp.getWallets(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfer Funds
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFunds(body?: object, options?: any): AxiosPromise<TransferFundsResponse> {
            return localVarFp.transferFunds(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 
     * @summary Create NGN Wallet
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createWallet(body?: object, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).createWallet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Credit Sub-wallet
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public creditSubwallet(body?: object, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).creditSubwallet(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Transaction Details
     * @param {string} [transactionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getTransaction(transactionId?: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getTransaction(transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Wallet Details
     * @param {string} [walletId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getWallet(walletId?: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getWallet(walletId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Wallets
     * @param {string} [appId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getWallets(appId?: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getWallets(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transfer Funds
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public transferFunds(body?: object, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).transferFunds(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebHooksApi - axios parameter creator
 * @export
 */
export const WebHooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webhook/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch All Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webhook/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Hook
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyWebhook: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webhook/notify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribe to service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeService: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/webhook/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication appIdAuth required
            await setApiKeyToObject(localVarHeaderParameter, "AppId", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebHooksApi - functional programming interface
 * @export
 */
export const WebHooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebHooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhook(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch All Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhooks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWebhooksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Hook
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyWebhook(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyWebhook(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Subscribe to service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeService(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscribeServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeService(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebHooksApi - factory interface
 * @export
 */
export const WebHooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebHooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook(options?: any): AxiosPromise<DeleteWebhookResponse> {
            return localVarFp.deleteWebhook(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch All Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks(options?: any): AxiosPromise<GetWebhooksResponse> {
            return localVarFp.getWebhooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Hook
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyWebhook(body?: object, options?: any): AxiosPromise<NotifyWebhookResponse> {
            return localVarFp.notifyWebhook(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Subscribe to service
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeService(body?: object, options?: any): AxiosPromise<SubscribeServiceResponse> {
            return localVarFp.subscribeService(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebHooksApi - object-oriented interface
 * @export
 * @class WebHooksApi
 * @extends {BaseAPI}
 */
export class WebHooksApi extends BaseAPI {
    /**
     * 
     * @summary Delete Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebHooksApi
     */
    public deleteWebhook(options?: AxiosRequestConfig) {
        return WebHooksApiFp(this.configuration).deleteWebhook(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch All Webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebHooksApi
     */
    public getWebhooks(options?: AxiosRequestConfig) {
        return WebHooksApiFp(this.configuration).getWebhooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Hook
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebHooksApi
     */
    public notifyWebhook(body?: object, options?: AxiosRequestConfig) {
        return WebHooksApiFp(this.configuration).notifyWebhook(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Subscribe to service
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebHooksApi
     */
    public subscribeService(body?: object, options?: AxiosRequestConfig) {
        return WebHooksApiFp(this.configuration).subscribeService(body, options).then((request) => request(this.axios, this.basePath));
    }
}


