/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetScreeningInfoResponse } from '../models';
// @ts-ignore
import { ScreenAmlRequest } from '../models';
// @ts-ignore
import { ScreenAmlResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { AmlApiCustom } from "./aml-api-custom";
/**
 * AmlApi - axios parameter creator
 * @export
 */
export const AmlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {string} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningInfo: async (referenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/aml/screening/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (referenceId !== undefined) {
                localVarQueryParameter['reference_id'] = referenceId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AML Screening
         * @param {ScreenAmlRequest} [screenAmlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenAml: async (screenAmlRequest?: ScreenAmlRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/aml/screening`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: screenAmlRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(screenAmlRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmlApi - functional programming interface
 * @export
 */
export const AmlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {AmlApiGetScreeningInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreeningInfo(requestParameters: AmlApiGetScreeningInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScreeningInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreeningInfo(requestParameters.referenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AML Screening
         * @param {AmlApiScreenAmlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenAml(requestParameters: AmlApiScreenAmlRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenAmlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenAml(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmlApi - factory interface
 * @export
 */
export const AmlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmlApiFp(configuration)
    return {
        /**
         * 
         * @summary Get AML Info
         * @param {AmlApiGetScreeningInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningInfo(requestParameters: AmlApiGetScreeningInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetScreeningInfoResponse> {
            return localVarFp.getScreeningInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AML Screening
         * @param {AmlApiScreenAmlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenAml(requestParameters: AmlApiScreenAmlRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ScreenAmlResponse> {
            return localVarFp.screenAml(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getScreeningInfo operation in AmlApi.
 * @export
 * @interface AmlApiGetScreeningInfoRequest
 */
export type AmlApiGetScreeningInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AmlApiGetScreeningInfo
    */
    readonly referenceId?: string
    
}

/**
 * Request parameters for screenAml operation in AmlApi.
 * @export
 * @interface AmlApiScreenAmlRequest
 */
export type AmlApiScreenAmlRequest = {
    
} & ScreenAmlRequest

/**
 * AmlApi - object-oriented interface
 * @export
 * @class AmlApi
 * @extends {BaseAPI}
 */
export class AmlApi extends AmlApiCustom {
    /**
     * 
     * @summary Get AML Info
     * @param {AmlApiGetScreeningInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmlApi
     */
    public getScreeningInfo(requestParameters: AmlApiGetScreeningInfoRequest = {}, options?: AxiosRequestConfig) {
        return AmlApiFp(this.configuration).getScreeningInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AML Screening
     * @param {AmlApiScreenAmlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmlApi
     */
    public screenAml(requestParameters: AmlApiScreenAmlRequest = {}, options?: AxiosRequestConfig) {
        return AmlApiFp(this.configuration).screenAml(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
