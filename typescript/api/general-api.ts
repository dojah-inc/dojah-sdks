/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GeneralGetNubanResponse } from '../models';
// @ts-ignore
import { GeneralGetWalletBalanceResponse } from '../models';
// @ts-ignore
import { GetBanksResponse } from '../models';
// @ts-ignore
import { GetBinResponse } from '../models';
// @ts-ignore
import { GetDataPlansResponse } from '../models';
// @ts-ignore
import { GetWalletBalanceResponse } from '../models';
// @ts-ignore
import { PurchaseAirtimeRequest } from '../models';
// @ts-ignore
import { PurchaseAirtimeResponse } from '../models';
// @ts-ignore
import { PurchaseDataRequest } from '../models';
// @ts-ignore
import { PurchaseDataResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { GeneralApiCustom } from "./general-api-custom";
/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {number} [cardBin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBin: async (cardBin?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/bin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (cardBin !== undefined) {
                localVarQueryParameter['card_bin'] = cardBin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataPlans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/data/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban: async (bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/general/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {PurchaseAirtimeRequest} [purchaseAirtimeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAirtime: async (purchaseAirtimeRequest?: PurchaseAirtimeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/airtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: purchaseAirtimeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseAirtimeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {PurchaseDataRequest} [purchaseDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseData: async (purchaseDataRequest?: PurchaseDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purchase/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: purchaseDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBanks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBanksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBanks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {GeneralApiGetBinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBin(requestParameters: GeneralApiGetBinRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBin(requestParameters.cardBin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataPlans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDataPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataPlans(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {GeneralApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNuban(requestParameters: GeneralApiGetNubanRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralGetNubanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNuban(requestParameters.bankCode, requestParameters.accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWalletBalance(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWalletBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {GeneralApiPurchaseAirtimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseAirtime(requestParameters: GeneralApiPurchaseAirtimeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseAirtimeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseAirtime(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {GeneralApiPurchaseDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseData(requestParameters: GeneralApiPurchaseDataRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseData(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * 
         * @summary General - Get Banks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBanks(options?: AxiosRequestConfig): AxiosPromise<GetBanksResponse> {
            return localVarFp.getBanks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary General Resolve BIN
         * @param {GeneralApiGetBinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBin(requestParameters: GeneralApiGetBinRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetBinResponse> {
            return localVarFp.getBin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Get Data Plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataPlans(options?: AxiosRequestConfig): AxiosPromise<GetDataPlansResponse> {
            return localVarFp.getDataPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary General Resolve NUBAN
         * @param {GeneralApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban(requestParameters: GeneralApiGetNubanRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GeneralGetNubanResponse> {
            return localVarFp.getNuban(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Dojah Wallet Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance(options?: AxiosRequestConfig): AxiosPromise<GetWalletBalanceResponse> {
            return localVarFp.getWalletBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Send Airtime
         * @param {GeneralApiPurchaseAirtimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAirtime(requestParameters: GeneralApiPurchaseAirtimeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PurchaseAirtimeResponse> {
            return localVarFp.purchaseAirtime(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase - Buy Data
         * @param {GeneralApiPurchaseDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseData(requestParameters: GeneralApiPurchaseDataRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PurchaseDataResponse> {
            return localVarFp.purchaseData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBin operation in GeneralApi.
 * @export
 * @interface GeneralApiGetBinRequest
 */
export type GeneralApiGetBinRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GeneralApiGetBin
    */
    readonly cardBin?: number
    
}

/**
 * Request parameters for getNuban operation in GeneralApi.
 * @export
 * @interface GeneralApiGetNubanRequest
 */
export type GeneralApiGetNubanRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GeneralApiGetNuban
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {number}
    * @memberof GeneralApiGetNuban
    */
    readonly accountNumber?: number
    
}

/**
 * Request parameters for purchaseAirtime operation in GeneralApi.
 * @export
 * @interface GeneralApiPurchaseAirtimeRequest
 */
export type GeneralApiPurchaseAirtimeRequest = {
    
} & PurchaseAirtimeRequest

/**
 * Request parameters for purchaseData operation in GeneralApi.
 * @export
 * @interface GeneralApiPurchaseDataRequest
 */
export type GeneralApiPurchaseDataRequest = {
    
} & PurchaseDataRequest

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends GeneralApiCustom {
    /**
     * 
     * @summary General - Get Banks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getBanks(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getBanks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary General Resolve BIN
     * @param {GeneralApiGetBinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getBin(requestParameters: GeneralApiGetBinRequest = {}, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getBin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Get Data Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getDataPlans(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getDataPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary General Resolve NUBAN
     * @param {GeneralApiGetNubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getNuban(requestParameters: GeneralApiGetNubanRequest = {}, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getNuban(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Dojah Wallet Balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getWalletBalance(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getWalletBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Send Airtime
     * @param {GeneralApiPurchaseAirtimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public purchaseAirtime(requestParameters: GeneralApiPurchaseAirtimeRequest = {}, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).purchaseAirtime(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase - Buy Data
     * @param {GeneralApiPurchaseDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public purchaseData(requestParameters: GeneralApiPurchaseDataRequest = {}, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).purchaseData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
