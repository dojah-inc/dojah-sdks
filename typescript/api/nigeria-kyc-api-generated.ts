/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetBasicBvnResponse } from '../models';
// @ts-ignore
import { GetFullBvnResponse } from '../models';
// @ts-ignore
import { GetKycDriversLicenseResponse } from '../models';
// @ts-ignore
import { GetKycPassportResponse } from '../models';
// @ts-ignore
import { GetNubanResponse } from '../models';
// @ts-ignore
import { GetPhoneNumber404Response } from '../models';
// @ts-ignore
import { GetPhoneNumberResponse } from '../models';
// @ts-ignore
import { GetPremiumBvnResponse } from '../models';
// @ts-ignore
import { GetVninResponse } from '../models';
// @ts-ignore
import { NigeriaKycGetNinResponse } from '../models';
// @ts-ignore
import { ValidateBvnResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NigeriaKycApi - axios parameter creator
 * @export
 */
export const NigeriaKycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic 1
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn1: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/phone_number/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {string} [licenseNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense: async (licenseNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/dl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (licenseNumber !== undefined) {
                localVarQueryParameter['license_number'] = licenseNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get NIN Info
         * @param {number} [nin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNin: async (nin?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/nin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (nin !== undefined) {
                localVarQueryParameter['nin'] = nin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Normal
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNormalBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban: async (bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/nuban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {string} [passportNumber] 
         * @param {string} [surname] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport: async (passportNumber?: string, surname?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/passport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (passportNumber !== undefined) {
                localVarQueryParameter['passport_number'] = passportNumber;
            }

            if (surname !== undefined) {
                localVarQueryParameter['surname'] = surname;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/phone_number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            // authentication noauthAuth required
            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {string} [vnin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin: async (vnin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vnin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (vnin !== undefined) {
                localVarQueryParameter['vnin'] = vnin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NigeriaKycApi - functional programming interface
 * @export
 */
export const NigeriaKycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NigeriaKycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {NigeriaKycApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn(requestParameters: NigeriaKycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic 1
         * @param {NigeriaKycApiGetBasicBvn1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn1(requestParameters: NigeriaKycApiGetBasicBvn1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn1(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {NigeriaKycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicPhoneNumber(requestParameters: NigeriaKycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicPhoneNumber(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {NigeriaKycApiGetDriversLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriversLicense(requestParameters: NigeriaKycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycDriversLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriversLicense(requestParameters.licenseNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get NIN Info
         * @param {NigeriaKycApiGetNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNin(requestParameters: NigeriaKycApiGetNinRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NigeriaKycGetNinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNin(requestParameters.nin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Normal
         * @param {NigeriaKycApiGetNormalBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNormalBvn(requestParameters: NigeriaKycApiGetNormalBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFullBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNormalBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {NigeriaKycApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNuban(requestParameters: NigeriaKycApiGetNubanRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNubanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNuban(requestParameters.bankCode, requestParameters.accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {NigeriaKycApiGetPassportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPassport(requestParameters: NigeriaKycApiGetPassportRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycPassportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPassport(requestParameters.passportNumber, requestParameters.surname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {NigeriaKycApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumber(requestParameters: NigeriaKycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumber(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {NigeriaKycApiGetPremiumBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPremiumBvn(requestParameters: NigeriaKycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPremiumBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPremiumBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {NigeriaKycApiGetVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVnin(requestParameters: NigeriaKycApiGetVninRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVninResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVnin(requestParameters.vnin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NigeriaKycApi - factory interface
 * @export
 */
export const NigeriaKycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NigeriaKycApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {NigeriaKycApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn(requestParameters: NigeriaKycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ValidateBvnResponse> {
            return localVarFp.getBasicBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic 1
         * @param {NigeriaKycApiGetBasicBvn1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn1(requestParameters: NigeriaKycApiGetBasicBvn1Request = {}, options?: AxiosRequestConfig): AxiosPromise<GetBasicBvnResponse> {
            return localVarFp.getBasicBvn1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {NigeriaKycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber(requestParameters: NigeriaKycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBasicPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {NigeriaKycApiGetDriversLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense(requestParameters: NigeriaKycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetKycDriversLicenseResponse> {
            return localVarFp.getDriversLicense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get NIN Info
         * @param {NigeriaKycApiGetNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNin(requestParameters: NigeriaKycApiGetNinRequest = {}, options?: AxiosRequestConfig): AxiosPromise<NigeriaKycGetNinResponse> {
            return localVarFp.getNin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Normal
         * @param {NigeriaKycApiGetNormalBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNormalBvn(requestParameters: NigeriaKycApiGetNormalBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetFullBvnResponse> {
            return localVarFp.getNormalBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {NigeriaKycApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban(requestParameters: NigeriaKycApiGetNubanRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetNubanResponse> {
            return localVarFp.getNuban(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {NigeriaKycApiGetPassportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport(requestParameters: NigeriaKycApiGetPassportRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetKycPassportResponse> {
            return localVarFp.getPassport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {NigeriaKycApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber(requestParameters: NigeriaKycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPhoneNumberResponse> {
            return localVarFp.getPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {NigeriaKycApiGetPremiumBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn(requestParameters: NigeriaKycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPremiumBvnResponse> {
            return localVarFp.getPremiumBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {NigeriaKycApiGetVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin(requestParameters: NigeriaKycApiGetVninRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVninResponse> {
            return localVarFp.getVnin(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBasicBvn operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetBasicBvnRequest
 */
export type NigeriaKycApiGetBasicBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetBasicBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getBasicBvn1 operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetBasicBvn1Request
 */
export type NigeriaKycApiGetBasicBvn1Request = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetBasicBvn1
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getBasicPhoneNumber operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetBasicPhoneNumberRequest
 */
export type NigeriaKycApiGetBasicPhoneNumberRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetBasicPhoneNumber
    */
    readonly phoneNumber?: number
    
}

/**
 * Request parameters for getDriversLicense operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetDriversLicenseRequest
 */
export type NigeriaKycApiGetDriversLicenseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NigeriaKycApiGetDriversLicense
    */
    readonly licenseNumber?: string
    
}

/**
 * Request parameters for getNin operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetNinRequest
 */
export type NigeriaKycApiGetNinRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetNin
    */
    readonly nin?: number
    
}

/**
 * Request parameters for getNormalBvn operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetNormalBvnRequest
 */
export type NigeriaKycApiGetNormalBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetNormalBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getNuban operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetNubanRequest
 */
export type NigeriaKycApiGetNubanRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetNuban
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetNuban
    */
    readonly accountNumber?: number
    
}

/**
 * Request parameters for getPassport operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetPassportRequest
 */
export type NigeriaKycApiGetPassportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NigeriaKycApiGetPassport
    */
    readonly passportNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof NigeriaKycApiGetPassport
    */
    readonly surname?: string
    
}

/**
 * Request parameters for getPhoneNumber operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetPhoneNumberRequest
 */
export type NigeriaKycApiGetPhoneNumberRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetPhoneNumber
    */
    readonly phoneNumber?: number
    
}

/**
 * Request parameters for getPremiumBvn operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetPremiumBvnRequest
 */
export type NigeriaKycApiGetPremiumBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof NigeriaKycApiGetPremiumBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getVnin operation in NigeriaKycApi.
 * @export
 * @interface NigeriaKycApiGetVninRequest
 */
export type NigeriaKycApiGetVninRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NigeriaKycApiGetVnin
    */
    readonly vnin?: string
    
}

/**
 * NigeriaKycApiGenerated - object-oriented interface
 * @export
 * @class NigeriaKycApiGenerated
 * @extends {BaseAPI}
 */
export class NigeriaKycApiGenerated extends BaseAPI {
    /**
     * 
     * @summary KYC - Get Basic BVN Info
     * @param {NigeriaKycApiGetBasicBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getBasicBvn(requestParameters: NigeriaKycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getBasicBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Basic 1
     * @param {NigeriaKycApiGetBasicBvn1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getBasicBvn1(requestParameters: NigeriaKycApiGetBasicBvn1Request = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getBasicBvn1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC Lookup Phone Number Basic
     * @param {NigeriaKycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getBasicPhoneNumber(requestParameters: NigeriaKycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getBasicPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Drivers License Info
     * @param {NigeriaKycApiGetDriversLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getDriversLicense(requestParameters: NigeriaKycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getDriversLicense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get NIN Info
     * @param {NigeriaKycApiGetNinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getNin(requestParameters: NigeriaKycApiGetNinRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getNin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Normal
     * @param {NigeriaKycApiGetNormalBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getNormalBvn(requestParameters: NigeriaKycApiGetNormalBvnRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getNormalBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get NUBAN Information
     * @param {NigeriaKycApiGetNubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getNuban(requestParameters: NigeriaKycApiGetNubanRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getNuban(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Passport
     * @param {NigeriaKycApiGetPassportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getPassport(requestParameters: NigeriaKycApiGetPassportRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getPassport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup Phone Number
     * @param {NigeriaKycApiGetPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getPhoneNumber(requestParameters: NigeriaKycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Premium
     * @param {NigeriaKycApiGetPremiumBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getPremiumBvn(requestParameters: NigeriaKycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getPremiumBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lookup VNIN
     * @param {NigeriaKycApiGetVninRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NigeriaKycApiGenerated
     */
    public getVnin(requestParameters: NigeriaKycApiGetVninRequest = {}, options?: AxiosRequestConfig) {
        return NigeriaKycApiFp(this.configuration).getVnin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
