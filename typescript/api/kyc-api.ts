/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyzeDocumentResponse } from '../models';
// @ts-ignore
import { GetBasicBvnResponse } from '../models';
// @ts-ignore
import { GetBasicPhoneNumberResponse } from '../models';
// @ts-ignore
import { GetEmailReputationResponse } from '../models';
// @ts-ignore
import { GetFullBvnResponse } from '../models';
// @ts-ignore
import { GetKycDriversLicenseResponse } from '../models';
// @ts-ignore
import { GetKycPassportResponse } from '../models';
// @ts-ignore
import { GetNubanResponse } from '../models';
// @ts-ignore
import { GetPhoneNumber404Response } from '../models';
// @ts-ignore
import { GetPhoneNumberResponse } from '../models';
// @ts-ignore
import { GetPremiumBvnResponse } from '../models';
// @ts-ignore
import { GetVinResponse } from '../models';
// @ts-ignore
import { GetVninResponse } from '../models';
// @ts-ignore
import { ValidateBvnResponse } from '../models';
// @ts-ignore
import { VerifyAgeResponse } from '../models';
// @ts-ignore
import { VerifySelfieBvnRequest } from '../models';
// @ts-ignore
import { VerifySelfieBvnResponse } from '../models';
// @ts-ignore
import { VerifySelfieNinRequest } from '../models';
// @ts-ignore
import { VerifySelfieNinResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { KycApiCustom } from "./kyc-api-custom";
/**
 * KycApi - axios parameter creator
 * @export
 */
export const KycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document/analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/phone_number/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {string} [licenseNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense: async (licenseNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/dl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (licenseNumber !== undefined) {
                localVarQueryParameter['license_number'] = licenseNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailReputation: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban: async (bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/nuban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {number} [passportNumber] 
         * @param {string} [surname] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport: async (passportNumber?: number, surname?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/passport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (passportNumber !== undefined) {
                localVarQueryParameter['passport_number'] = passportNumber;
            }

            if (surname !== undefined) {
                localVarQueryParameter['surname'] = surname;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {number} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber: async (phoneNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/phone_number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {number} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn: async (bvn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {string} [mode] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [vin] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVIN: async (mode?: string, firstname?: string, lastname?: string, vin?: number, state?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (vin !== undefined) {
                localVarQueryParameter['vin'] = vin;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {string} [vnin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin: async (vnin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vnin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (vnin !== undefined) {
                localVarQueryParameter['vnin'] = vnin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {number} [bvn] 
         * @param {string} [firstName] 
         * @param {string} [dob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn: async (bvn?: number, firstName?: string, dob?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/bvn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {string} [mode] 
         * @param {number} [accountNumber] 
         * @param {number} [bankCode] 
         * @param {string} [dob] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge: async (mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/age_verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }

            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {VerifySelfieBvnRequest} [verifySelfieBvnRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn: async (verifySelfieBvnRequest?: VerifySelfieBvnRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/bvn/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifySelfieBvnRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifySelfieBvnRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {VerifySelfieNinRequest} [verifySelfieNinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin: async (verifySelfieNinRequest?: VerifySelfieNinRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/nin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifySelfieNinRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifySelfieNinRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KycApi - functional programming interface
 * @export
 */
export const KycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeDocument(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyzeDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeDocument(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {KycApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn(requestParameters: KycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {KycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicPhoneNumber(requestParameters: KycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicPhoneNumber(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {KycApiGetDriversLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriversLicense(requestParameters: KycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycDriversLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriversLicense(requestParameters.licenseNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {KycApiGetEmailReputationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailReputation(requestParameters: KycApiGetEmailReputationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmailReputationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailReputation(requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {KycApiGetFullBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullBvn(requestParameters: KycApiGetFullBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFullBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {KycApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNuban(requestParameters: KycApiGetNubanRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNubanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNuban(requestParameters.bankCode, requestParameters.accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {KycApiGetPassportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPassport(requestParameters: KycApiGetPassportRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKycPassportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPassport(requestParameters.passportNumber, requestParameters.surname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {KycApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumber(requestParameters: KycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPhoneNumberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumber(requestParameters.phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {KycApiGetPremiumBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPremiumBvn(requestParameters: KycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPremiumBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPremiumBvn(requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {KycApiGetVINRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVIN(requestParameters: KycApiGetVINRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVIN(requestParameters.mode, requestParameters.firstname, requestParameters.lastname, requestParameters.vin, requestParameters.state, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {KycApiGetVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVnin(requestParameters: KycApiGetVninRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVninResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVnin(requestParameters.vnin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {KycApiValidateBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateBvn(requestParameters: KycApiValidateBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateBvn(requestParameters.bvn, requestParameters.firstName, requestParameters.dob, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {KycApiVerifyAgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAge(requestParameters: KycApiVerifyAgeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAge(requestParameters.mode, requestParameters.accountNumber, requestParameters.bankCode, requestParameters.dob, requestParameters.firstName, requestParameters.lastName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {KycApiVerifySelfieBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieBvn(requestParameters: KycApiVerifySelfieBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifySelfieBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieBvn(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {KycApiVerifySelfieNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieNin(requestParameters: KycApiVerifySelfieNinRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifySelfieNinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieNin(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KycApi - factory interface
 * @export
 */
export const KycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KycApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument(options?: AxiosRequestConfig): AxiosPromise<AnalyzeDocumentResponse> {
            return localVarFp.analyzeDocument(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Basic BVN Info
         * @param {KycApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn(requestParameters: KycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetBasicBvnResponse> {
            return localVarFp.getBasicBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC Lookup Phone Number Basic
         * @param {KycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicPhoneNumber(requestParameters: KycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetBasicPhoneNumberResponse> {
            return localVarFp.getBasicPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Drivers License Info
         * @param {KycApiGetDriversLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversLicense(requestParameters: KycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetKycDriversLicenseResponse> {
            return localVarFp.getDriversLicense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get Email Reputation
         * @param {KycApiGetEmailReputationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailReputation(requestParameters: KycApiGetEmailReputationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetEmailReputationResponse> {
            return localVarFp.getEmailReputation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Basic
         * @param {KycApiGetFullBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn(requestParameters: KycApiGetFullBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetFullBvnResponse> {
            return localVarFp.getFullBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get NUBAN Information
         * @param {KycApiGetNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNuban(requestParameters: KycApiGetNubanRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetNubanResponse> {
            return localVarFp.getNuban(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Passport
         * @param {KycApiGetPassportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPassport(requestParameters: KycApiGetPassportRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetKycPassportResponse> {
            return localVarFp.getPassport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup Phone Number
         * @param {KycApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber(requestParameters: KycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPhoneNumberResponse> {
            return localVarFp.getPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Lookup BVN Premium
         * @param {KycApiGetPremiumBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPremiumBvn(requestParameters: KycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPremiumBvnResponse> {
            return localVarFp.getPremiumBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {KycApiGetVINRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVIN(requestParameters: KycApiGetVINRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVinResponse> {
            return localVarFp.getVIN(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lookup VNIN
         * @param {KycApiGetVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVnin(requestParameters: KycApiGetVninRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVninResponse> {
            return localVarFp.getVnin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {KycApiValidateBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn(requestParameters: KycApiValidateBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ValidateBvnResponse> {
            return localVarFp.validateBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {KycApiVerifyAgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge(requestParameters: KycApiVerifyAgeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifyAgeResponse> {
            return localVarFp.verifyAge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie BVN Verificatoin
         * @param {KycApiVerifySelfieBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn(requestParameters: KycApiVerifySelfieBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifySelfieBvnResponse> {
            return localVarFp.verifySelfieBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {KycApiVerifySelfieNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin(requestParameters: KycApiVerifySelfieNinRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifySelfieNinResponse> {
            return localVarFp.verifySelfieNin(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBasicBvn operation in KycApi.
 * @export
 * @interface KycApiGetBasicBvnRequest
 */
export type KycApiGetBasicBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetBasicBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getBasicPhoneNumber operation in KycApi.
 * @export
 * @interface KycApiGetBasicPhoneNumberRequest
 */
export type KycApiGetBasicPhoneNumberRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetBasicPhoneNumber
    */
    readonly phoneNumber?: number
    
}

/**
 * Request parameters for getDriversLicense operation in KycApi.
 * @export
 * @interface KycApiGetDriversLicenseRequest
 */
export type KycApiGetDriversLicenseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetDriversLicense
    */
    readonly licenseNumber?: string
    
}

/**
 * Request parameters for getEmailReputation operation in KycApi.
 * @export
 * @interface KycApiGetEmailReputationRequest
 */
export type KycApiGetEmailReputationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetEmailReputation
    */
    readonly email?: string
    
}

/**
 * Request parameters for getFullBvn operation in KycApi.
 * @export
 * @interface KycApiGetFullBvnRequest
 */
export type KycApiGetFullBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetFullBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getNuban operation in KycApi.
 * @export
 * @interface KycApiGetNubanRequest
 */
export type KycApiGetNubanRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetNuban
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetNuban
    */
    readonly accountNumber?: number
    
}

/**
 * Request parameters for getPassport operation in KycApi.
 * @export
 * @interface KycApiGetPassportRequest
 */
export type KycApiGetPassportRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetPassport
    */
    readonly passportNumber?: number
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetPassport
    */
    readonly surname?: string
    
}

/**
 * Request parameters for getPhoneNumber operation in KycApi.
 * @export
 * @interface KycApiGetPhoneNumberRequest
 */
export type KycApiGetPhoneNumberRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetPhoneNumber
    */
    readonly phoneNumber?: number
    
}

/**
 * Request parameters for getPremiumBvn operation in KycApi.
 * @export
 * @interface KycApiGetPremiumBvnRequest
 */
export type KycApiGetPremiumBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetPremiumBvn
    */
    readonly bvn?: number
    
}

/**
 * Request parameters for getVIN operation in KycApi.
 * @export
 * @interface KycApiGetVINRequest
 */
export type KycApiGetVINRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVIN
    */
    readonly mode?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVIN
    */
    readonly firstname?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVIN
    */
    readonly lastname?: string
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetVIN
    */
    readonly vin?: number
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVIN
    */
    readonly state?: string
    
}

/**
 * Request parameters for getVnin operation in KycApi.
 * @export
 * @interface KycApiGetVninRequest
 */
export type KycApiGetVninRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVnin
    */
    readonly vnin?: string
    
}

/**
 * Request parameters for validateBvn operation in KycApi.
 * @export
 * @interface KycApiValidateBvnRequest
 */
export type KycApiValidateBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KycApiValidateBvn
    */
    readonly bvn?: number
    
    /**
    * 
    * @type {string}
    * @memberof KycApiValidateBvn
    */
    readonly firstName?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiValidateBvn
    */
    readonly dob?: string
    
}

/**
 * Request parameters for verifyAge operation in KycApi.
 * @export
 * @interface KycApiVerifyAgeRequest
 */
export type KycApiVerifyAgeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiVerifyAge
    */
    readonly mode?: string
    
    /**
    * 
    * @type {number}
    * @memberof KycApiVerifyAge
    */
    readonly accountNumber?: number
    
    /**
    * 
    * @type {number}
    * @memberof KycApiVerifyAge
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {string}
    * @memberof KycApiVerifyAge
    */
    readonly dob?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiVerifyAge
    */
    readonly firstName?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiVerifyAge
    */
    readonly lastName?: string
    
}

/**
 * Request parameters for verifySelfieBvn operation in KycApi.
 * @export
 * @interface KycApiVerifySelfieBvnRequest
 */
export type KycApiVerifySelfieBvnRequest = {
    
} & VerifySelfieBvnRequest

/**
 * Request parameters for verifySelfieNin operation in KycApi.
 * @export
 * @interface KycApiVerifySelfieNinRequest
 */
export type KycApiVerifySelfieNinRequest = {
    
} & VerifySelfieNinRequest

/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
export class KycApi extends KycApiCustom {
    /**
     * 
     * @summary KYC - Document Analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public analyzeDocument(options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).analyzeDocument(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Basic BVN Info
     * @param {KycApiGetBasicBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getBasicBvn(requestParameters: KycApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getBasicBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC Lookup Phone Number Basic
     * @param {KycApiGetBasicPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getBasicPhoneNumber(requestParameters: KycApiGetBasicPhoneNumberRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getBasicPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Drivers License Info
     * @param {KycApiGetDriversLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getDriversLicense(requestParameters: KycApiGetDriversLicenseRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getDriversLicense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get Email Reputation
     * @param {KycApiGetEmailReputationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getEmailReputation(requestParameters: KycApiGetEmailReputationRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getEmailReputation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Basic
     * @param {KycApiGetFullBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getFullBvn(requestParameters: KycApiGetFullBvnRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getFullBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get NUBAN Information
     * @param {KycApiGetNubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getNuban(requestParameters: KycApiGetNubanRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getNuban(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Passport
     * @param {KycApiGetPassportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getPassport(requestParameters: KycApiGetPassportRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getPassport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup Phone Number
     * @param {KycApiGetPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getPhoneNumber(requestParameters: KycApiGetPhoneNumberRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Lookup BVN Premium
     * @param {KycApiGetPremiumBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getPremiumBvn(requestParameters: KycApiGetPremiumBvnRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getPremiumBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get VIN
     * @param {KycApiGetVINRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getVIN(requestParameters: KycApiGetVINRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getVIN(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lookup VNIN
     * @param {KycApiGetVninRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getVnin(requestParameters: KycApiGetVninRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getVnin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Validate BVN
     * @param {KycApiValidateBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public validateBvn(requestParameters: KycApiValidateBvnRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).validateBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Age Verification
     * @param {KycApiVerifyAgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public verifyAge(requestParameters: KycApiVerifyAgeRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).verifyAge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie BVN Verificatoin
     * @param {KycApiVerifySelfieBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public verifySelfieBvn(requestParameters: KycApiVerifySelfieBvnRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).verifySelfieBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie NIN Verification
     * @param {KycApiVerifySelfieNinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public verifySelfieNin(requestParameters: KycApiVerifySelfieNinRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).verifySelfieNin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
