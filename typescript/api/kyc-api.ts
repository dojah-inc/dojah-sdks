/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetVinResponse } from '../models';
// @ts-ignore
import { KycCheckLivenessRequest } from '../models';
// @ts-ignore
import { KycSubmitAddressRequest } from '../models';
// @ts-ignore
import { KycSubmitAddressResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { KycApiCustom } from "./kyc-api-custom";
/**
 * KycApi - axios parameter creator
 * @export
 */
export const KycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Liveness Check
         * @param {KycCheckLivenessRequest} kycCheckLivenessRequest 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveness: async (kycCheckLivenessRequest: KycCheckLivenessRequest, appId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kycCheckLivenessRequest' is not null or undefined
            assertParamExists('checkLiveness', 'kycCheckLivenessRequest', kycCheckLivenessRequest)
            const localVarPath = `/api/v1/ml/liveness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: kycCheckLivenessRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(kycCheckLivenessRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Fetch Accounts 
         * @param {string} [appId] 
         * @param {string} [bvn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts: async (appId?: string, bvn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Address Verification Data
         * @param {string} [appId] 
         * @param {string} [referenceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressVerification: async (appId?: string, referenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (referenceId !== undefined) {
                localVarQueryParameter['reference_id'] = referenceId;
            }

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lookup BVN from NUBAN
         * @param {string} [appId] 
         * @param {number} [bankCode] 
         * @param {number} [accountNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBvnFromNuban: async (appId?: string, bankCode?: number, accountNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/nuban/bvn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {string} [appId] 
         * @param {string} [vin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVin: async (appId?: string, vin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/vin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            if (vin !== undefined) {
                localVarQueryParameter['vin'] = vin;
            }

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit Address
         * @param {string} [appId] 
         * @param {KycSubmitAddressRequest} [kycSubmitAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAddress: async (appId?: string, kycSubmitAddressRequest?: KycSubmitAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kyc/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (appId != null) {
                localVarHeaderParameter['AppId'] = String(appId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: kycSubmitAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(kycSubmitAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KycApi - functional programming interface
 * @export
 */
export const KycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Liveness Check
         * @param {KycApiCheckLivenessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLiveness(requestParameters: KycApiCheckLivenessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkLiveness(requestParameters, requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Fetch Accounts 
         * @param {KycApiGetAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccounts(requestParameters: KycApiGetAccountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccounts(requestParameters.appId, requestParameters.bvn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch Address Verification Data
         * @param {KycApiGetAddressVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressVerification(requestParameters: KycApiGetAddressVerificationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressVerification(requestParameters.appId, requestParameters.referenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lookup BVN from NUBAN
         * @param {KycApiGetBvnFromNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBvnFromNuban(requestParameters: KycApiGetBvnFromNubanRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBvnFromNuban(requestParameters.appId, requestParameters.bankCode, requestParameters.accountNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {KycApiGetVinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVin(requestParameters: KycApiGetVinRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVin(requestParameters.appId, requestParameters.vin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit Address
         * @param {KycApiSubmitAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAddress(requestParameters: KycApiSubmitAddressRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KycSubmitAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitAddress(requestParameters.appId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KycApi - factory interface
 * @export
 */
export const KycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KycApiFp(configuration)
    return {
        /**
         * 
         * @summary Liveness Check
         * @param {KycApiCheckLivenessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveness(requestParameters: KycApiCheckLivenessRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.checkLiveness(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Fetch Accounts 
         * @param {KycApiGetAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(requestParameters: KycApiGetAccountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Address Verification Data
         * @param {KycApiGetAddressVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressVerification(requestParameters: KycApiGetAddressVerificationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAddressVerification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lookup BVN from NUBAN
         * @param {KycApiGetBvnFromNubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBvnFromNuban(requestParameters: KycApiGetBvnFromNubanRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBvnFromNuban(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get VIN
         * @param {KycApiGetVinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVin(requestParameters: KycApiGetVinRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetVinResponse> {
            return localVarFp.getVin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit Address
         * @param {KycApiSubmitAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAddress(requestParameters: KycApiSubmitAddressRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KycSubmitAddressResponse> {
            return localVarFp.submitAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkLiveness operation in KycApi.
 * @export
 * @interface KycApiCheckLivenessRequest
 */
export type KycApiCheckLivenessRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiCheckLiveness
    */
    readonly appId?: string
    
} & KycCheckLivenessRequest

/**
 * Request parameters for getAccounts operation in KycApi.
 * @export
 * @interface KycApiGetAccountsRequest
 */
export type KycApiGetAccountsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetAccounts
    */
    readonly appId?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetAccounts
    */
    readonly bvn?: string
    
}

/**
 * Request parameters for getAddressVerification operation in KycApi.
 * @export
 * @interface KycApiGetAddressVerificationRequest
 */
export type KycApiGetAddressVerificationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetAddressVerification
    */
    readonly appId?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetAddressVerification
    */
    readonly referenceId?: string
    
}

/**
 * Request parameters for getBvnFromNuban operation in KycApi.
 * @export
 * @interface KycApiGetBvnFromNubanRequest
 */
export type KycApiGetBvnFromNubanRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetBvnFromNuban
    */
    readonly appId?: string
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetBvnFromNuban
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {number}
    * @memberof KycApiGetBvnFromNuban
    */
    readonly accountNumber?: number
    
}

/**
 * Request parameters for getVin operation in KycApi.
 * @export
 * @interface KycApiGetVinRequest
 */
export type KycApiGetVinRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVin
    */
    readonly appId?: string
    
    /**
    * 
    * @type {string}
    * @memberof KycApiGetVin
    */
    readonly vin?: string
    
}

/**
 * Request parameters for submitAddress operation in KycApi.
 * @export
 * @interface KycApiSubmitAddressRequest
 */
export type KycApiSubmitAddressRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KycApiSubmitAddress
    */
    readonly appId?: string
    
} & KycSubmitAddressRequest

/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
export class KycApi extends KycApiCustom {
    /**
     * 
     * @summary Liveness Check
     * @param {KycApiCheckLivenessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public checkLiveness(requestParameters: KycApiCheckLivenessRequest, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).checkLiveness(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Fetch Accounts 
     * @param {KycApiGetAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getAccounts(requestParameters: KycApiGetAccountsRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Address Verification Data
     * @param {KycApiGetAddressVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getAddressVerification(requestParameters: KycApiGetAddressVerificationRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getAddressVerification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lookup BVN from NUBAN
     * @param {KycApiGetBvnFromNubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getBvnFromNuban(requestParameters: KycApiGetBvnFromNubanRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getBvnFromNuban(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get VIN
     * @param {KycApiGetVinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public getVin(requestParameters: KycApiGetVinRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).getVin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit Address
     * @param {KycApiSubmitAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public submitAddress(requestParameters: KycApiSubmitAddressRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).submitAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
