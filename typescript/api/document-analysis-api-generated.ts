/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyzeDocumentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentAnalysisApi - axios parameter creator
 * @export
 */
export const DocumentAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document/analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentAnalysisApi - functional programming interface
 * @export
 */
export const DocumentAnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentAnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeDocument(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyzeDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeDocument(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentAnalysisApi - factory interface
 * @export
 */
export const DocumentAnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentAnalysisApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Document Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDocument(options?: AxiosRequestConfig): AxiosPromise<AnalyzeDocumentResponse> {
            return localVarFp.analyzeDocument(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentAnalysisApiGenerated - object-oriented interface
 * @export
 * @class DocumentAnalysisApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentAnalysisApiGenerated extends BaseAPI {
    /**
     * 
     * @summary KYC - Document Analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentAnalysisApiGenerated
     */
    public analyzeDocument(options?: AxiosRequestConfig) {
        return DocumentAnalysisApiFp(this.configuration).analyzeDocument(options).then((request) => request(this.axios, this.basePath));
    }
}
