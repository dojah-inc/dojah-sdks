/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ZwKycCheckCreditResponse } from '../models';
// @ts-ignore
import { ZwKycVerifyIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ZwKycApi - axios parameter creator
 * @export
 */
export const ZwKycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Credit Check
         * @param {string} [idNumber] 
         * @param {string} [name] 
         * @param {string} [surname] 
         * @param {string} [gender] 
         * @param {string} [dob] 
         * @param {string} [maritalStatus] 
         * @param {number} [mobileNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCredit: async (idNumber?: string, name?: string, surname?: string, gender?: string, dob?: string, maritalStatus?: string, mobileNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zw/kyc/fcb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (idNumber !== undefined) {
                localVarQueryParameter['id_number'] = idNumber;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (surname !== undefined) {
                localVarQueryParameter['surname'] = surname;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }

            if (maritalStatus !== undefined) {
                localVarQueryParameter['marital_status'] = maritalStatus;
            }

            if (mobileNumber !== undefined) {
                localVarQueryParameter['mobile_number'] = mobileNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary National ID Verification
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyId: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zw/kyc/nin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZwKycApi - functional programming interface
 * @export
 */
export const ZwKycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZwKycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Credit Check
         * @param {ZwKycApiCheckCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCredit(requestParameters: ZwKycApiCheckCreditRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZwKycCheckCreditResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCredit(requestParameters.idNumber, requestParameters.name, requestParameters.surname, requestParameters.gender, requestParameters.dob, requestParameters.maritalStatus, requestParameters.mobileNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary National ID Verification
         * @param {ZwKycApiVerifyIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyId(requestParameters: ZwKycApiVerifyIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZwKycVerifyIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyId(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZwKycApi - factory interface
 * @export
 */
export const ZwKycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZwKycApiFp(configuration)
    return {
        /**
         * 
         * @summary Credit Check
         * @param {ZwKycApiCheckCreditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCredit(requestParameters: ZwKycApiCheckCreditRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ZwKycCheckCreditResponse> {
            return localVarFp.checkCredit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary National ID Verification
         * @param {ZwKycApiVerifyIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyId(requestParameters: ZwKycApiVerifyIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ZwKycVerifyIdResponse> {
            return localVarFp.verifyId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkCredit operation in ZwKycApi.
 * @export
 * @interface ZwKycApiCheckCreditRequest
 */
export type ZwKycApiCheckCreditRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly idNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly name?: string
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly surname?: string
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly gender?: string
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly dob?: string
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiCheckCredit
    */
    readonly maritalStatus?: string
    
    /**
    * 
    * @type {number}
    * @memberof ZwKycApiCheckCredit
    */
    readonly mobileNumber?: number
    
}

/**
 * Request parameters for verifyId operation in ZwKycApi.
 * @export
 * @interface ZwKycApiVerifyIdRequest
 */
export type ZwKycApiVerifyIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ZwKycApiVerifyId
    */
    readonly id?: string
    
}

/**
 * ZwKycApiGenerated - object-oriented interface
 * @export
 * @class ZwKycApiGenerated
 * @extends {BaseAPI}
 */
export class ZwKycApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Credit Check
     * @param {ZwKycApiCheckCreditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZwKycApiGenerated
     */
    public checkCredit(requestParameters: ZwKycApiCheckCreditRequest = {}, options?: AxiosRequestConfig) {
        return ZwKycApiFp(this.configuration).checkCredit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary National ID Verification
     * @param {ZwKycApiVerifyIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZwKycApiGenerated
     */
    public verifyId(requestParameters: ZwKycApiVerifyIdRequest = {}, options?: AxiosRequestConfig) {
        return ZwKycApiFp(this.configuration).verifyId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
