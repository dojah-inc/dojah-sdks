/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetNationalIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { KeKycApiCustom } from "./ke-kyc-api-custom";
/**
 * KeKycApi - axios parameter creator
 * @export
 */
export const KeKycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {number} [id] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [middleName] 
         * @param {string} [dateOfBirth] 
         * @param {string} [gender] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNationalId: async (id?: number, firstName?: string, lastName?: string, middleName?: string, dateOfBirth?: string, gender?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ke/kyc/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (middleName !== undefined) {
                localVarQueryParameter['middle_name'] = middleName;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['date_of_birth'] = dateOfBirth;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeKycApi - functional programming interface
 * @export
 */
export const KeKycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeKycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {KeKycApiGetNationalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNationalId(requestParameters: KeKycApiGetNationalIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNationalIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNationalId(requestParameters.id, requestParameters.firstName, requestParameters.lastName, requestParameters.middleName, requestParameters.dateOfBirth, requestParameters.gender, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeKycApi - factory interface
 * @export
 */
export const KeKycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeKycApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - National ID
         * @param {KeKycApiGetNationalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNationalId(requestParameters: KeKycApiGetNationalIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetNationalIdResponse> {
            return localVarFp.getNationalId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getNationalId operation in KeKycApi.
 * @export
 * @interface KeKycApiGetNationalIdRequest
 */
export type KeKycApiGetNationalIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KeKycApiGetNationalId
    */
    readonly id?: number
    
    /**
    * 
    * @type {string}
    * @memberof KeKycApiGetNationalId
    */
    readonly firstName?: string
    
    /**
    * 
    * @type {string}
    * @memberof KeKycApiGetNationalId
    */
    readonly lastName?: string
    
    /**
    * 
    * @type {string}
    * @memberof KeKycApiGetNationalId
    */
    readonly middleName?: string
    
    /**
    * 
    * @type {string}
    * @memberof KeKycApiGetNationalId
    */
    readonly dateOfBirth?: string
    
    /**
    * 
    * @type {string}
    * @memberof KeKycApiGetNationalId
    */
    readonly gender?: string
    
}

/**
 * KeKycApi - object-oriented interface
 * @export
 * @class KeKycApi
 * @extends {BaseAPI}
 */
export class KeKycApi extends KeKycApiCustom {
    /**
     * 
     * @summary KYC - National ID
     * @param {KeKycApiGetNationalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeKycApi
     */
    public getNationalId(requestParameters: KeKycApiGetNationalIdRequest = {}, options?: AxiosRequestConfig) {
        return KeKycApiFp(this.configuration).getNationalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
