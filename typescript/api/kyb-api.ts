/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetAdvancedCacResponse } from '../models';
// @ts-ignore
import { GetBasicCacResponse } from '../models';
// @ts-ignore
import { GetCacResponse } from '../models';
// @ts-ignore
import { GetTinResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { KybApiCustom } from "./kyb-api-custom";
/**
 * KybApi - axios parameter creator
 * @export
 */
export const KybApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {string} [_class] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedCac: async (rc?: number, type?: string, _class?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac/advance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (rc !== undefined) {
                localVarQueryParameter['rc'] = rc;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (_class !== undefined) {
                localVarQueryParameter['class'] = _class;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {number} [rc] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicCac: async (rc?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (rc !== undefined) {
                localVarQueryParameter['rc'] = rc;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {number} [rcNumber] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCac: async (rcNumber?: number, companyName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/cac`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (rcNumber !== undefined) {
                localVarQueryParameter['rc_number'] = rcNumber;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {string} [tin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTin: async (tin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/tin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (tin !== undefined) {
                localVarQueryParameter['tin'] = tin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KybApi - functional programming interface
 * @export
 */
export const KybApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KybApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {KybApiGetAdvancedCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvancedCac(requestParameters: KybApiGetAdvancedCacRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdvancedCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvancedCac(requestParameters.rc, requestParameters.type, requestParameters._class, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {KybApiGetBasicCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicCac(requestParameters: KybApiGetBasicCacRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBasicCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicCac(requestParameters.rc, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {KybApiGetCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCac(requestParameters: KybApiGetCacRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCac(requestParameters.rcNumber, requestParameters.companyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {KybApiGetTinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTin(requestParameters: KybApiGetTinRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTin(requestParameters.tin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KybApi - factory interface
 * @export
 */
export const KybApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KybApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Get CAC Advanced
         * @param {KybApiGetAdvancedCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvancedCac(requestParameters: KybApiGetAdvancedCacRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAdvancedCacResponse> {
            return localVarFp.getAdvancedCac(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYB - Get CAC 2
         * @param {KybApiGetBasicCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicCac(requestParameters: KybApiGetBasicCacRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetBasicCacResponse> {
            return localVarFp.getBasicCac(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Get CAC 
         * @param {KybApiGetCacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCac(requestParameters: KybApiGetCacRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetCacResponse> {
            return localVarFp.getCac(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Fetch Tin
         * @param {KybApiGetTinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTin(requestParameters: KybApiGetTinRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetTinResponse> {
            return localVarFp.getTin(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdvancedCac operation in KybApi.
 * @export
 * @interface KybApiGetAdvancedCacRequest
 */
export type KybApiGetAdvancedCacRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KybApiGetAdvancedCac
    */
    readonly rc?: number
    
    /**
    * 
    * @type {string}
    * @memberof KybApiGetAdvancedCac
    */
    readonly type?: string
    
    /**
    * 
    * @type {string}
    * @memberof KybApiGetAdvancedCac
    */
    readonly _class?: string
    
}

/**
 * Request parameters for getBasicCac operation in KybApi.
 * @export
 * @interface KybApiGetBasicCacRequest
 */
export type KybApiGetBasicCacRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KybApiGetBasicCac
    */
    readonly rc?: number
    
    /**
    * 
    * @type {string}
    * @memberof KybApiGetBasicCac
    */
    readonly type?: string
    
}

/**
 * Request parameters for getCac operation in KybApi.
 * @export
 * @interface KybApiGetCacRequest
 */
export type KybApiGetCacRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof KybApiGetCac
    */
    readonly rcNumber?: number
    
    /**
    * 
    * @type {string}
    * @memberof KybApiGetCac
    */
    readonly companyName?: string
    
}

/**
 * Request parameters for getTin operation in KybApi.
 * @export
 * @interface KybApiGetTinRequest
 */
export type KybApiGetTinRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KybApiGetTin
    */
    readonly tin?: string
    
}

/**
 * KybApi - object-oriented interface
 * @export
 * @class KybApi
 * @extends {BaseAPI}
 */
export class KybApi extends KybApiCustom {
    /**
     * 
     * @summary KYC - Get CAC Advanced
     * @param {KybApiGetAdvancedCacRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KybApi
     */
    public getAdvancedCac(requestParameters: KybApiGetAdvancedCacRequest = {}, options?: AxiosRequestConfig) {
        return KybApiFp(this.configuration).getAdvancedCac(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYB - Get CAC 2
     * @param {KybApiGetBasicCacRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KybApi
     */
    public getBasicCac(requestParameters: KybApiGetBasicCacRequest = {}, options?: AxiosRequestConfig) {
        return KybApiFp(this.configuration).getBasicCac(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Get CAC 
     * @param {KybApiGetCacRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KybApi
     */
    public getCac(requestParameters: KybApiGetCacRequest = {}, options?: AxiosRequestConfig) {
        return KybApiFp(this.configuration).getCac(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Fetch Tin
     * @param {KybApiGetTinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KybApi
     */
    public getTin(requestParameters: KybApiGetTinRequest = {}, options?: AxiosRequestConfig) {
        return KybApiFp(this.configuration).getTin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
