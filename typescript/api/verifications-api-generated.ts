/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH Publilc APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VerificationsVerifySelfieNinRequest } from '../models';
// @ts-ignore
import { VerificationsVerifySelfieVninRequest } from '../models';
// @ts-ignore
import { VerifyAgeResponse } from '../models';
// @ts-ignore
import { VerifySelfieBvnRequest } from '../models';
// @ts-ignore
import { VerifySelfieBvnResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VerificationsApi - axios parameter creator
 * @export
 */
export const VerificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {number} [bvn] 
         * @param {string} [firstName] 
         * @param {string} [dob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn: async (bvn?: number, firstName?: string, dob?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/bvn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (bvn !== undefined) {
                localVarQueryParameter['bvn'] = bvn;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {string} [mode] 
         * @param {number} [accountNumber] 
         * @param {number} [bankCode] 
         * @param {string} [dob] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge: async (mode?: string, accountNumber?: number, bankCode?: number, dob?: string, firstName?: string, lastName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/kyc/age_verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['account_number'] = accountNumber;
            }

            if (bankCode !== undefined) {
                localVarQueryParameter['bank_code'] = bankCode;
            }

            if (dob !== undefined) {
                localVarQueryParameter['dob'] = dob;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYV - Selfie BVN Verificatoin
         * @param {VerifySelfieBvnRequest} verifySelfieBvnRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn: async (verifySelfieBvnRequest: VerifySelfieBvnRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifySelfieBvnRequest' is not null or undefined
            assertParamExists('verifySelfieBvn', 'verifySelfieBvnRequest', verifySelfieBvnRequest)
            const localVarPath = `/v1/kyc/bvn/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifySelfieBvnRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifySelfieBvnRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {VerificationsVerifySelfieNinRequest} verificationsVerifySelfieNinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin: async (verificationsVerifySelfieNinRequest: VerificationsVerifySelfieNinRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationsVerifySelfieNinRequest' is not null or undefined
            assertParamExists('verifySelfieNin', 'verificationsVerifySelfieNinRequest', verificationsVerifySelfieNinRequest)
            const localVarPath = `/api/v1/kyc/nin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verificationsVerifySelfieNinRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verificationsVerifySelfieNinRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KYC - Selfie vNIN verification
         * @param {VerificationsVerifySelfieVninRequest} verificationsVerifySelfieVninRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieVnin: async (verificationsVerifySelfieVninRequest: VerificationsVerifySelfieVninRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationsVerifySelfieVninRequest' is not null or undefined
            assertParamExists('verifySelfieVnin', 'verificationsVerifySelfieVninRequest', verificationsVerifySelfieVninRequest)
            const localVarPath = `/api/v1/kyc/vnin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Appid", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verificationsVerifySelfieVninRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verificationsVerifySelfieVninRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationsApi - functional programming interface
 * @export
 */
export const VerificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {VerificationsApiValidateBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateBvn(requestParameters: VerificationsApiValidateBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateBvn(requestParameters.bvn, requestParameters.firstName, requestParameters.dob, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {VerificationsApiVerifyAgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAge(requestParameters: VerificationsApiVerifyAgeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAge(requestParameters.mode, requestParameters.accountNumber, requestParameters.bankCode, requestParameters.dob, requestParameters.firstName, requestParameters.lastName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYV - Selfie BVN Verificatoin
         * @param {VerificationsApiVerifySelfieBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieBvn(requestParameters: VerificationsApiVerifySelfieBvnRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifySelfieBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieBvn(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {VerificationsApiVerifySelfieNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieNin(requestParameters: VerificationsApiVerifySelfieNinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieNin(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KYC - Selfie vNIN verification
         * @param {VerificationsApiVerifySelfieVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySelfieVnin(requestParameters: VerificationsApiVerifySelfieVninRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySelfieVnin(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationsApi - factory interface
 * @export
 */
export const VerificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationsApiFp(configuration)
    return {
        /**
         * 
         * @summary KYC - Validate BVN
         * @param {VerificationsApiValidateBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBvn(requestParameters: VerificationsApiValidateBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.validateBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Age Verification
         * @param {VerificationsApiVerifyAgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAge(requestParameters: VerificationsApiVerifyAgeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifyAgeResponse> {
            return localVarFp.verifyAge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYV - Selfie BVN Verificatoin
         * @param {VerificationsApiVerifySelfieBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieBvn(requestParameters: VerificationsApiVerifySelfieBvnRequest, options?: AxiosRequestConfig): AxiosPromise<VerifySelfieBvnResponse> {
            return localVarFp.verifySelfieBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie NIN Verification
         * @param {VerificationsApiVerifySelfieNinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieNin(requestParameters: VerificationsApiVerifySelfieNinRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.verifySelfieNin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KYC - Selfie vNIN verification
         * @param {VerificationsApiVerifySelfieVninRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySelfieVnin(requestParameters: VerificationsApiVerifySelfieVninRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.verifySelfieVnin(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for validateBvn operation in VerificationsApi.
 * @export
 * @interface VerificationsApiValidateBvnRequest
 */
export type VerificationsApiValidateBvnRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof VerificationsApiValidateBvn
    */
    readonly bvn?: number
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiValidateBvn
    */
    readonly firstName?: string
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiValidateBvn
    */
    readonly dob?: string
    
}

/**
 * Request parameters for verifyAge operation in VerificationsApi.
 * @export
 * @interface VerificationsApiVerifyAgeRequest
 */
export type VerificationsApiVerifyAgeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiVerifyAge
    */
    readonly mode?: string
    
    /**
    * 
    * @type {number}
    * @memberof VerificationsApiVerifyAge
    */
    readonly accountNumber?: number
    
    /**
    * 
    * @type {number}
    * @memberof VerificationsApiVerifyAge
    */
    readonly bankCode?: number
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiVerifyAge
    */
    readonly dob?: string
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiVerifyAge
    */
    readonly firstName?: string
    
    /**
    * 
    * @type {string}
    * @memberof VerificationsApiVerifyAge
    */
    readonly lastName?: string
    
}

/**
 * Request parameters for verifySelfieBvn operation in VerificationsApi.
 * @export
 * @interface VerificationsApiVerifySelfieBvnRequest
 */
export type VerificationsApiVerifySelfieBvnRequest = {
    
} & VerifySelfieBvnRequest

/**
 * Request parameters for verifySelfieNin operation in VerificationsApi.
 * @export
 * @interface VerificationsApiVerifySelfieNinRequest
 */
export type VerificationsApiVerifySelfieNinRequest = {
    
} & VerificationsVerifySelfieNinRequest

/**
 * Request parameters for verifySelfieVnin operation in VerificationsApi.
 * @export
 * @interface VerificationsApiVerifySelfieVninRequest
 */
export type VerificationsApiVerifySelfieVninRequest = {
    
} & VerificationsVerifySelfieVninRequest

/**
 * VerificationsApiGenerated - object-oriented interface
 * @export
 * @class VerificationsApiGenerated
 * @extends {BaseAPI}
 */
export class VerificationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary KYC - Validate BVN
     * @param {VerificationsApiValidateBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiGenerated
     */
    public validateBvn(requestParameters: VerificationsApiValidateBvnRequest = {}, options?: AxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).validateBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Age Verification
     * @param {VerificationsApiVerifyAgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiGenerated
     */
    public verifyAge(requestParameters: VerificationsApiVerifyAgeRequest = {}, options?: AxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).verifyAge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYV - Selfie BVN Verificatoin
     * @param {VerificationsApiVerifySelfieBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiGenerated
     */
    public verifySelfieBvn(requestParameters: VerificationsApiVerifySelfieBvnRequest, options?: AxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).verifySelfieBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie NIN Verification
     * @param {VerificationsApiVerifySelfieNinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiGenerated
     */
    public verifySelfieNin(requestParameters: VerificationsApiVerifySelfieNinRequest, options?: AxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).verifySelfieNin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KYC - Selfie vNIN verification
     * @param {VerificationsApiVerifySelfieVninRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiGenerated
     */
    public verifySelfieVnin(requestParameters: VerificationsApiVerifySelfieVninRequest, options?: AxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).verifySelfieVnin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
