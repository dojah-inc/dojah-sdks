/* tslint:disable */
/* eslint-disable */
/**
 * DOJAH APIs
 * Use Dojah to verify, onboard and manage user identity across Africa!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CollectStatusFromPdfResponse } from '../models';
// @ts-ignore
import { CollectTransactionsRequest } from '../models';
// @ts-ignore
import { CollectTransactionsRequestTransactionsInner } from '../models';
// @ts-ignore
import { CollectTransactionsResponse } from '../models';
// @ts-ignore
import { FinancialGetBasicBvnResponse } from '../models';
// @ts-ignore
import { FinancialGetFullBvnResponse } from '../models';
// @ts-ignore
import { GetAccountAnalysisResponse } from '../models';
// @ts-ignore
import { GetAccountResponse } from '../models';
// @ts-ignore
import { GetAccountSubscriptionsResponse } from '../models';
// @ts-ignore
import { GetAccountTransactionsResponse } from '../models';
// @ts-ignore
import { GetEarningStructureResponse } from '../models';
// @ts-ignore
import { GetSpendingPatternResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { FinancialApiCustom } from "./financial-api-custom";
/**
 * FinancialApi - axios parameter creator
 * @export
 */
export const FinancialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {File} [statement] 
         * @param {number} [bankCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectStatusFromPdf: async (statement?: File, bankCode?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/transactions/pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

            if (statement !== undefined) { 
                localVarFormParams.append('statement', statement as any);
            }
    
            if (bankCode !== undefined) { 
                localVarFormParams.append('bank_code', bankCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {CollectTransactionsRequest} [collectTransactionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions: async (collectTransactionsRequest?: CollectTransactionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectTransactionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectTransactionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/account_information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAnalysis: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSubscriptions: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/account_subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {string} [accountId] 
         * @param {number} [length] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions: async (accountId?: string, length?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/financial/account_transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/bvn_information/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningStructure: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/earning_structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/bvn_information/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {string} [accountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingPattern: async (accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial/spending_pattern`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })
            // authentication appIdAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "AppId", configuration })
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinancialApi - functional programming interface
 * @export
 */
export const FinancialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FinancialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {FinancialApiCollectStatusFromPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectStatusFromPdf(requestParameters: FinancialApiCollectStatusFromPdfRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectStatusFromPdfResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectStatusFromPdf(requestParameters.statement, requestParameters.bankCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {FinancialApiCollectTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectTransactions(requestParameters: FinancialApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectTransactions(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {FinancialApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(requestParameters: FinancialApiGetAccountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountAnalysis(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountAnalysisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountAnalysis(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {FinancialApiGetAccountSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountSubscriptions(requestParameters: FinancialApiGetAccountSubscriptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountSubscriptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountSubscriptions(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {FinancialApiGetAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountTransactions(requestParameters: FinancialApiGetAccountTransactionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountTransactions(requestParameters.accountId, requestParameters.length, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {FinancialApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicBvn(requestParameters: FinancialApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialGetBasicBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicBvn(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {FinancialApiGetEarningStructureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEarningStructure(requestParameters: FinancialApiGetEarningStructureRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEarningStructureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEarningStructure(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {FinancialApiGetFullBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullBvn(requestParameters: FinancialApiGetFullBvnRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialGetFullBvnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullBvn(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {FinancialApiGetSpendingPatternRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpendingPattern(requestParameters: FinancialApiGetSpendingPatternRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSpendingPatternResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpendingPattern(requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FinancialApi - factory interface
 * @export
 */
export const FinancialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FinancialApiFp(configuration)
    return {
        /**
         * 
         * @summary Collect Status via PDF Statement
         * @param {FinancialApiCollectStatusFromPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectStatusFromPdf(requestParameters: FinancialApiCollectStatusFromPdfRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollectStatusFromPdfResponse> {
            return localVarFp.collectStatusFromPdf(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Collect Transactions
         * @param {FinancialApiCollectTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions(requestParameters: FinancialApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollectTransactionsResponse> {
            return localVarFp.collectTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * /services/@app_id/account/@account_id
         * @summary Get Account Information
         * @param {FinancialApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: FinancialApiGetAccountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAccountResponse> {
            return localVarFp.getAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Analysis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAnalysis(options?: AxiosRequestConfig): AxiosPromise<GetAccountAnalysisResponse> {
            return localVarFp.getAccountAnalysis(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Subscriptions
         * @param {FinancialApiGetAccountSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountSubscriptions(requestParameters: FinancialApiGetAccountSubscriptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAccountSubscriptionsResponse> {
            return localVarFp.getAccountSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Account Transactions
         * @param {FinancialApiGetAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactions(requestParameters: FinancialApiGetAccountTransactionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetAccountTransactionsResponse> {
            return localVarFp.getAccountTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BVN Information Basic
         * @param {FinancialApiGetBasicBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicBvn(requestParameters: FinancialApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FinancialGetBasicBvnResponse> {
            return localVarFp.getBasicBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Earning Structure
         * @param {FinancialApiGetEarningStructureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarningStructure(requestParameters: FinancialApiGetEarningStructureRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetEarningStructureResponse> {
            return localVarFp.getEarningStructure(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BVN Information Full
         * @param {FinancialApiGetFullBvnRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullBvn(requestParameters: FinancialApiGetFullBvnRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FinancialGetFullBvnResponse> {
            return localVarFp.getFullBvn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Spending Pattern
         * @param {FinancialApiGetSpendingPatternRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingPattern(requestParameters: FinancialApiGetSpendingPatternRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetSpendingPatternResponse> {
            return localVarFp.getSpendingPattern(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for collectStatusFromPdf operation in FinancialApi.
 * @export
 * @interface FinancialApiCollectStatusFromPdfRequest
 */
export type FinancialApiCollectStatusFromPdfRequest = {
    
    /**
    * 
    * @type {File}
    * @memberof FinancialApiCollectStatusFromPdf
    */
    readonly statement?: File
    
    /**
    * 
    * @type {number}
    * @memberof FinancialApiCollectStatusFromPdf
    */
    readonly bankCode?: number
    
}

/**
 * Request parameters for collectTransactions operation in FinancialApi.
 * @export
 * @interface FinancialApiCollectTransactionsRequest
 */
export type FinancialApiCollectTransactionsRequest = {
    
} & CollectTransactionsRequest

/**
 * Request parameters for getAccount operation in FinancialApi.
 * @export
 * @interface FinancialApiGetAccountRequest
 */
export type FinancialApiGetAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetAccount
    */
    readonly accountId?: string
    
}

/**
 * Request parameters for getAccountSubscriptions operation in FinancialApi.
 * @export
 * @interface FinancialApiGetAccountSubscriptionsRequest
 */
export type FinancialApiGetAccountSubscriptionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetAccountSubscriptions
    */
    readonly accountId?: string
    
}

/**
 * Request parameters for getAccountTransactions operation in FinancialApi.
 * @export
 * @interface FinancialApiGetAccountTransactionsRequest
 */
export type FinancialApiGetAccountTransactionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetAccountTransactions
    */
    readonly accountId?: string
    
    /**
    * 
    * @type {number}
    * @memberof FinancialApiGetAccountTransactions
    */
    readonly length?: number
    
}

/**
 * Request parameters for getBasicBvn operation in FinancialApi.
 * @export
 * @interface FinancialApiGetBasicBvnRequest
 */
export type FinancialApiGetBasicBvnRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetBasicBvn
    */
    readonly accountId?: string
    
}

/**
 * Request parameters for getEarningStructure operation in FinancialApi.
 * @export
 * @interface FinancialApiGetEarningStructureRequest
 */
export type FinancialApiGetEarningStructureRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetEarningStructure
    */
    readonly accountId?: string
    
}

/**
 * Request parameters for getFullBvn operation in FinancialApi.
 * @export
 * @interface FinancialApiGetFullBvnRequest
 */
export type FinancialApiGetFullBvnRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetFullBvn
    */
    readonly accountId?: string
    
}

/**
 * Request parameters for getSpendingPattern operation in FinancialApi.
 * @export
 * @interface FinancialApiGetSpendingPatternRequest
 */
export type FinancialApiGetSpendingPatternRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FinancialApiGetSpendingPattern
    */
    readonly accountId?: string
    
}

/**
 * FinancialApi - object-oriented interface
 * @export
 * @class FinancialApi
 * @extends {BaseAPI}
 */
export class FinancialApi extends FinancialApiCustom {
    /**
     * 
     * @summary Collect Status via PDF Statement
     * @param {FinancialApiCollectStatusFromPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public collectStatusFromPdf(requestParameters: FinancialApiCollectStatusFromPdfRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).collectStatusFromPdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Collect Transactions
     * @param {FinancialApiCollectTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public collectTransactions(requestParameters: FinancialApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).collectTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * /services/@app_id/account/@account_id
     * @summary Get Account Information
     * @param {FinancialApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccount(requestParameters: FinancialApiGetAccountRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountAnalysis(options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountAnalysis(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Subscriptions
     * @param {FinancialApiGetAccountSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountSubscriptions(requestParameters: FinancialApiGetAccountSubscriptionsRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Account Transactions
     * @param {FinancialApiGetAccountTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getAccountTransactions(requestParameters: FinancialApiGetAccountTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getAccountTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BVN Information Basic
     * @param {FinancialApiGetBasicBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getBasicBvn(requestParameters: FinancialApiGetBasicBvnRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getBasicBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Earning Structure
     * @param {FinancialApiGetEarningStructureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getEarningStructure(requestParameters: FinancialApiGetEarningStructureRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getEarningStructure(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BVN Information Full
     * @param {FinancialApiGetFullBvnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getFullBvn(requestParameters: FinancialApiGetFullBvnRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getFullBvn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Spending Pattern
     * @param {FinancialApiGetSpendingPatternRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public getSpendingPattern(requestParameters: FinancialApiGetSpendingPatternRequest = {}, options?: AxiosRequestConfig) {
        return FinancialApiFp(this.configuration).getSpendingPattern(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
