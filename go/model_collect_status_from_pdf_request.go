/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
	"os"
)

// CollectStatusFromPdfRequest struct for CollectStatusFromPdfRequest
type CollectStatusFromPdfRequest struct {
	Statement **os.File `json:"statement,omitempty"`
	BankCode *int32 `json:"bank_code,omitempty"`
}

// NewCollectStatusFromPdfRequest instantiates a new CollectStatusFromPdfRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectStatusFromPdfRequest() *CollectStatusFromPdfRequest {
	this := CollectStatusFromPdfRequest{}
	return &this
}

// NewCollectStatusFromPdfRequestWithDefaults instantiates a new CollectStatusFromPdfRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectStatusFromPdfRequestWithDefaults() *CollectStatusFromPdfRequest {
	this := CollectStatusFromPdfRequest{}
	return &this
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *CollectStatusFromPdfRequest) GetStatement() *os.File {
	if o == nil || isNil(o.Statement) {
		var ret *os.File
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectStatusFromPdfRequest) GetStatementOk() (**os.File, bool) {
	if o == nil || isNil(o.Statement) {
    return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *CollectStatusFromPdfRequest) HasStatement() bool {
	if o != nil && !isNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given *os.File and assigns it to the Statement field.
func (o *CollectStatusFromPdfRequest) SetStatement(v *os.File) {
	o.Statement = &v
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *CollectStatusFromPdfRequest) GetBankCode() int32 {
	if o == nil || isNil(o.BankCode) {
		var ret int32
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectStatusFromPdfRequest) GetBankCodeOk() (*int32, bool) {
	if o == nil || isNil(o.BankCode) {
    return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *CollectStatusFromPdfRequest) HasBankCode() bool {
	if o != nil && !isNil(o.BankCode) {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given int32 and assigns it to the BankCode field.
func (o *CollectStatusFromPdfRequest) SetBankCode(v int32) {
	o.BankCode = &v
}

func (o CollectStatusFromPdfRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Statement) {
		toSerialize["statement"] = o.Statement
	}
	if !isNil(o.BankCode) {
		toSerialize["bank_code"] = o.BankCode
	}
	return json.Marshal(toSerialize)
}

type NullableCollectStatusFromPdfRequest struct {
	value *CollectStatusFromPdfRequest
	isSet bool
}

func (v NullableCollectStatusFromPdfRequest) Get() *CollectStatusFromPdfRequest {
	return v.value
}

func (v *NullableCollectStatusFromPdfRequest) Set(val *CollectStatusFromPdfRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectStatusFromPdfRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectStatusFromPdfRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectStatusFromPdfRequest(val *CollectStatusFromPdfRequest) *NullableCollectStatusFromPdfRequest {
	return &NullableCollectStatusFromPdfRequest{value: val, isSet: true}
}

func (v NullableCollectStatusFromPdfRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectStatusFromPdfRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


