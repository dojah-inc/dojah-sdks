/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// VerifyAgeResponse struct for VerifyAgeResponse
type VerifyAgeResponse struct {
	Entity *VerifyAgeResponseEntity `json:"entity,omitempty"`
}

// NewVerifyAgeResponse instantiates a new VerifyAgeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyAgeResponse() *VerifyAgeResponse {
	this := VerifyAgeResponse{}
	return &this
}

// NewVerifyAgeResponseWithDefaults instantiates a new VerifyAgeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyAgeResponseWithDefaults() *VerifyAgeResponse {
	this := VerifyAgeResponse{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *VerifyAgeResponse) GetEntity() VerifyAgeResponseEntity {
	if o == nil || isNil(o.Entity) {
		var ret VerifyAgeResponseEntity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyAgeResponse) GetEntityOk() (*VerifyAgeResponseEntity, bool) {
	if o == nil || isNil(o.Entity) {
    return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *VerifyAgeResponse) HasEntity() bool {
	if o != nil && !isNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given VerifyAgeResponseEntity and assigns it to the Entity field.
func (o *VerifyAgeResponse) SetEntity(v VerifyAgeResponseEntity) {
	o.Entity = &v
}

func (o VerifyAgeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableVerifyAgeResponse struct {
	value *VerifyAgeResponse
	isSet bool
}

func (v NullableVerifyAgeResponse) Get() *VerifyAgeResponse {
	return v.value
}

func (v *NullableVerifyAgeResponse) Set(val *VerifyAgeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyAgeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyAgeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyAgeResponse(val *VerifyAgeResponse) *NullableVerifyAgeResponse {
	return &NullableVerifyAgeResponse{value: val, isSet: true}
}

func (v NullableVerifyAgeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyAgeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


