/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// ValidateBvnResponseEntityFirstName struct for ValidateBvnResponseEntityFirstName
type ValidateBvnResponseEntityFirstName struct {
	ConfidenceValue *float32 `json:"confidence_value,omitempty"`
	Status *bool `json:"status,omitempty"`
}

// NewValidateBvnResponseEntityFirstName instantiates a new ValidateBvnResponseEntityFirstName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateBvnResponseEntityFirstName() *ValidateBvnResponseEntityFirstName {
	this := ValidateBvnResponseEntityFirstName{}
	return &this
}

// NewValidateBvnResponseEntityFirstNameWithDefaults instantiates a new ValidateBvnResponseEntityFirstName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateBvnResponseEntityFirstNameWithDefaults() *ValidateBvnResponseEntityFirstName {
	this := ValidateBvnResponseEntityFirstName{}
	return &this
}

// GetConfidenceValue returns the ConfidenceValue field value if set, zero value otherwise.
func (o *ValidateBvnResponseEntityFirstName) GetConfidenceValue() float32 {
	if o == nil || isNil(o.ConfidenceValue) {
		var ret float32
		return ret
	}
	return *o.ConfidenceValue
}

// GetConfidenceValueOk returns a tuple with the ConfidenceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateBvnResponseEntityFirstName) GetConfidenceValueOk() (*float32, bool) {
	if o == nil || isNil(o.ConfidenceValue) {
    return nil, false
	}
	return o.ConfidenceValue, true
}

// HasConfidenceValue returns a boolean if a field has been set.
func (o *ValidateBvnResponseEntityFirstName) HasConfidenceValue() bool {
	if o != nil && !isNil(o.ConfidenceValue) {
		return true
	}

	return false
}

// SetConfidenceValue gets a reference to the given float32 and assigns it to the ConfidenceValue field.
func (o *ValidateBvnResponseEntityFirstName) SetConfidenceValue(v float32) {
	o.ConfidenceValue = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ValidateBvnResponseEntityFirstName) GetStatus() bool {
	if o == nil || isNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateBvnResponseEntityFirstName) GetStatusOk() (*bool, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ValidateBvnResponseEntityFirstName) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *ValidateBvnResponseEntityFirstName) SetStatus(v bool) {
	o.Status = &v
}

func (o ValidateBvnResponseEntityFirstName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConfidenceValue) {
		toSerialize["confidence_value"] = o.ConfidenceValue
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableValidateBvnResponseEntityFirstName struct {
	value *ValidateBvnResponseEntityFirstName
	isSet bool
}

func (v NullableValidateBvnResponseEntityFirstName) Get() *ValidateBvnResponseEntityFirstName {
	return v.value
}

func (v *NullableValidateBvnResponseEntityFirstName) Set(val *ValidateBvnResponseEntityFirstName) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateBvnResponseEntityFirstName) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateBvnResponseEntityFirstName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateBvnResponseEntityFirstName(val *ValidateBvnResponseEntityFirstName) *NullableValidateBvnResponseEntityFirstName {
	return &NullableValidateBvnResponseEntityFirstName{value: val, isSet: true}
}

func (v NullableValidateBvnResponseEntityFirstName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateBvnResponseEntityFirstName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


