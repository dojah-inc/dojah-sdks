/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// VerificationsApiService VerificationsApi service
type VerificationsApiService service

type VerificationsApiValidateBvnRequest struct {
	ctx context.Context
	ApiService *VerificationsApiService
	appId *string
	bvn *int32
	firstName *string
	dob *string
}

func (r VerificationsApiValidateBvnRequest) AppId(appId string) VerificationsApiValidateBvnRequest {
	r.appId = &appId
	return r
}

func (r VerificationsApiValidateBvnRequest) Bvn(bvn int32) VerificationsApiValidateBvnRequest {
	r.bvn = &bvn
	return r
}

func (r VerificationsApiValidateBvnRequest) FirstName(firstName string) VerificationsApiValidateBvnRequest {
	r.firstName = &firstName
	return r
}

func (r VerificationsApiValidateBvnRequest) Dob(dob string) VerificationsApiValidateBvnRequest {
	r.dob = &dob
	return r
}

func (r VerificationsApiValidateBvnRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ValidateBvnExecute(r)
}

/*
ValidateBvn KYC - Validate BVN

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VerificationsApiValidateBvnRequest
*/
func (a *VerificationsApiService) ValidateBvn() VerificationsApiValidateBvnRequest {
	return VerificationsApiValidateBvnRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *VerificationsApiService) ValidateBvnExecute(r VerificationsApiValidateBvnRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerificationsApiService.ValidateBvn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kyc/bvn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bvn != nil {
		localVarQueryParams.Add("bvn", parameterToString(*r.bvn, ""))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("first_name", parameterToString(*r.firstName, ""))
	}
	if r.dob != nil {
		localVarQueryParams.Add("dob", parameterToString(*r.dob, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.appId != nil {
		localVarHeaderParams["AppId"] = parameterToString(*r.appId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VerificationsApiVerifyAgeRequest struct {
	ctx context.Context
	ApiService *VerificationsApiService
	appId *string
	mode *string
	accountNumber *int32
	bankCode *int32
	dob *string
	firstName *string
	lastName *string
}

func (r VerificationsApiVerifyAgeRequest) AppId(appId string) VerificationsApiVerifyAgeRequest {
	r.appId = &appId
	return r
}

func (r VerificationsApiVerifyAgeRequest) Mode(mode string) VerificationsApiVerifyAgeRequest {
	r.mode = &mode
	return r
}

func (r VerificationsApiVerifyAgeRequest) AccountNumber(accountNumber int32) VerificationsApiVerifyAgeRequest {
	r.accountNumber = &accountNumber
	return r
}

func (r VerificationsApiVerifyAgeRequest) BankCode(bankCode int32) VerificationsApiVerifyAgeRequest {
	r.bankCode = &bankCode
	return r
}

func (r VerificationsApiVerifyAgeRequest) Dob(dob string) VerificationsApiVerifyAgeRequest {
	r.dob = &dob
	return r
}

func (r VerificationsApiVerifyAgeRequest) FirstName(firstName string) VerificationsApiVerifyAgeRequest {
	r.firstName = &firstName
	return r
}

func (r VerificationsApiVerifyAgeRequest) LastName(lastName string) VerificationsApiVerifyAgeRequest {
	r.lastName = &lastName
	return r
}

func (r VerificationsApiVerifyAgeRequest) Execute() (*VerifyAgeResponse, *http.Response, error) {
	return r.ApiService.VerifyAgeExecute(r)
}

/*
VerifyAge KYC - Age Verification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VerificationsApiVerifyAgeRequest
*/
func (a *VerificationsApiService) VerifyAge() VerificationsApiVerifyAgeRequest {
	return VerificationsApiVerifyAgeRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return VerifyAgeResponse
func (a *VerificationsApiService) VerifyAgeExecute(r VerificationsApiVerifyAgeRequest) (*VerifyAgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerifyAgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerificationsApiService.VerifyAge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kyc/age_verification"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mode != nil {
		localVarQueryParams.Add("mode", parameterToString(*r.mode, ""))
	}
	if r.accountNumber != nil {
		localVarQueryParams.Add("account_number", parameterToString(*r.accountNumber, ""))
	}
	if r.bankCode != nil {
		localVarQueryParams.Add("bank_code", parameterToString(*r.bankCode, ""))
	}
	if r.dob != nil {
		localVarQueryParams.Add("dob", parameterToString(*r.dob, ""))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("first_name", parameterToString(*r.firstName, ""))
	}
	if r.lastName != nil {
		localVarQueryParams.Add("last_name", parameterToString(*r.lastName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.appId != nil {
		localVarHeaderParams["AppId"] = parameterToString(*r.appId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VerificationsApiVerifySelfieBvnRequest struct {
	ctx context.Context
	ApiService *VerificationsApiService
	verifySelfieBvnRequest *VerifySelfieBvnRequest
	appId *string
}

func (r VerificationsApiVerifySelfieBvnRequest) VerifySelfieBvnRequest(verifySelfieBvnRequest VerifySelfieBvnRequest) VerificationsApiVerifySelfieBvnRequest {
	r.verifySelfieBvnRequest = &verifySelfieBvnRequest
	return r
}

func (r VerificationsApiVerifySelfieBvnRequest) AppId(appId string) VerificationsApiVerifySelfieBvnRequest {
	r.appId = &appId
	return r
}

func (r VerificationsApiVerifySelfieBvnRequest) Execute() (*VerifySelfieBvnResponse, *http.Response, error) {
	return r.ApiService.VerifySelfieBvnExecute(r)
}

/*
VerifySelfieBvn KYV - Selfie BVN Verificatoin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VerificationsApiVerifySelfieBvnRequest
*/
func (a *VerificationsApiService) VerifySelfieBvn() VerificationsApiVerifySelfieBvnRequest {
	return VerificationsApiVerifySelfieBvnRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return VerifySelfieBvnResponse
func (a *VerificationsApiService) VerifySelfieBvnExecute(r VerificationsApiVerifySelfieBvnRequest) (*VerifySelfieBvnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerifySelfieBvnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerificationsApiService.VerifySelfieBvn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kyc/bvn/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.verifySelfieBvnRequest == nil {
		return localVarReturnValue, nil, reportError("verifySelfieBvnRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.appId != nil {
		localVarHeaderParams["AppId"] = parameterToString(*r.appId, "")
	}
	// body params
	localVarPostBody = r.verifySelfieBvnRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VerificationsApiVerifySelfieNinRequest struct {
	ctx context.Context
	ApiService *VerificationsApiService
	verificationsVerifySelfieNinRequest *VerificationsVerifySelfieNinRequest
	appId *string
}

func (r VerificationsApiVerifySelfieNinRequest) VerificationsVerifySelfieNinRequest(verificationsVerifySelfieNinRequest VerificationsVerifySelfieNinRequest) VerificationsApiVerifySelfieNinRequest {
	r.verificationsVerifySelfieNinRequest = &verificationsVerifySelfieNinRequest
	return r
}

func (r VerificationsApiVerifySelfieNinRequest) AppId(appId string) VerificationsApiVerifySelfieNinRequest {
	r.appId = &appId
	return r
}

func (r VerificationsApiVerifySelfieNinRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.VerifySelfieNinExecute(r)
}

/*
VerifySelfieNin KYC - Selfie NIN Verification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VerificationsApiVerifySelfieNinRequest
*/
func (a *VerificationsApiService) VerifySelfieNin() VerificationsApiVerifySelfieNinRequest {
	return VerificationsApiVerifySelfieNinRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *VerificationsApiService) VerifySelfieNinExecute(r VerificationsApiVerifySelfieNinRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerificationsApiService.VerifySelfieNin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/kyc/nin/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.verificationsVerifySelfieNinRequest == nil {
		return localVarReturnValue, nil, reportError("verificationsVerifySelfieNinRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.appId != nil {
		localVarHeaderParams["AppId"] = parameterToString(*r.appId, "")
	}
	// body params
	localVarPostBody = r.verificationsVerifySelfieNinRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VerificationsApiVerifySelfieVninRequest struct {
	ctx context.Context
	ApiService *VerificationsApiService
	verificationsVerifySelfieVninRequest *VerificationsVerifySelfieVninRequest
	appId *string
}

func (r VerificationsApiVerifySelfieVninRequest) VerificationsVerifySelfieVninRequest(verificationsVerifySelfieVninRequest VerificationsVerifySelfieVninRequest) VerificationsApiVerifySelfieVninRequest {
	r.verificationsVerifySelfieVninRequest = &verificationsVerifySelfieVninRequest
	return r
}

func (r VerificationsApiVerifySelfieVninRequest) AppId(appId string) VerificationsApiVerifySelfieVninRequest {
	r.appId = &appId
	return r
}

func (r VerificationsApiVerifySelfieVninRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.VerifySelfieVninExecute(r)
}

/*
VerifySelfieVnin KYC - Selfie vNIN verification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VerificationsApiVerifySelfieVninRequest
*/
func (a *VerificationsApiService) VerifySelfieVnin() VerificationsApiVerifySelfieVninRequest {
	return VerificationsApiVerifySelfieVninRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *VerificationsApiService) VerifySelfieVninExecute(r VerificationsApiVerifySelfieVninRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerificationsApiService.VerifySelfieVnin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/kyc/vnin/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.verificationsVerifySelfieVninRequest == nil {
		return localVarReturnValue, nil, reportError("verificationsVerifySelfieVninRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.appId != nil {
		localVarHeaderParams["AppId"] = parameterToString(*r.appId, "")
	}
	// body params
	localVarPostBody = r.verificationsVerifySelfieVninRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
