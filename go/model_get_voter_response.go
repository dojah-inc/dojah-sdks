/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// GetVoterResponse struct for GetVoterResponse
type GetVoterResponse struct {
	Entity GetVoterResponseEntity `json:"entity"`
}

// NewGetVoterResponse instantiates a new GetVoterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVoterResponse(entity GetVoterResponseEntity) *GetVoterResponse {
	this := GetVoterResponse{}
	this.Entity = entity
	return &this
}

// NewGetVoterResponseWithDefaults instantiates a new GetVoterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVoterResponseWithDefaults() *GetVoterResponse {
	this := GetVoterResponse{}
	return &this
}

// GetEntity returns the Entity field value
func (o *GetVoterResponse) GetEntity() GetVoterResponseEntity {
	if o == nil {
		var ret GetVoterResponseEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *GetVoterResponse) GetEntityOk() (*GetVoterResponseEntity, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *GetVoterResponse) SetEntity(v GetVoterResponseEntity) {
	o.Entity = v
}

func (o GetVoterResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableGetVoterResponse struct {
	value *GetVoterResponse
	isSet bool
}

func (v NullableGetVoterResponse) Get() *GetVoterResponse {
	return v.value
}

func (v *NullableGetVoterResponse) Set(val *GetVoterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVoterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVoterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVoterResponse(val *GetVoterResponse) *NullableGetVoterResponse {
	return &NullableGetVoterResponse{value: val, isSet: true}
}

func (v NullableGetVoterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVoterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


