/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// NotifyWebhookRequestData struct for NotifyWebhookRequestData
type NotifyWebhookRequestData struct {
	Stuff *string `json:"stuff,omitempty"`
}

// NewNotifyWebhookRequestData instantiates a new NotifyWebhookRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyWebhookRequestData() *NotifyWebhookRequestData {
	this := NotifyWebhookRequestData{}
	return &this
}

// NewNotifyWebhookRequestDataWithDefaults instantiates a new NotifyWebhookRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyWebhookRequestDataWithDefaults() *NotifyWebhookRequestData {
	this := NotifyWebhookRequestData{}
	return &this
}

// GetStuff returns the Stuff field value if set, zero value otherwise.
func (o *NotifyWebhookRequestData) GetStuff() string {
	if o == nil || isNil(o.Stuff) {
		var ret string
		return ret
	}
	return *o.Stuff
}

// GetStuffOk returns a tuple with the Stuff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyWebhookRequestData) GetStuffOk() (*string, bool) {
	if o == nil || isNil(o.Stuff) {
    return nil, false
	}
	return o.Stuff, true
}

// HasStuff returns a boolean if a field has been set.
func (o *NotifyWebhookRequestData) HasStuff() bool {
	if o != nil && !isNil(o.Stuff) {
		return true
	}

	return false
}

// SetStuff gets a reference to the given string and assigns it to the Stuff field.
func (o *NotifyWebhookRequestData) SetStuff(v string) {
	o.Stuff = &v
}

func (o NotifyWebhookRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Stuff) {
		toSerialize["stuff"] = o.Stuff
	}
	return json.Marshal(toSerialize)
}

type NullableNotifyWebhookRequestData struct {
	value *NotifyWebhookRequestData
	isSet bool
}

func (v NullableNotifyWebhookRequestData) Get() *NotifyWebhookRequestData {
	return v.value
}

func (v *NullableNotifyWebhookRequestData) Set(val *NotifyWebhookRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyWebhookRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyWebhookRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyWebhookRequestData(val *NotifyWebhookRequestData) *NullableNotifyWebhookRequestData {
	return &NullableNotifyWebhookRequestData{value: val, isSet: true}
}

func (v NullableNotifyWebhookRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyWebhookRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


