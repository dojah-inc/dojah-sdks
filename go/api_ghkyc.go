/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// GHKYCApiService GHKYCApi service
type GHKYCApiService service

type GHKYCApiGetDriversLicenseRequest struct {
	ctx context.Context
	ApiService *GHKYCApiService
	id *string
	fullName *string
	dateOfBirth *string
}

func (r GHKYCApiGetDriversLicenseRequest) Id(id string) GHKYCApiGetDriversLicenseRequest {
	r.id = &id
	return r
}

func (r GHKYCApiGetDriversLicenseRequest) FullName(fullName string) GHKYCApiGetDriversLicenseRequest {
	r.fullName = &fullName
	return r
}

func (r GHKYCApiGetDriversLicenseRequest) DateOfBirth(dateOfBirth string) GHKYCApiGetDriversLicenseRequest {
	r.dateOfBirth = &dateOfBirth
	return r
}

func (r GHKYCApiGetDriversLicenseRequest) Execute() (*GetDriversLicenseResponse, *http.Response, error) {
	return r.ApiService.GetDriversLicenseExecute(r)
}

/*
GetDriversLicense Driver's License

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GHKYCApiGetDriversLicenseRequest
*/
func (a *GHKYCApiService) GetDriversLicense() GHKYCApiGetDriversLicenseRequest {
	return GHKYCApiGetDriversLicenseRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return GetDriversLicenseResponse
func (a *GHKYCApiService) GetDriversLicenseExecute(r GHKYCApiGetDriversLicenseRequest) (*GetDriversLicenseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDriversLicenseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GHKYCApiService.GetDriversLicense")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/gh/kyc/dl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.fullName != nil {
		localVarQueryParams.Add("full_name", parameterToString(*r.fullName, ""))
	}
	if r.dateOfBirth != nil {
		localVarQueryParams.Add("date_of_birth", parameterToString(*r.dateOfBirth, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Appid"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GHKYCApiGetPassportRequest struct {
	ctx context.Context
	ApiService *GHKYCApiService
	id *string
	firstName *string
	lastName *string
	middleName *string
	dateOfBirth *string
}

func (r GHKYCApiGetPassportRequest) Id(id string) GHKYCApiGetPassportRequest {
	r.id = &id
	return r
}

func (r GHKYCApiGetPassportRequest) FirstName(firstName string) GHKYCApiGetPassportRequest {
	r.firstName = &firstName
	return r
}

func (r GHKYCApiGetPassportRequest) LastName(lastName string) GHKYCApiGetPassportRequest {
	r.lastName = &lastName
	return r
}

func (r GHKYCApiGetPassportRequest) MiddleName(middleName string) GHKYCApiGetPassportRequest {
	r.middleName = &middleName
	return r
}

func (r GHKYCApiGetPassportRequest) DateOfBirth(dateOfBirth string) GHKYCApiGetPassportRequest {
	r.dateOfBirth = &dateOfBirth
	return r
}

func (r GHKYCApiGetPassportRequest) Execute() (*GetPassportResponse, *http.Response, error) {
	return r.ApiService.GetPassportExecute(r)
}

/*
GetPassport Passport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GHKYCApiGetPassportRequest
*/
func (a *GHKYCApiService) GetPassport() GHKYCApiGetPassportRequest {
	return GHKYCApiGetPassportRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return GetPassportResponse
func (a *GHKYCApiService) GetPassportExecute(r GHKYCApiGetPassportRequest) (*GetPassportResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPassportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GHKYCApiService.GetPassport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/gh/kyc/passport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.firstName != nil {
		localVarQueryParams.Add("first_name", parameterToString(*r.firstName, ""))
	}
	if r.lastName != nil {
		localVarQueryParams.Add("last_name", parameterToString(*r.lastName, ""))
	}
	if r.middleName != nil {
		localVarQueryParams.Add("middle_name", parameterToString(*r.middleName, ""))
	}
	if r.dateOfBirth != nil {
		localVarQueryParams.Add("date_of_birth", parameterToString(*r.dateOfBirth, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Appid"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GHKYCApiGetSsnitRequest struct {
	ctx context.Context
	ApiService *GHKYCApiService
	id *string
	fullName *string
	dateOfBirth *string
}

func (r GHKYCApiGetSsnitRequest) Id(id string) GHKYCApiGetSsnitRequest {
	r.id = &id
	return r
}

func (r GHKYCApiGetSsnitRequest) FullName(fullName string) GHKYCApiGetSsnitRequest {
	r.fullName = &fullName
	return r
}

func (r GHKYCApiGetSsnitRequest) DateOfBirth(dateOfBirth string) GHKYCApiGetSsnitRequest {
	r.dateOfBirth = &dateOfBirth
	return r
}

func (r GHKYCApiGetSsnitRequest) Execute() (*GetSsnitResponse, *http.Response, error) {
	return r.ApiService.GetSsnitExecute(r)
}

/*
GetSsnit SSNIT

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GHKYCApiGetSsnitRequest
*/
func (a *GHKYCApiService) GetSsnit() GHKYCApiGetSsnitRequest {
	return GHKYCApiGetSsnitRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return GetSsnitResponse
func (a *GHKYCApiService) GetSsnitExecute(r GHKYCApiGetSsnitRequest) (*GetSsnitResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSsnitResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GHKYCApiService.GetSsnit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/gh/kyc/ssnit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.fullName != nil {
		localVarQueryParams.Add("full_name", parameterToString(*r.fullName, ""))
	}
	if r.dateOfBirth != nil {
		localVarQueryParams.Add("date_of_birth", parameterToString(*r.dateOfBirth, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Appid"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GHKYCApiGetVoterRequest struct {
	ctx context.Context
	ApiService *GHKYCApiService
	id *int32
	fullName *string
	isNewId *bool
}

func (r GHKYCApiGetVoterRequest) Id(id int32) GHKYCApiGetVoterRequest {
	r.id = &id
	return r
}

func (r GHKYCApiGetVoterRequest) FullName(fullName string) GHKYCApiGetVoterRequest {
	r.fullName = &fullName
	return r
}

func (r GHKYCApiGetVoterRequest) IsNewId(isNewId bool) GHKYCApiGetVoterRequest {
	r.isNewId = &isNewId
	return r
}

func (r GHKYCApiGetVoterRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetVoterExecute(r)
}

/*
GetVoter Voter ID Lookup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GHKYCApiGetVoterRequest
*/
func (a *GHKYCApiService) GetVoter() GHKYCApiGetVoterRequest {
	return GHKYCApiGetVoterRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *GHKYCApiService) GetVoterExecute(r GHKYCApiGetVoterRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GHKYCApiService.GetVoter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/gh/kyc/voter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.fullName != nil {
		localVarQueryParams.Add("full_name", parameterToString(*r.fullName, ""))
	}
	if r.isNewId != nil {
		localVarQueryParams.Add("is_new_id", parameterToString(*r.isNewId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Appid"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
