/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// GetCacResponseEntity struct for GetCacResponseEntity
type GetCacResponseEntity struct {
	RcNumber *string `json:"rc_number,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
	Address *string `json:"address,omitempty"`
	DateOfRegistration *string `json:"date_of_registration,omitempty"`
}

// NewGetCacResponseEntity instantiates a new GetCacResponseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCacResponseEntity() *GetCacResponseEntity {
	this := GetCacResponseEntity{}
	return &this
}

// NewGetCacResponseEntityWithDefaults instantiates a new GetCacResponseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCacResponseEntityWithDefaults() *GetCacResponseEntity {
	this := GetCacResponseEntity{}
	return &this
}

// GetRcNumber returns the RcNumber field value if set, zero value otherwise.
func (o *GetCacResponseEntity) GetRcNumber() string {
	if o == nil || isNil(o.RcNumber) {
		var ret string
		return ret
	}
	return *o.RcNumber
}

// GetRcNumberOk returns a tuple with the RcNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCacResponseEntity) GetRcNumberOk() (*string, bool) {
	if o == nil || isNil(o.RcNumber) {
    return nil, false
	}
	return o.RcNumber, true
}

// HasRcNumber returns a boolean if a field has been set.
func (o *GetCacResponseEntity) HasRcNumber() bool {
	if o != nil && !isNil(o.RcNumber) {
		return true
	}

	return false
}

// SetRcNumber gets a reference to the given string and assigns it to the RcNumber field.
func (o *GetCacResponseEntity) SetRcNumber(v string) {
	o.RcNumber = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *GetCacResponseEntity) GetCompanyName() string {
	if o == nil || isNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCacResponseEntity) GetCompanyNameOk() (*string, bool) {
	if o == nil || isNil(o.CompanyName) {
    return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *GetCacResponseEntity) HasCompanyName() bool {
	if o != nil && !isNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *GetCacResponseEntity) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *GetCacResponseEntity) GetAddress() string {
	if o == nil || isNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCacResponseEntity) GetAddressOk() (*string, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *GetCacResponseEntity) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *GetCacResponseEntity) SetAddress(v string) {
	o.Address = &v
}

// GetDateOfRegistration returns the DateOfRegistration field value if set, zero value otherwise.
func (o *GetCacResponseEntity) GetDateOfRegistration() string {
	if o == nil || isNil(o.DateOfRegistration) {
		var ret string
		return ret
	}
	return *o.DateOfRegistration
}

// GetDateOfRegistrationOk returns a tuple with the DateOfRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCacResponseEntity) GetDateOfRegistrationOk() (*string, bool) {
	if o == nil || isNil(o.DateOfRegistration) {
    return nil, false
	}
	return o.DateOfRegistration, true
}

// HasDateOfRegistration returns a boolean if a field has been set.
func (o *GetCacResponseEntity) HasDateOfRegistration() bool {
	if o != nil && !isNil(o.DateOfRegistration) {
		return true
	}

	return false
}

// SetDateOfRegistration gets a reference to the given string and assigns it to the DateOfRegistration field.
func (o *GetCacResponseEntity) SetDateOfRegistration(v string) {
	o.DateOfRegistration = &v
}

func (o GetCacResponseEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RcNumber) {
		toSerialize["rc_number"] = o.RcNumber
	}
	if !isNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !isNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !isNil(o.DateOfRegistration) {
		toSerialize["date_of_registration"] = o.DateOfRegistration
	}
	return json.Marshal(toSerialize)
}

type NullableGetCacResponseEntity struct {
	value *GetCacResponseEntity
	isSet bool
}

func (v NullableGetCacResponseEntity) Get() *GetCacResponseEntity {
	return v.value
}

func (v *NullableGetCacResponseEntity) Set(val *GetCacResponseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCacResponseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCacResponseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCacResponseEntity(val *GetCacResponseEntity) *NullableGetCacResponseEntity {
	return &NullableGetCacResponseEntity{value: val, isSet: true}
}

func (v NullableGetCacResponseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCacResponseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


