/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// ValidateOtpResponseEntity struct for ValidateOtpResponseEntity
type ValidateOtpResponseEntity struct {
	Valid *bool `json:"valid,omitempty"`
}

// NewValidateOtpResponseEntity instantiates a new ValidateOtpResponseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateOtpResponseEntity() *ValidateOtpResponseEntity {
	this := ValidateOtpResponseEntity{}
	return &this
}

// NewValidateOtpResponseEntityWithDefaults instantiates a new ValidateOtpResponseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateOtpResponseEntityWithDefaults() *ValidateOtpResponseEntity {
	this := ValidateOtpResponseEntity{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ValidateOtpResponseEntity) GetValid() bool {
	if o == nil || isNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateOtpResponseEntity) GetValidOk() (*bool, bool) {
	if o == nil || isNil(o.Valid) {
    return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ValidateOtpResponseEntity) HasValid() bool {
	if o != nil && !isNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ValidateOtpResponseEntity) SetValid(v bool) {
	o.Valid = &v
}

func (o ValidateOtpResponseEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableValidateOtpResponseEntity struct {
	value *ValidateOtpResponseEntity
	isSet bool
}

func (v NullableValidateOtpResponseEntity) Get() *ValidateOtpResponseEntity {
	return v.value
}

func (v *NullableValidateOtpResponseEntity) Set(val *ValidateOtpResponseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateOtpResponseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateOtpResponseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateOtpResponseEntity(val *ValidateOtpResponseEntity) *NullableValidateOtpResponseEntity {
	return &NullableValidateOtpResponseEntity{value: val, isSet: true}
}

func (v NullableValidateOtpResponseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateOtpResponseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


