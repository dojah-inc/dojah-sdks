/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ZWKYCApiService ZWKYCApi service
type ZWKYCApiService service

type ZWKYCApiCheckCreditRequest struct {
	ctx context.Context
	ApiService *ZWKYCApiService
	idNumber *string
	name *string
	surname *string
	gender *string
	dob *string
	maritalStatus *string
	mobileNumber *int32
}

func (r ZWKYCApiCheckCreditRequest) IdNumber(idNumber string) ZWKYCApiCheckCreditRequest {
	r.idNumber = &idNumber
	return r
}

func (r ZWKYCApiCheckCreditRequest) Name(name string) ZWKYCApiCheckCreditRequest {
	r.name = &name
	return r
}

func (r ZWKYCApiCheckCreditRequest) Surname(surname string) ZWKYCApiCheckCreditRequest {
	r.surname = &surname
	return r
}

func (r ZWKYCApiCheckCreditRequest) Gender(gender string) ZWKYCApiCheckCreditRequest {
	r.gender = &gender
	return r
}

func (r ZWKYCApiCheckCreditRequest) Dob(dob string) ZWKYCApiCheckCreditRequest {
	r.dob = &dob
	return r
}

func (r ZWKYCApiCheckCreditRequest) MaritalStatus(maritalStatus string) ZWKYCApiCheckCreditRequest {
	r.maritalStatus = &maritalStatus
	return r
}

func (r ZWKYCApiCheckCreditRequest) MobileNumber(mobileNumber int32) ZWKYCApiCheckCreditRequest {
	r.mobileNumber = &mobileNumber
	return r
}

func (r ZWKYCApiCheckCreditRequest) Execute() (*ZwKycCheckCreditResponse, *http.Response, error) {
	return r.ApiService.CheckCreditExecute(r)
}

/*
CheckCredit Credit Check

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ZWKYCApiCheckCreditRequest
*/
func (a *ZWKYCApiService) CheckCredit() ZWKYCApiCheckCreditRequest {
	return ZWKYCApiCheckCreditRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return ZwKycCheckCreditResponse
func (a *ZWKYCApiService) CheckCreditExecute(r ZWKYCApiCheckCreditRequest) (*ZwKycCheckCreditResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZwKycCheckCreditResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZWKYCApiService.CheckCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/zw/kyc/fcb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.idNumber != nil {
		localVarQueryParams.Add("id_number", parameterToString(*r.idNumber, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.surname != nil {
		localVarQueryParams.Add("surname", parameterToString(*r.surname, ""))
	}
	if r.gender != nil {
		localVarQueryParams.Add("gender", parameterToString(*r.gender, ""))
	}
	if r.dob != nil {
		localVarQueryParams.Add("dob", parameterToString(*r.dob, ""))
	}
	if r.maritalStatus != nil {
		localVarQueryParams.Add("marital_status", parameterToString(*r.maritalStatus, ""))
	}
	if r.mobileNumber != nil {
		localVarQueryParams.Add("mobile_number", parameterToString(*r.mobileNumber, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["AppId"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZWKYCApiVerifyIdRequest struct {
	ctx context.Context
	ApiService *ZWKYCApiService
	id *string
}

func (r ZWKYCApiVerifyIdRequest) Id(id string) ZWKYCApiVerifyIdRequest {
	r.id = &id
	return r
}

func (r ZWKYCApiVerifyIdRequest) Execute() (*ZwKycVerifyIdResponse, *http.Response, error) {
	return r.ApiService.VerifyIdExecute(r)
}

/*
VerifyId National ID Verification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ZWKYCApiVerifyIdRequest
*/
func (a *ZWKYCApiService) VerifyId() ZWKYCApiVerifyIdRequest {
	return ZWKYCApiVerifyIdRequest{
		ApiService: a,
		ctx: a.client.cfg.Context,
	}
}

// Execute executes the request
//  @return ZwKycVerifyIdResponse
func (a *ZWKYCApiService) VerifyIdExecute(r ZWKYCApiVerifyIdRequest) (*ZwKycVerifyIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZwKycVerifyIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZWKYCApiService.VerifyId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/zw/kyc/nin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["appIdAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["AppId"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
