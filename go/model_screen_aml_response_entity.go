/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// ScreenAmlResponseEntity struct for ScreenAmlResponseEntity
type ScreenAmlResponseEntity struct {
	ReferenceId *string `json:"reference_id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewScreenAmlResponseEntity instantiates a new ScreenAmlResponseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScreenAmlResponseEntity() *ScreenAmlResponseEntity {
	this := ScreenAmlResponseEntity{}
	return &this
}

// NewScreenAmlResponseEntityWithDefaults instantiates a new ScreenAmlResponseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScreenAmlResponseEntityWithDefaults() *ScreenAmlResponseEntity {
	this := ScreenAmlResponseEntity{}
	return &this
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *ScreenAmlResponseEntity) GetReferenceId() string {
	if o == nil || isNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScreenAmlResponseEntity) GetReferenceIdOk() (*string, bool) {
	if o == nil || isNil(o.ReferenceId) {
    return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *ScreenAmlResponseEntity) HasReferenceId() bool {
	if o != nil && !isNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *ScreenAmlResponseEntity) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScreenAmlResponseEntity) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScreenAmlResponseEntity) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScreenAmlResponseEntity) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScreenAmlResponseEntity) SetStatus(v string) {
	o.Status = &v
}

func (o ScreenAmlResponseEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableScreenAmlResponseEntity struct {
	value *ScreenAmlResponseEntity
	isSet bool
}

func (v NullableScreenAmlResponseEntity) Get() *ScreenAmlResponseEntity {
	return v.value
}

func (v *NullableScreenAmlResponseEntity) Set(val *ScreenAmlResponseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableScreenAmlResponseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableScreenAmlResponseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreenAmlResponseEntity(val *ScreenAmlResponseEntity) *NullableScreenAmlResponseEntity {
	return &NullableScreenAmlResponseEntity{value: val, isSet: true}
}

func (v NullableScreenAmlResponseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreenAmlResponseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


