/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// ValidateBvnResponseEntityBvn struct for ValidateBvnResponseEntityBvn
type ValidateBvnResponseEntityBvn struct {
	Status *bool `json:"status,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewValidateBvnResponseEntityBvn instantiates a new ValidateBvnResponseEntityBvn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateBvnResponseEntityBvn() *ValidateBvnResponseEntityBvn {
	this := ValidateBvnResponseEntityBvn{}
	return &this
}

// NewValidateBvnResponseEntityBvnWithDefaults instantiates a new ValidateBvnResponseEntityBvn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateBvnResponseEntityBvnWithDefaults() *ValidateBvnResponseEntityBvn {
	this := ValidateBvnResponseEntityBvn{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ValidateBvnResponseEntityBvn) GetStatus() bool {
	if o == nil || isNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateBvnResponseEntityBvn) GetStatusOk() (*bool, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ValidateBvnResponseEntityBvn) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *ValidateBvnResponseEntityBvn) SetStatus(v bool) {
	o.Status = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ValidateBvnResponseEntityBvn) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateBvnResponseEntityBvn) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ValidateBvnResponseEntityBvn) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ValidateBvnResponseEntityBvn) SetValue(v string) {
	o.Value = &v
}

func (o ValidateBvnResponseEntityBvn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableValidateBvnResponseEntityBvn struct {
	value *ValidateBvnResponseEntityBvn
	isSet bool
}

func (v NullableValidateBvnResponseEntityBvn) Get() *ValidateBvnResponseEntityBvn {
	return v.value
}

func (v *NullableValidateBvnResponseEntityBvn) Set(val *ValidateBvnResponseEntityBvn) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateBvnResponseEntityBvn) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateBvnResponseEntityBvn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateBvnResponseEntityBvn(val *ValidateBvnResponseEntityBvn) *NullableValidateBvnResponseEntityBvn {
	return &NullableValidateBvnResponseEntityBvn{value: val, isSet: true}
}

func (v NullableValidateBvnResponseEntityBvn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateBvnResponseEntityBvn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


