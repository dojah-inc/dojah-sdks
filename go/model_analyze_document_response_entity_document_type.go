/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// AnalyzeDocumentResponseEntityDocumentType struct for AnalyzeDocumentResponseEntityDocumentType
type AnalyzeDocumentResponseEntityDocumentType struct {
	DocumentCountryCode *string `json:"document_country_code,omitempty"`
	DocumentCountryName *string `json:"document_country_name,omitempty"`
	DocumentName *string `json:"document_name,omitempty"`
	DocumentTypeId *float32 `json:"document_type_id,omitempty"`
	DocumentYear *string `json:"document_year,omitempty"`
}

// NewAnalyzeDocumentResponseEntityDocumentType instantiates a new AnalyzeDocumentResponseEntityDocumentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeDocumentResponseEntityDocumentType() *AnalyzeDocumentResponseEntityDocumentType {
	this := AnalyzeDocumentResponseEntityDocumentType{}
	return &this
}

// NewAnalyzeDocumentResponseEntityDocumentTypeWithDefaults instantiates a new AnalyzeDocumentResponseEntityDocumentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeDocumentResponseEntityDocumentTypeWithDefaults() *AnalyzeDocumentResponseEntityDocumentType {
	this := AnalyzeDocumentResponseEntityDocumentType{}
	return &this
}

// GetDocumentCountryCode returns the DocumentCountryCode field value if set, zero value otherwise.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentCountryCode() string {
	if o == nil || isNil(o.DocumentCountryCode) {
		var ret string
		return ret
	}
	return *o.DocumentCountryCode
}

// GetDocumentCountryCodeOk returns a tuple with the DocumentCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentCountryCodeOk() (*string, bool) {
	if o == nil || isNil(o.DocumentCountryCode) {
    return nil, false
	}
	return o.DocumentCountryCode, true
}

// HasDocumentCountryCode returns a boolean if a field has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) HasDocumentCountryCode() bool {
	if o != nil && !isNil(o.DocumentCountryCode) {
		return true
	}

	return false
}

// SetDocumentCountryCode gets a reference to the given string and assigns it to the DocumentCountryCode field.
func (o *AnalyzeDocumentResponseEntityDocumentType) SetDocumentCountryCode(v string) {
	o.DocumentCountryCode = &v
}

// GetDocumentCountryName returns the DocumentCountryName field value if set, zero value otherwise.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentCountryName() string {
	if o == nil || isNil(o.DocumentCountryName) {
		var ret string
		return ret
	}
	return *o.DocumentCountryName
}

// GetDocumentCountryNameOk returns a tuple with the DocumentCountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentCountryNameOk() (*string, bool) {
	if o == nil || isNil(o.DocumentCountryName) {
    return nil, false
	}
	return o.DocumentCountryName, true
}

// HasDocumentCountryName returns a boolean if a field has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) HasDocumentCountryName() bool {
	if o != nil && !isNil(o.DocumentCountryName) {
		return true
	}

	return false
}

// SetDocumentCountryName gets a reference to the given string and assigns it to the DocumentCountryName field.
func (o *AnalyzeDocumentResponseEntityDocumentType) SetDocumentCountryName(v string) {
	o.DocumentCountryName = &v
}

// GetDocumentName returns the DocumentName field value if set, zero value otherwise.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentName() string {
	if o == nil || isNil(o.DocumentName) {
		var ret string
		return ret
	}
	return *o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentNameOk() (*string, bool) {
	if o == nil || isNil(o.DocumentName) {
    return nil, false
	}
	return o.DocumentName, true
}

// HasDocumentName returns a boolean if a field has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) HasDocumentName() bool {
	if o != nil && !isNil(o.DocumentName) {
		return true
	}

	return false
}

// SetDocumentName gets a reference to the given string and assigns it to the DocumentName field.
func (o *AnalyzeDocumentResponseEntityDocumentType) SetDocumentName(v string) {
	o.DocumentName = &v
}

// GetDocumentTypeId returns the DocumentTypeId field value if set, zero value otherwise.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentTypeId() float32 {
	if o == nil || isNil(o.DocumentTypeId) {
		var ret float32
		return ret
	}
	return *o.DocumentTypeId
}

// GetDocumentTypeIdOk returns a tuple with the DocumentTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentTypeIdOk() (*float32, bool) {
	if o == nil || isNil(o.DocumentTypeId) {
    return nil, false
	}
	return o.DocumentTypeId, true
}

// HasDocumentTypeId returns a boolean if a field has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) HasDocumentTypeId() bool {
	if o != nil && !isNil(o.DocumentTypeId) {
		return true
	}

	return false
}

// SetDocumentTypeId gets a reference to the given float32 and assigns it to the DocumentTypeId field.
func (o *AnalyzeDocumentResponseEntityDocumentType) SetDocumentTypeId(v float32) {
	o.DocumentTypeId = &v
}

// GetDocumentYear returns the DocumentYear field value if set, zero value otherwise.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentYear() string {
	if o == nil || isNil(o.DocumentYear) {
		var ret string
		return ret
	}
	return *o.DocumentYear
}

// GetDocumentYearOk returns a tuple with the DocumentYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) GetDocumentYearOk() (*string, bool) {
	if o == nil || isNil(o.DocumentYear) {
    return nil, false
	}
	return o.DocumentYear, true
}

// HasDocumentYear returns a boolean if a field has been set.
func (o *AnalyzeDocumentResponseEntityDocumentType) HasDocumentYear() bool {
	if o != nil && !isNil(o.DocumentYear) {
		return true
	}

	return false
}

// SetDocumentYear gets a reference to the given string and assigns it to the DocumentYear field.
func (o *AnalyzeDocumentResponseEntityDocumentType) SetDocumentYear(v string) {
	o.DocumentYear = &v
}

func (o AnalyzeDocumentResponseEntityDocumentType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DocumentCountryCode) {
		toSerialize["document_country_code"] = o.DocumentCountryCode
	}
	if !isNil(o.DocumentCountryName) {
		toSerialize["document_country_name"] = o.DocumentCountryName
	}
	if !isNil(o.DocumentName) {
		toSerialize["document_name"] = o.DocumentName
	}
	if !isNil(o.DocumentTypeId) {
		toSerialize["document_type_id"] = o.DocumentTypeId
	}
	if !isNil(o.DocumentYear) {
		toSerialize["document_year"] = o.DocumentYear
	}
	return json.Marshal(toSerialize)
}

type NullableAnalyzeDocumentResponseEntityDocumentType struct {
	value *AnalyzeDocumentResponseEntityDocumentType
	isSet bool
}

func (v NullableAnalyzeDocumentResponseEntityDocumentType) Get() *AnalyzeDocumentResponseEntityDocumentType {
	return v.value
}

func (v *NullableAnalyzeDocumentResponseEntityDocumentType) Set(val *AnalyzeDocumentResponseEntityDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeDocumentResponseEntityDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeDocumentResponseEntityDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeDocumentResponseEntityDocumentType(val *AnalyzeDocumentResponseEntityDocumentType) *NullableAnalyzeDocumentResponseEntityDocumentType {
	return &NullableAnalyzeDocumentResponseEntityDocumentType{value: val, isSet: true}
}

func (v NullableAnalyzeDocumentResponseEntityDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeDocumentResponseEntityDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


