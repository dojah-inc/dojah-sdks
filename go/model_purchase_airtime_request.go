/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// PurchaseAirtimeRequest struct for PurchaseAirtimeRequest
type PurchaseAirtimeRequest struct {
	Destination *string `json:"destination,omitempty"`
	Amount *string `json:"amount,omitempty"`
}

// NewPurchaseAirtimeRequest instantiates a new PurchaseAirtimeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseAirtimeRequest() *PurchaseAirtimeRequest {
	this := PurchaseAirtimeRequest{}
	return &this
}

// NewPurchaseAirtimeRequestWithDefaults instantiates a new PurchaseAirtimeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseAirtimeRequestWithDefaults() *PurchaseAirtimeRequest {
	this := PurchaseAirtimeRequest{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *PurchaseAirtimeRequest) GetDestination() string {
	if o == nil || isNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseAirtimeRequest) GetDestinationOk() (*string, bool) {
	if o == nil || isNil(o.Destination) {
    return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *PurchaseAirtimeRequest) HasDestination() bool {
	if o != nil && !isNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *PurchaseAirtimeRequest) SetDestination(v string) {
	o.Destination = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PurchaseAirtimeRequest) GetAmount() string {
	if o == nil || isNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseAirtimeRequest) GetAmountOk() (*string, bool) {
	if o == nil || isNil(o.Amount) {
    return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PurchaseAirtimeRequest) HasAmount() bool {
	if o != nil && !isNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *PurchaseAirtimeRequest) SetAmount(v string) {
	o.Amount = &v
}

func (o PurchaseAirtimeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !isNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullablePurchaseAirtimeRequest struct {
	value *PurchaseAirtimeRequest
	isSet bool
}

func (v NullablePurchaseAirtimeRequest) Get() *PurchaseAirtimeRequest {
	return v.value
}

func (v *NullablePurchaseAirtimeRequest) Set(val *PurchaseAirtimeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseAirtimeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseAirtimeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseAirtimeRequest(val *PurchaseAirtimeRequest) *NullablePurchaseAirtimeRequest {
	return &NullablePurchaseAirtimeRequest{value: val, isSet: true}
}

func (v NullablePurchaseAirtimeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseAirtimeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


