/*
DOJAH APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// CollectTransactionsRequest struct for CollectTransactionsRequest
type CollectTransactionsRequest struct {
	Transactions []CollectTransactionsRequestTransactionsInner `json:"transactions,omitempty"`
	AppId *string `json:"app_id,omitempty"`
}

// NewCollectTransactionsRequest instantiates a new CollectTransactionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectTransactionsRequest() *CollectTransactionsRequest {
	this := CollectTransactionsRequest{}
	return &this
}

// NewCollectTransactionsRequestWithDefaults instantiates a new CollectTransactionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectTransactionsRequestWithDefaults() *CollectTransactionsRequest {
	this := CollectTransactionsRequest{}
	return &this
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *CollectTransactionsRequest) GetTransactions() []CollectTransactionsRequestTransactionsInner {
	if o == nil || isNil(o.Transactions) {
		var ret []CollectTransactionsRequestTransactionsInner
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectTransactionsRequest) GetTransactionsOk() ([]CollectTransactionsRequestTransactionsInner, bool) {
	if o == nil || isNil(o.Transactions) {
    return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *CollectTransactionsRequest) HasTransactions() bool {
	if o != nil && !isNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []CollectTransactionsRequestTransactionsInner and assigns it to the Transactions field.
func (o *CollectTransactionsRequest) SetTransactions(v []CollectTransactionsRequestTransactionsInner) {
	o.Transactions = v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *CollectTransactionsRequest) GetAppId() string {
	if o == nil || isNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectTransactionsRequest) GetAppIdOk() (*string, bool) {
	if o == nil || isNil(o.AppId) {
    return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *CollectTransactionsRequest) HasAppId() bool {
	if o != nil && !isNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *CollectTransactionsRequest) SetAppId(v string) {
	o.AppId = &v
}

func (o CollectTransactionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !isNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}
	return json.Marshal(toSerialize)
}

type NullableCollectTransactionsRequest struct {
	value *CollectTransactionsRequest
	isSet bool
}

func (v NullableCollectTransactionsRequest) Get() *CollectTransactionsRequest {
	return v.value
}

func (v *NullableCollectTransactionsRequest) Set(val *CollectTransactionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectTransactionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectTransactionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectTransactionsRequest(val *CollectTransactionsRequest) *NullableCollectTransactionsRequest {
	return &NullableCollectTransactionsRequest{value: val, isSet: true}
}

func (v NullableCollectTransactionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectTransactionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


