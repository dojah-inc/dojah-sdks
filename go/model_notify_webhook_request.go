/*
DOJAH Publilc APIs

Use Dojah to verify, onboard and manage user identity across Africa!

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package dojah

import (
	"encoding/json"
)

// NotifyWebhookRequest struct for NotifyWebhookRequest
type NotifyWebhookRequest struct {
	Subject *string `json:"subject,omitempty"`
	Data *NotifyWebhookRequestData `json:"data,omitempty"`
}

// NewNotifyWebhookRequest instantiates a new NotifyWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyWebhookRequest() *NotifyWebhookRequest {
	this := NotifyWebhookRequest{}
	return &this
}

// NewNotifyWebhookRequestWithDefaults instantiates a new NotifyWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyWebhookRequestWithDefaults() *NotifyWebhookRequest {
	this := NotifyWebhookRequest{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NotifyWebhookRequest) GetSubject() string {
	if o == nil || isNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyWebhookRequest) GetSubjectOk() (*string, bool) {
	if o == nil || isNil(o.Subject) {
    return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NotifyWebhookRequest) HasSubject() bool {
	if o != nil && !isNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *NotifyWebhookRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *NotifyWebhookRequest) GetData() NotifyWebhookRequestData {
	if o == nil || isNil(o.Data) {
		var ret NotifyWebhookRequestData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyWebhookRequest) GetDataOk() (*NotifyWebhookRequestData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *NotifyWebhookRequest) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given NotifyWebhookRequestData and assigns it to the Data field.
func (o *NotifyWebhookRequest) SetData(v NotifyWebhookRequestData) {
	o.Data = &v
}

func (o NotifyWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableNotifyWebhookRequest struct {
	value *NotifyWebhookRequest
	isSet bool
}

func (v NullableNotifyWebhookRequest) Get() *NotifyWebhookRequest {
	return v.value
}

func (v *NullableNotifyWebhookRequest) Set(val *NotifyWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyWebhookRequest(val *NotifyWebhookRequest) *NullableNotifyWebhookRequest {
	return &NullableNotifyWebhookRequest{value: val, isSet: true}
}

func (v NullableNotifyWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


